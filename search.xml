<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>不为人知的——大学社团招新</title>
      <link href="/2025/09/21/20250921/"/>
      <url>/2025/09/21/20250921/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要： 揭秘了一些关于大学中各种招新的背后<span id="more"></span>。</p><p><strong>preface:  大部分人刚步入大学，还是懵懂的囚徒。往往在军训期间，就会蹦出一堆社团招新，比如院系中的新闻中心、学生会等等，又或者一些竞赛团队，亦或是一些名存实亡的各种乱七八糟的社团。那么，你有没有想过，这些初见很高大上的社团的背后，隐藏着什么呢？</strong></p><h2 id="不为人知的——大学社团招新"><a href="#不为人知的——大学社团招新" class="headerlink" title="不为人知的——大学社团招新"></a>不为人知的——大学社团招新</h2><p>在正式论述前，请容许我先介绍本文适用范围。本文的论述均佐证来源于室友的闲聊，也许只是听错导致的误会，仅仅适用于本酒八五中特定年份特定学院中的某些社团，想必其他大学肯定不是如下面所讲的。</p><p>下面，我们来分点介绍一些道听途说。</p><h3 id="吹的天花乱坠的背后"><a href="#吹的天花乱坠的背后" class="headerlink" title="吹的天花乱坠的背后"></a>吹的天花乱坠的背后</h3><p>大一军训期间，那时我还怀揣着痴心妄想，一堆社团招新讲的是天花乱坠，讲了各种各种进社团的好处——目的很明显，为了<strong>骗</strong>到足够多的人进社团。当然，基本上大部分人都被骗到了。结果才发现，还要面试！于是报了4、5个社团的我，在填写申请表时以自以为足够真诚的字样填满了。面试时，面对一大堆各种技能、亦或者是经验的要求，笑了。最终，我一个社团也没有被接纳。这里的社团是院系、校级的学生组织（就是有工时的那种）。当然，还有百团大战，现在想来更是可笑，所谓百团大战，就是扫码加个群，然后如你所预料的那样，总是那几个人谈东说西，对于有抱负的新生，也是无视你。总而言之就是个笑话。我当初也进了两个群，结果到最后也不知道到底是什么东西。当然，有技术含量的还有一些科创团队，但是但凡看过的都知道，他们的要求简直不是人能想出来的，对于基本什么都不知道的新生，他们的招新目标显然是有资源基础的，但是在招新时仍然吹的天花乱坠，害人不浅。</p><h3 id="为什么你一个社团也进不了？"><a href="#为什么你一个社团也进不了？" class="headerlink" title="为什么你一个社团也进不了？"></a>为什么你一个社团也进不了？</h3><p>你可能同我一样，报社团怀揣着的不是功利心，而是真诚，结果大败而归。那么下面我要探讨一些社团招新的规则。</p><p>女生优先原则。在我这个班级男女比能来到恐怖的10倍以上的学校，女生优先很容易理解。负责招新工作的人一般是男生。而其中不乏有人压抑幻想了。于是，在一个漂亮的学妹和一个普通的学弟中选择，很显然会选前者。不光是社团，就连科创团队的招新也是如此。比如，我的一个室友就是负责一个机器人大赛社团的招新，很显然，能进这个团队就意味着必保研定能加分，他闲聊时就明显表示了自己对女生的偏袒和对男生的压力——因为他希望招进学妹（当然，前提是有颜值）。我不知道屏幕前的你是怎样想的，但这无疑是确凿的规则。</p><p>熟人优先原则。很明显的一种原则，只要你和负责招新的人熟，比如校友，或者他接受了你的送礼。那么你就基本保送了，当然面试流程大抵还是要走一下的。很容易理解，因为很多社团其实根本没有很大技术上的含金量，是个人就能做（譬如大学里面的班干部），无非就搞个面试，来随便做个筛选。如果你傻乎乎的期盼其中有任何哪怕一丁点的公正公平性的话，那我就要狠狠地嘲笑了。所以，仅从目的性角度出发，想要被高概率录取，就不能真诚。</p><p>“经历优先原则”。面试的时候，一般都有个自我介绍，那么很显然，那些社团的人是更偏爱发言流利、有相关技能或者经历之类的人。于是结结巴巴的你，虽然极力表示自己的负责或者其他品质，也难以被接受。是不是很讽刺？这究竟是进社团，还是工作面试？当然，上面的这些都能编，也就是说你也只要骗过面试官，给他留下好印象的。</p><h3 id="社团内部的等级"><a href="#社团内部的等级" class="headerlink" title="社团内部的等级"></a>社团内部的等级</h3><p>还记得在社团招新的时候，就有人澄清说什么社团内没有官僚主义、没有小团体。然而，现实的运作看起来却并非如此。部长其实正如同大学里的班长，掌握着很多不为认知的东西，与他搞好关系（目的性角度），很大概率能得到下一任部长的位置（倘若你指望努力干活能升到部长，那我劝你死心吧）。显然，在学生组织中当点小官是有好处的。比如志愿时——我评价为可笑的东西，可以随随便便给自己录入上百个，只要你是负责这方面的，因为部长大概率会和这方面的职工打交道。再比如负责面试、给别人派活等等。当然，如果你是凭着自己的运气进入社团的，那么你大概率干一会就会选择跑路了，因为你只是作为一个底层的干活的人。</p><h3 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h3><p>总而言之，在这个场景中，我所接触感受到的大学社团就是如此。这也很容易理解，毕竟绝大多数人都是奔着利益来的，很多大二就会跑路，于是乎只能想尽方法来骗新生了。</p>]]></content>
      
      
      <categories>
          
          <category> 胡言乱语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学 </tag>
            
            <tag> 搞笑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端练习</title>
      <link href="/2025/08/27/htmlwork/"/>
      <url>/2025/08/27/htmlwork/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 本文为每日对HTML、CSS、JavaScript等前端知识的练习项目。刚接触不久</p><h2 id="项目1：CSS滚动指示器动画"><a href="#项目1：CSS滚动指示器动画" class="headerlink" title="项目1：CSS滚动指示器动画"></a>项目1：CSS滚动指示器动画</h2><p>简介：本项目主要是设计了多种滚动指示器（一根直线）的动画。</p><p>说明：fork自codepen。Original URL: <a href="https://codepen.io/nxworld/pen/GRpGOxv">https://codepen.io/nxworld/pen/GRpGOxv</a>.</p><p>代码就不粘贴了，显得太冗杂了（而且不是自己写的）</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="1-超链接通过id实现元素定位"><a href="#1-超链接通过id实现元素定位" class="headerlink" title="1. 超链接通过id实现元素定位"></a>1. <strong>超链接通过id实现元素定位</strong></h4><p>在HTML中，利用标签 <code>a</code> 和元素的id可以实现定位的操作，也可以实现跨界面定位。示例如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tou<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#tou<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>回到开头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cn.bing.com/search?mkt=zh-cn&amp;pc=LNVB&amp;FORM=LNOVCH&amp;q=d#SERP.5556<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到另一界面某个元素，假设id为SERP.5556<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然，在线网站一般是动态加载，所以跳转网页的定位要结合Js使用。</p><h4 id="2-引入CSS样式表"><a href="#2-引入CSS样式表" class="headerlink" title="2. 引入CSS样式表"></a>2. 引入CSS样式表</h4><p>上面利用了两种方式</p><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./style.css&quot;&gt;</code></p><p><code>@import url(&quot;https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@300;400&amp;display=swap&quot;);</code></p><p>前者是在 <code>head</code>签中引用，后者是在CSS文件中引用，所以它要么放到.css文件开头，要么在.html中处于 <code>style</code> 的下一行。示例中后者为导入字体；两种用法均可。</p><h4 id="3-通配选择器初始化样式"><a href="#3-通配选择器初始化样式" class="headerlink" title="3. 通配选择器初始化样式"></a>3. 通配选择器初始化样式</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于很多标签可能自带内外边距，所以可以使用通配选择器初始化样式。</p><h4 id="4-CSS样式复习与学习"><a href="#4-CSS样式复习与学习" class="headerlink" title="4. CSS样式复习与学习"></a>4. <strong>CSS样式复习与学习</strong></h4><p><code>scroll-behavior</code>；有auto和smooth两个值，负责滚动是否平滑还是瞬间</p><p><code>linear-gradient</code>; 属于创建图像，一般用于 <code>background-image</code>; 用法如下</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>180deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> 0<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span> 80%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个值是渐变角度，为与12点钟顺时针的角度，例子中是从上往下渐变，后面参数为颜色（可以是rgb或rgba等等）与断点。例子表示从0-0是百透黑色纯色，0-80%区域是百透黑色到20%透明度黑色….如果用过powershell应该很容易理解。</p><h4 id="5-伪元素选择器"><a href="#5-伪元素选择器" class="headerlink" title="5. 伪元素选择器"></a>5. <strong>伪元素选择器</strong></h4><p>本项目中，</p><p><code>.type::after</code>； 可以理解为CSS创建了一个新元素，放到了该元素里面的最后一行。一般用来创造渲染色；</p><p>其中<code>content</code>属性是必须要的！！下面代码实现了定位到父元素左下角，并且设置高度和宽度，最后设置了渐变色，降低图片的亮度，使得文字能显示更清晰。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.type::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>180deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> 0<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span> 80%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-元素居中"><a href="#6-元素居中" class="headerlink" title="6. 元素居中"></a>6. <strong>元素居中</strong></h4><p>利用<code>translate</code>可以实现元素居中，首先元素左上角定位到中心，然后<strong>向左移动自身宽度的50%</strong>，并<strong>向上移动自身高度的50%</strong>。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>虽然使用flex布局也可以达到一样的效果。</p><h4 id="7-平滑过渡动画"><a href="#7-平滑过渡动画" class="headerlink" title="7. 平滑过渡动画"></a>7. <strong>平滑过渡动画</strong></h4><p><code>transition</code> 用于定义元素从一种状态到另一种状态时的<strong>过渡效果</strong>，让变化过程更加自然。</p><p>比如用于hover伪类的变色等变化，设定时间即可。也可以指定效果的时间。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#thanks a</span> <span class="token punctuation">&#123;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> color 0.3s<span class="token punctuation">,</span> transform 0.2s<span class="token punctuation">;</span>  <span class="token comment">/* 颜色变化0.3秒，变形变化0.2秒 如果设置成    transiton: 0.3s    那么所有变化都是0.3s内完成*/</span><span class="token punctuation">&#125;</span><span class="token selector">#thanks a:hover</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #888<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.05<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 轻微放大 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="个人练习"><a href="#个人练习" class="headerlink" title="个人练习"></a>个人练习</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">html</span> <span class="token punctuation">&#123;</span>            <span class="token property">scroll-behavior</span><span class="token punctuation">:</span> smooth<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box,        .box_0</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> test 2s ease infinite<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">a</span> <span class="token punctuation">&#123;</span>            <span class="token property">font</span><span class="token punctuation">:</span> 600 25px/1.0 sans-serif<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> color 2s<span class="token punctuation">,</span> transform 1s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">a:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.25<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>180deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>49<span class="token punctuation">,</span> 213<span class="token punctuation">,</span> 87<span class="token punctuation">,</span> 0.342<span class="token punctuation">)</span> 0<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>49<span class="token punctuation">,</span> 213<span class="token punctuation">,</span> 87<span class="token punctuation">,</span> 0.448<span class="token punctuation">)</span> 50%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>49<span class="token punctuation">,</span> 213<span class="token punctuation">,</span> 87<span class="token punctuation">,</span> 0.811<span class="token punctuation">)</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> test0 2s infinite<span class="token punctuation">;</span>            <span class="token property">pointer-events</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> test</span> <span class="token punctuation">&#123;</span>            <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> test0</span> <span class="token punctuation">&#123;</span>            <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>180deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>49<span class="token punctuation">,</span> 213<span class="token punctuation">,</span> 87<span class="token punctuation">,</span> 0.342<span class="token punctuation">)</span> 0<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>49<span class="token punctuation">,</span> 213<span class="token punctuation">,</span> 87<span class="token punctuation">,</span> 0.448<span class="token punctuation">)</span> 50%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>49<span class="token punctuation">,</span> 213<span class="token punctuation">,</span> 87<span class="token punctuation">,</span> 0.811<span class="token punctuation">)</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>f0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#f1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>box0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>f1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box_0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#f0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>box1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2025/08/27/htmlwork/bandicam2025-08-3021-29-11-185.gif" alt="效果"></p><h2 id="项目2："><a href="#项目2：" class="headerlink" title="项目2："></a>项目2：</h2>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习 第3期 JavaScript</title>
      <link href="/2025/08/24/js/"/>
      <url>/2025/08/24/js/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：html等前端学习合集<span id="more"></span>。</p><h2 id="暂时跳过"><a href="#暂时跳过" class="headerlink" title="暂时跳过"></a><strong>暂时跳过</strong></h2><p>3.3.5 模式匹配</p><p>3.9.3 对象到原始值转换</p><p>3.10.3 解构赋值</p><p>第4章</p><p>167中的for&#x2F;await与异步迭代</p><p>5.5.5 yield（以及之后的异常</p><p>5.6 其他语句</p><p>6.3.3 属性访问错误</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>javaScript的标准是简称是ES，比如常见的ES6（2016年发布），目前被绝大数浏览器支持。本文章就主要学习ES6和ES5相关。</p><p><strong>运行与简单使用</strong></p><p>如何开始交互式JavaScript会话？可以通过浏览器的解释器，也可以按照Node.js后，打开cmd输入node即可。当代码块更多时，把代码保存为js文件，可以引入Html中，然后通过浏览器打开（或者输入file:URL）；亦或者通过CMD命令 <code>node *.js</code>（注意cd文件目录）</p><p><strong>JavaScript引入</strong></p><p>最好的做法是把<code>&lt;script&gt;</code>标签放到HTML文档的最后，<code>&lt;/body&gt;</code>标签之前，这样可以提高加载页面速度。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>基本语法</strong></p><ol><li>建议每条语句用分号隔开。</li><li>注释采用的语法和C语言一致，为 <code>//</code> 、 <code>/* */</code>、HTML中的 <code>&lt;!--</code> 部分；前者和后者均只能用于单行，中者可以跨行。</li><li>声明变量大体同C语言，可以在声明的时候同时赋初始值。还可以一次声明多种 <code>var mood = &quot;happy&quot;, age = 33;</code>；其不在乎变量具体的类型，所以可以随意更改变量的数据类型</li></ol><h2 id="第一章-类型、值和变量"><a href="#第一章-类型、值和变量" class="headerlink" title="第一章 类型、值和变量"></a>第一章 类型、值和变量</h2><h3 id="数值（number"><a href="#数值（number" class="headerlink" title="数值（number)"></a>数值（number)</h3><p>字面量是什么意思？就是指出现在程序中的值，比如在代码中，出现了一个数字，那么它就是数值字面量</p><p>整数字面量，分三种进制，十六进制开头为0x，8进制为0b或者0o（不同于C语言的0x和0）；浮点字面量就是小数，用法和C语言一致，如 <code>3.14</code> <code>.3333</code> <code>6.02e-23</code></p><p>还可以为数字添加下划线以分割为数字段，容易看清。涉及数值计算有Math对象属性函数（我们把这种调用称作”方法“）</p><h3 id="文本（string）"><a href="#文本（string）" class="headerlink" title="文本（string）"></a>文本（string）</h3><p>文本就是字符串，JavaScript没有如同C语言一样定义单个字符。下面是字符串的换行操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'two\nlines'</span> <span class="token comment">//写在一行，表示两行的字符串;</span><span class="token string">"one\long\line"</span> <span class="token comment">//写在多行但只有一行的字符串</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">说来可就大发了会计分录萨芬ask了解到示例啊萨</span><span class="token template-punctuation string">`</span></span> <span class="token comment">//写在两行，实际也是两行的字符串，注意这是反引号！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是操作字符串的API（可以发现，这就是面向对象的编程，不需要传入参数）比如<code>str.length</code> 返回的是str的长度，还有诸如取字符串某部分、搜索字符、或者修改字符串副本等等。</p><p>下面介绍模板字面量；其由反引号定义，可以包含JavaScript表达式，由下面的形式包裹。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Bill"</span><span class="token punctuation">;</span><span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span> name <span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// grerting === "Hello Bill."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="布尔值（bool）、未定义（undefined）、空（null）"><a href="#布尔值（bool）、未定义（undefined）、空（null）" class="headerlink" title="布尔值（bool）、未定义（undefined）、空（null）"></a>布尔值（bool）、未定义（undefined）、空（null）</h3><p>布尔值比较简单，这里就不介绍。其余两个都代表没有值，值不存在，区别很小（实际我们也尽量避免使用）</p><h3 id="符号（symbol）"><a href="#符号（symbol）" class="headerlink" title="符号（symbol）"></a>符号（symbol）</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> symname <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"md"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">symname</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>symname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>symname<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回值为 ”Symbol(md)“</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Symbol</code> 函数永远不会返回相同的值，也就是每一次调用返回值都是不同的，即使传入的参数一样。</p><p>有时候我们想创建共享符号，那么有函数 <code>Symbol.for()</code> 和 <code>Symbol.keyFor()</code>实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"shared"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> t <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">"shared"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个方法传入的字符串一样，返回值也一样</span><span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token operator">===</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span class="token function">alert</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "shared"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h3><p>在Node中可以通过global来引用全局对象，在windows中可以通过window属性来引用。通用的引用形式为<code>globalThis</code></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>JavaScript中的原始值（undefined、null、bool、number、string）都是不可修改的。比如：（这很好理解，C语言中函数传入参数，也并不会修改参数的值，除非是指针类型的）；并且，它们有相等的概念</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s<span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 实际上只返回"HELLO"，s并未改变！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于对象（函数和数组也属于对象），它是可修改的，对象是按引用比较的，而非值，因为对象是引用类型。比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>o <span class="token operator">===</span> p<span class="token punctuation">;</span> <span class="token comment">// false!!</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 它也是1！，可以发现二者是相等的，而非两个对象，相当于C语言中指针的理解</span>a <span class="token operator">===</span> b<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面代码可以看出，把对象（或数组）赋值给一个变量，其实是在赋值引用，并不会创建对象的新副本。要比较两个不同的对象或数组，必须比较它们的属性或元素。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此函数能够直接复制数组</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"C的第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"个值为："</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"B的第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"个值为："</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Javascript对于所需要的类型很灵活，如果想要字符串，则会把提供的值转换为字符串，想要数值则会把给的值转化为数值（如果无法有意义的转化则转换为NaN)。比如</p><table><thead><tr><th>值</th><th>转换为字符串</th><th>转换为数值</th><th>转换为bool值</th></tr></thead><tbody><tr><td>undefined</td><td>“undefined”</td><td>NaN</td><td>false</td></tr><tr><td>null</td><td>“null”</td><td>0</td><td>false</td></tr><tr><td>true</td><td>“true”</td><td>1</td><td></td></tr><tr><td>false</td><td>“false”</td><td>0</td><td></td></tr><tr><td>“”(空字符串)</td><td></td><td>0</td><td>false</td></tr><tr><td>“1.2”（非空，数值）</td><td></td><td>1.2s</td><td>true</td></tr><tr><td>“one”（非空，非数值）</td><td></td><td>NaN</td><td>true</td></tr><tr><td>0</td><td>“0”</td><td></td><td>false</td></tr><tr><td>-0</td><td>“0”</td><td></td><td>false</td></tr><tr><td>1（有限，非零）</td><td>“1”</td><td></td><td>true</td></tr><tr><td>Infinity</td><td>“Infinity”</td><td></td><td>true</td></tr><tr><td>-Infinity</td><td>“-Infinity”</td><td></td><td>true</td></tr><tr><td>NaN</td><td>“NaN”</td><td></td><td><strong>false</strong></td></tr><tr><td>[]（空数组）</td><td>“”</td><td>0</td><td>true</td></tr></tbody></table><p>当然，这是Javascript带来的隐式转换，可能不太清晰（而且很容易别忽视），所以便有了<strong>显示转换</strong>。（这里的隐式转换和C语言的并不同，C语言的转换是按照ASCII码来的，JavaScript的相当于自动调用了转换函数）</p><p>最简单的是采用 <code>Boolean()</code> <code>String()</code> <code>Number()</code> 函数，；<code>toString()</code> 方法通常结果与String一致（null与undefined不能用），它还能接收一个参数用于定义基数（即进制，默认10）。</p><p>数字转换为字符串，还有其他三种方法，分别为 <code>toFixed()</code>、 <code>toExponential</code> 、 <code>toPrecision</code>，传入参数分别表示正常形式下的小数点位数；指数形式下的小数点位数；有效数字总数</p><p>字符串转换为数字，用Number函数的话，只能10进制，且必须全为整数或浮点数字面量。由此有下面的函数 <code>parseInt</code> 、<code>parseFloat</code> ，它们会跳过开头所有的空格，成功读取到第一个数字后，会跳过后面的非数字（也就是说第一个没解析到数字则直接返回NaN）；另外第一个函数还能接收第二个参数用于指定转换进制。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> n <span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">;</span><span class="token keyword">let</span> out <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这是函数</span><span class="token keyword">let</span> binary <span class="token operator">=</span> <span class="token string">"0b"</span> <span class="token operator">+</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这是方法</span>n <span class="token operator">=</span> <span class="token number">123456.789</span><span class="token punctuation">;</span>n<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "123456.79"</span>n<span class="token punctuation">.</span><span class="token function">toExponential</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "1.2e+5"</span>n<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "123456.7890"</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"3 blind mice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 3</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">" 3.14meters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 3.14</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"-12.34"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => -12</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"0xFF"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =>255</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => NaN</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 0.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二章-表达式与操作符（暂时跳过）"><a href="#第二章-表达式与操作符（暂时跳过）" class="headerlink" title="第二章 表达式与操作符（暂时跳过）"></a>第二章 表达式与操作符（暂时跳过）</h2><h2 id="第三章-语句"><a href="#第三章-语句" class="headerlink" title="第三章 语句"></a>第三章 语句</h2><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a><strong>条件语句</strong></h3><ul><li><strong>if</strong></li></ul><p>用法和C语言一模一样，注意，正如前面所说，JavaScript的严格等号是 <code>===</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>switch</strong></li></ul><p>语法和C语言也大抵相同，但是其case表达式是在运行时求值的，所以性能比较低；但是JavaScript的case后面可以跟任意表达式（C语言的case只能跟单个字符、枚举、整数）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">"number"</span><span class="token operator">:</span>            <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"string"</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token string">"boolean"</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token string">'"'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'"'</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a><strong>循环语句</strong></h3><ol><li><strong>while</strong> 与 <strong>do-while</strong></li></ol><p>过于简单，用法和C一模一样。这里就不举例了。</p><ol start="2"><li><strong>for</strong></li></ol><p>用法与C也一样（但是可以很复杂）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">+=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>for-of</strong></li></ol><p>for-of循环专门用于可迭代对象（包括数组、字符串、集合、映射）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> element <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">+=</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>数组迭代是“实时”的，所以迭代过程中的变化可能影响迭代的输出，比如我们在循环内改变数组，比如每次执行添加一个元素在最后，那么迭代将无穷循环。；字符串的迭代是按照Unicode码点来的（就是不是按照字符串长度来的，比如有些表情字符占两个char）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> frequecy <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> letter <span class="token keyword">of</span> <span class="token string">"mississippi"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>frequecy<span class="token punctuation">[</span>letter<span class="token punctuation">]</span><span class="token punctuation">)</span>        frequecy<span class="token punctuation">[</span>letter<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        frequecy<span class="token punctuation">[</span>letter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 这是字符串的一个示例，实现了统计字符串中单词的出现次数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对象是无法迭代的，所以用不了for-of，但是可以通过 <code>Object.key()</code> 、 <code>Object.value()</code>、 <code>Object.entries()</code> 函数来使用；它们分别返回对象关键词的数组；值的数组、数组的数组（可以理解为二维数组）；而且这个的迭代不是“实时”的，因为函数只会调用一次。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> keys <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pairs <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pairs <span class="token operator">+=</span> k <span class="token operator">+</span> v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">+=</span> v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    keys <span class="token operator">+=</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>集合Set</strong>，其用for-of迭代时，每个元素都会运行一次。下面的输出只有一个文本中的唯一单词，这是因为<code>new Set</code>会去掉重复值，只保留一个。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">et text <span class="token operator">=</span> <span class="token string">"Na na na na na na na Batman!"</span><span class="token punctuation">;</span><span class="token keyword">let</span> wordSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> unique <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> word <span class="token keyword">of</span> wordSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unique<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>映射Map</strong>，其感觉和使用对象的<code>Object.entries()</code> 类似，每次迭代返回的是数组，第一个元素是键，第二个是对应的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    key <span class="token comment">// => 1</span>    value <span class="token comment">// => "one"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>for-in</strong></li></ol><p>这个方法使用于对象属性，但是因为会有继承的可枚举属性等问题，所以大部分程序员都基于 <code>Object.keys()</code>使用for-of循环。</p><h3 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h3><p>这里引入了一个语句标签的概念，它一般用于循环语句和条件语句，相当于给这个语句起了一个名字，便于配套continue和break使用。</p><p>break搭配语句标签，可以使得其跳转到语句末尾（原本是只能跳出单层循环的）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token literal-property property">computeSum</span><span class="token operator">:</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// martix是一个二维数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> row <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>row<span class="token punctuation">)</span> <span class="token keyword">break</span> computeSum<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> row<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> cell <span class="token operator">=</span> row<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>cell<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span> computeSum<span class="token punctuation">;</span>            sum <span class="token operator">+=</span> cell<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//break语句会跳转到这里，相当于直接跳过整个语句，而非C语言中的逐嵌套跳出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>continue语句的形式和break一样。return也很简单，其不带内容时返回值为undefined。</p><h2 id="第四章-对象"><a href="#第四章-对象" class="headerlink" title="第四章 对象"></a>第四章 对象</h2><h3 id="对象的创造"><a href="#对象的创造" class="headerlink" title="对象的创造"></a>对象的创造</h3><p>有对象字面量、new关键字和 <code>Object.create()</code>函数三种方法来创建；</p><p><strong>对象字面量</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> empty <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> point<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"main title"</span><span class="token operator">:</span> <span class="token string">"java"</span><span class="token punctuation">,</span>    <span class="token string-property property">"sun-title"</span><span class="token operator">:</span> <span class="token string">"the guide"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>new</strong></p><p>其用于创建和初始化一个新对象，它后面必须跟一个函数调用，这种方式使用的函数被称为构造函数（可以自定义）。比如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原型</strong></p><p>几乎每个对象都有另一个与之关联的对象，这另一个对象我们称为<em><strong>原型</strong></em>，其他对象从原型继承属性。几乎所有对象都有原型，但是只有少数有prototype属性，该属性为其他对象定义了原型。（详细介绍要看后面</p><p><strong>Object.create()</strong></p><p>该函数的第一个参数是新对象的原型。我们发现，o2是没用原型的对象，这意味着它没有继承任何东西，所以也就不能使用方法（如toString、+操作符）。o3则是普通的空对象，它继承了对象的通用原型。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o1 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> o2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> o3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">"don't change this"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>library<span class="token punctuation">.</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token parameter">Object<span class="token punctuation">.</span><span class="token function">creat</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 外面的函数是第三方库函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以用来防止函数意外修改，这种情况下，直接传入继承自该对象的对象即可。如上</p><h3 id="对象的查阅和修改"><a href="#对象的查阅和修改" class="headerlink" title="对象的查阅和修改"></a>对象的查阅和修改</h3><p>有两种方式访问对象，<strong>属性访问</strong> 和 <strong>键访问</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> my_obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> my_obj<span class="token punctuation">.</span>key <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token comment">//属性访问</span>my_obj<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token comment">//键访问</span><span class="token keyword">let</span> my <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<strong>键访问</strong>，属性名是字符串，如果采用其他值作为属性名，会被自动转化为字符串（注意，仅仅发生在声明的时候，所以后续引用需要字符串形式、或者变量）；考虑下面的例子，可以发现，虽然我们尝试定义属性名为非string类型的值，但是实际上其会利用字符串转换函数，转换为对应字符串。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>my<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>my<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bar"</span><span class="token punctuation">;</span>my<span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"baz"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span><span class="token string">"true"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo</span><span class="token function">alert</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar</span><span class="token function">alert</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span><span class="token string">"[object Object]"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// baz 对象经过函数的返回值就是这个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用键访问，我们可以做到可计算属性名，还能做到动态访问</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> prefix <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>prefix<span class="token operator">+</span><span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>prefix<span class="token operator">+</span><span class="token string">"baz"</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myObject<span class="token punctuation">[</span><span class="token string">"foobar"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>foobaz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下面是动态访问</span><span class="token keyword">let</span> my <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> my_length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> my_length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    my<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">x</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 存入属性x0 - x4</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> my_length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span><span class="token string">"x"</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取属性x0 - x4</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对象继承</strong></p><p>考虑下面的例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> p <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">let</span> q <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">let</span> f <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span>x <span class="token operator">+</span> q<span class="token punctuation">.</span>y<span class="token punctuation">;</span> <span class="token comment">// => 3;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>o从Object.prototype继承对象方法，p从o和Object.prototype继承属性。同理；所以虽然我们没有定义q对象的x、y属性，但是它会从原型查找、原型的原型、…直到查找到一个没用原型的对象（比如Object.prototype）；</p><p><strong>删除对象属性</strong></p><p>使用delete操作符，其只能删除对象的自有属性，且操作成功或没用影响则返回true、对不可配置的属性操作则会返回false（严格模式下报错）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">delete</span> book<span class="token punctuation">.</span>author<span class="token punctuation">;</span><span class="token keyword">delete</span> Object<span class="token punctuation">.</span>prototupe<span class="token punctuation">;</span> <span class="token comment">// 属性不可配置</span><span class="token keyword">delete</span> globalThis<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment">// x可以是全局变量或者全局函数，这样都会返回false</span>globalThis<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">delete</span> x<span class="token punctuation">;</span><span class="token comment">// 或者严格模式下 delete globalThis.x; //这样可以，因为上面创建的是可配置的全局属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性的查询与枚举"><a href="#属性的查询与枚举" class="headerlink" title="属性的查询与枚举"></a>属性的查询与枚举</h3><p>我们可以使用 操作符 <code>in</code>、两种方法、或者简单的 不等于判断 对象中的某个属性是否存在。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token string">"x"</span> <span class="token keyword">in</span> o<span class="token punctuation">;</span> <span class="token comment">// true</span>o<span class="token punctuation">.</span>x <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 简单判断x属性是否有定义，当然这并不意味着它一定不存在（可以赋值为un...</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true，其指示自有属性！</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，它是继承自其原型的</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，指示可枚举的自有属性！toString不可枚举</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​有时我们需要遍历属性，这正如第三章循环语句中所提到的。for-in循环，其会列出对象的所有可枚举属性（自有和继承）；但这往往不是我们想要的。</p><p>​当然，更多的是使用for-of循环；有 <code>Object.keys()</code> 返回可枚举的自有属性名数组（属性名需是字符串； <code>Object.getOwnPropertyNames()</code> 返回所有自有属性名，包括不可枚举的（属性名为字符串）；<code>Object.getOwnPropertySymbols()</code> 返回属性名为符号的自有属性，包括不可枚举；<code>Reflect.ownKeys()</code> 返回所有属性名。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">in</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 跳过了继承属性</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> o<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 跳过所有方法</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>枚举的顺序可以认为是纯非负整数字符串最优先，其他按照添加顺序（这样保证了数组对象是按顺序枚举的）。</p><h3 id="对象的拓展与方法"><a href="#对象的拓展与方法" class="headerlink" title="对象的拓展与方法"></a>对象的拓展与方法</h3><h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><p>首先让我们先理解<strong>编译原理</strong></p><p>注：在ES6后，基本不再使用var了</p><p>&ensp;</p><p>传统编译语言，对源代码会进行 词法分析、语法分析、代码生成三个步骤；分别是分解字符串、分析代码块的关系、转化为机器能理解的指令。</p><p>在JavaScript中，编译和执行可以看作是一起的。一般编程语言，都是可以预先编译成exe可执行文件，然后运行；JS编译是发生在执行的前一瞬。例如</p><p><code>var a = 2;</code> 简单来说，这是两部分，分为 <code>var a</code> 和 <code>a = 2</code> 两部分。首先，编译器询问作用域是否存在一个相同名称变量（在同一作用域中），是则忽略该声明，否则要求作用域声明该变量为a。接下来编译器为引擎生成代码，其处理 a &#x3D; 2 的赋值操作。引擎运行会询问作用域当前作用域是否存在该变量，是则使用，否则在更外层的作用域查找。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>LHS与RHS</strong></p><p>引擎对变量查找的两种方式，前者只关心变量的地址，后者只关心变量的值。</p><p>进行RHS查找时，若全局作用域也未能找到，会抛出ReferenceError异常；如果找到了，但是你对该变量的值操作不合理，那么会抛出TypeError异常，感觉和C语言中参数类型不匹配的错误类似。前者代表作用域判别失败，后者是作用域成功了</p><p><img src="/2025/08/24/js/image-20250816153542464.png"></p><p>进行LHS查找时，如果未能找到，则在正常模式会自动创建声明一个全局变量。</p><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>目前绝大数编译语言都采用这种做法。简单来说，词法作用域是由你在写代码时 变量和块作用域 写在哪里决定的，因此大部分情况，其作用域会保持不变。</p><p>考虑下面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">bar</span><span class="token punctuation">(</span>b <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2，4，12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>a的作用域是整个函数，b则是大函数内部，c则是小函数内部。可以发现，他们是逐级包含的。（当然，优先级也是反过来的</p><h3 id="函数、块作用域"><a href="#函数、块作用域" class="headerlink" title="函数、块作用域"></a>函数、块作用域</h3><p><strong>隐藏内部实现</strong></p><p>考虑下面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> doSomethingElse<span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b<span class="token punctuation">;</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，这种写法是很危险的。因为给外部作用域对b和doSomethingElse的访问权限毫无必要。所以，采用函数包裹是更好的选择。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> doSomethingElse<span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而，利用函数封装某一部分的做法还是有问题，因为函数本身的名字会污染作用域，而且必须显式的调用它。JavaScript给出了解决方案。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//或者 改进的形式</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的做法，将函数处理为函数表达式，这样，foo变量名只能在自身函数中访问。末尾的括号表示立即执行，函数括起来表示是函数表达式。</p><p><strong>匿名与具名</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I wait a second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的便是匿名函数表达式，因为function没用名称标识符，但是也会带来一些不便。所以我们更推荐加一个名称，就像上上面写的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token constant">IIFE</span><span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token constant">IIFE</span><span class="token punctuation">(</span><span class="token parameter">def</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">def</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">def</span><span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们来分析上面的函数表达式，第一个小括号内部定义了一个函数，第二个小括号表示传入的参数。这样就显而易见了。1. 定义了一个名称为IIFE的函数，其参数为global，具体内容在大括号中。之后传入参数window，并执行。（这里的window可以看作一个全局变量数据库，可以通过 <code>.</code> 来访问其中的元素。 2. 定义了一个名称为IIFE的函数，参数为def(它是一个函数)，功能为执行def。之后传入函数参数。这种做法实现了倒置代码的运行顺序。</p><p><strong>块作用域</strong></p><p>考虑下面的例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可能会以为它的C语言一样，变量i只能在for语句中使用，然而实际上它还是会绑定到外部作用域中。这是因为使用var声明变量时，无论在哪里都是一样的。</p><p>所以，有一种新的变量声明方式： <code>let</code> ； 它会隐式的声明一个块作用域，并且不会有变量不会有提升行为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span> <span class="token comment">// 这是显示声明块，也可以去掉就是隐式了。</span>        <span class="token keyword">let</span> bar <span class="token operator">=</span> foo<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其好处是可以在闭包结构中 对一些已经无用的变量进行回收。</p><p>另一种声明是 <code>const</code> 用于声明块作用域常量。</p><h3 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h3><p><strong>基本提升</strong></p><p>有变量提升、函数声明提升。例子如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能会认为这无法执行，但是Javascript会先编译变量，也就是所谓的提升，等效如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span> <span class="token comment">//忽略</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，函数表达式并不会提升</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相当于</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError，因为试图引用未定义的函数</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError，因为未找到声明</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token operator">...</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>函数提升优先于变量提升</strong></p><p>它的意思就是，函数提升的排名总是在变量前面，然后按顺序，正如上面开始的例子</p><p>让我们深入探讨一些函数声明的提升，实际上，函数提升具有块作用域，也就是它会提升到块作用域的顶部，然而同时会自动声明一个var同名变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正常执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等效代码为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 这里相当于对var foo 进行赋值，就是foo = function foo()&#123;...&#125;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// var foo已经被赋值了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h3><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域外执行。听起来很抽象，让我们看个例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> bar<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按道理，执行baz();相当于直接把bar函数拷贝过来，也就是如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们会发现，a是什么？？ 是的，这就是函数的闭包，函数闭包意味着它能访问原来所在的词法作用域，也就是能访问foo内部的变量。所以上面的结果优先输出2而不是1。</p><p>在foo()执行后，通常其整个的内部作用域都会被销毁，但是闭包可以阻止，内部作用域仍然存在，以供bar在后面的任何时间引用。bar依然持有对该作用域的引用，这个引用就叫闭包。</p><p><strong>循环与闭包</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的输出，看起来应该是每隔1s输出1-5；然而实际是输出5次数字 6；为什么？？</p><ol><li><strong><code>var</code> 没有块级作用域</strong></li></ol><p><code>var</code> 是函数作用域，不是块级作用域，所以 <code>i</code> 在整个 <code>for</code> 循环里是<strong>同一个变量</strong>。也就是说每次循环都修改的是同一个 <code>i</code>，而不是创建一个新的 <code>i</code>。究其原因，是变量提升（提升到了外部）</p><ol start="2"><li><strong><code>setTimeout</code> 是异步的</strong></li></ol><p><code>setTimeout</code> 的回调函数（<code>timer</code>）会在循环结束后才执行（即使设置了不同的延迟时间）。当 <code>timer</code> 执行时，循环已经结束。</p><ol start="3"><li><strong>所有回调函数共享同一个 <code>i</code></strong></li></ol><p>由于 <code>i</code> 是同一个变量，所有 <code>timer</code> 函数打印的都是<strong>最终 <code>i</code> 的值</strong>（即 <code>6</code>）</p><p>下面让我们来看看解决方案：</p><ol><li>使用 <code>let</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能如我们预想的一样工作了？为什么？实际上，如同C语言中的结果，因为let并不会进行提升，所以每次循环都创建了一个 <code>i</code>，故每个回调函数绑定的都是当前循环的 <code>i</code>。</p><ol start="2"><li>使用闭包</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> j<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IIFE(立即执行函数)会在每次循环时创建一个新的作用域，并传入当前值 <code>i</code></p><h2 id="this和对象原型"><a href="#this和对象原型" class="headerlink" title="this和对象原型"></a>this和对象原型</h2><h3 id="this简介（待补充，先了解对象等语法"><a href="#this简介（待补充，先了解对象等语法" class="headerlink" title="this简介（待补充，先了解对象等语法"></a>this简介（待补充，先了解对象等语法</h3><p>this 提供了一种优雅的方式来隐式的传递一个对象的引用，这样更加简洁：（否则我们还得在函数定义中添加一个变量）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> me<span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Kyle"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="函数与对象"><a href="#函数与对象" class="headerlink" title="函数与对象"></a>函数与对象</h3><p>让我们直接给出下面的例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> someFoo <span class="token operator">=</span> foo<span class="token punctuation">;</span><span class="token keyword">var</span> my<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">someFoo</span><span class="token operator">:</span> foo<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function foo()&#123;&#125;</span><span class="token function">someFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function foo()&#123;&#125;</span>my<span class="token punctuation">.</span><span class="token function">someFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function foo()&#123;&#125;</span><span class="token comment">//---------------------------------</span><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> someFoo <span class="token operator">=</span> myObject<span class="token punctuation">.</span>foo<span class="token punctuation">;</span><span class="token function">someFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myObject<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>定义和赋值如下。一般而言，我们不采用对数组添加属性值的操作，当然这是指添加key和value；添加数组的附加属性描述还是可以的。添加键值要利用到下标赋值操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>myArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">//3</span>myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// foo</span><span class="token comment">//你可以给数组添加属性值，但不推荐！</span>myArray<span class="token punctuation">.</span>baz <span class="token operator">=</span> <span class="token string">"baz"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仍然是3，添加属性值不会添加数组索引</span><span class="token comment">//如果尝试添加属性名像数字的属性，那么会变成数组下标</span><span class="token comment">//myArray.4="af"; ？？ 属性访问中 属性名不能以数字开头！！</span>myArray<span class="token punctuation">[</span><span class="token string">"4"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"af"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一般赋值是</span>myArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h3><p>对象的复制分浅复制和深复制两种，而后者很复杂，依据不同JavaScript框架。所以这里仅仅介绍浅复制，利用函数Object.assign。第一个参数为目标对象，后面可以跟多个源对象。其会遍历源对象所有可枚举的自有键；</p><p>浅复制的意思是，其复制的属性如果是对象，那么是引用方法，而不是副本！可以理解为一个快捷方式。考虑下面例子，可以发现，修改新对象中的对象属性值后，老对象中的对象属性也变了！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token comment">// 基本类型（字符串）</span>  <span class="token literal-property property">hobbies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"读书"</span><span class="token punctuation">,</span> <span class="token string">"音乐"</span><span class="token punctuation">]</span> <span class="token comment">// 引用类型（数组）</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 浅拷贝</span><span class="token keyword">var</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制到空对象，然后返回到 newObj</span><span class="token comment">// 1. 修改新对象的基本类型属性 -> 安全</span>newObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: "张三" (原对象未受影响)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出: "李四"</span><span class="token comment">// 2. 修改新对象中的引用类型属性 -> 危险！</span>newObj<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"编程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过新对象修改数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: ["读书", "音乐", "编程"] (原对象也被影响了！)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出: ["读书", "音乐", "编程"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><p>如下面代码所示</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 其返回一个对象，包含属性描述符信息</span><span class="token comment">// &#123;</span><span class="token comment">//     value: 2,</span><span class="token comment">//     writable: true,  可写为false时，表示无法修改该属性</span><span class="token comment">//     enumerable: true, </span><span class="token comment">//     configurable: true 可配置为false时，表示无法删除该属性、修改属性描述符（除把writable改为flase）</span><span class="token comment">// &#125;</span><span class="token comment">//可以通过下面的函数定义</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h2><p>什么是DOM？简单地说，DOM是一套对文档的内容进行抽象和概念化的方法。DOM是一种API（应用编程接口）。简单地说，API就是一组已经得到有关各方共同认可的基本约定。在现实世界中，相当于API的例子包括（但不限于）摩尔斯码、国际时区、化学元素周期表。以上这些都是不同学科领域中的标准，它们使得人们能够更方便地交流与合作。如果没有一个统一的标准，事情往往会演变成为一场灾难。别忘了，因混淆英制度量衡与公制度量衡至少导致过一次火星探测任务的失败。</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习 第2期 CSS</title>
      <link href="/2025/08/23/css/"/>
      <url>/2025/08/23/css/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：CSS学习<span id="more"></span>。</p><h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><p>层叠样式表，简称CSS。其区分大小写；注释使用的是 <code>/* */</code>；注释不能嵌套使用；</p><p>css可以理解为给元素添加了一个盒子，其定义了盒子内部元素的样式。基本组成为：选择器+声明块。声明块由多种属性及对应值组成；共同选择器用逗号隔开。eg：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1, h2</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> #e52eae<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"SimSun"</span><span class="token punctuation">,</span> <span class="token string">"KaiTi"</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS引入"><a href="#CSS引入" class="headerlink" title="CSS引入"></a>CSS引入</h2><h3 id="使用外部CSS"><a href="#使用外部CSS" class="headerlink" title="使用外部CSS"></a>使用外部CSS</h3><p>stylesheet是样式表的意思、rel标识HTML界面与链接文件关系；href表明CSS文件路径；type表面链接文档类型（可省略type）。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./css/p.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用内部CSS"><a href="#使用内部CSS" class="headerlink" title="使用内部CSS"></a>使用内部CSS</h3><p>在 <code>&lt;head&gt; &lt;/head&gt;</code>标签内部引入 <code>&lt;style&gt;</code>以使用内部CSS。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.p1</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #f0f8ff<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="元素使用CSS"><a href="#元素使用CSS" class="headerlink" title="元素使用CSS"></a>元素使用CSS</h3><p>一般而言，为了网页的可维护性，我们要尽量避免使用。但是对于某些情况，如编写特定文章，为了方便自定义，CSS样式不至于冗杂（样式太多，名称都难以取）。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #44ff00<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>就拉山口发大师傅立<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><h4 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h4><p>定义文档所有文档的属性。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p.p2</span><span class="token punctuation">&#123;</span>     <span class="token property">color</span><span class="token punctuation">:</span> #af46ec<span class="token punctuation">;</span>     <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 也可以支持多个class */</span><span class="token selector">.p3</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前者是元素<strong>特定类选择器</strong>；后者是<strong>普通类选择器</strong>。意思就是针对特定class的标签（这些标签是HTML5预定义的）所定义的样式。</p><p>下面的例子是<strong>多类选择器</strong>——其把多个类选择器链接在一起，仅可以选择同时包含这些类名的元素（没有顺序要求）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.t0.t1</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#c6f300<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t0 t1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    空间克隆空间尽可能了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    就拉山口解开理解看了看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">#ID&#123;color:...&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p><strong>简单属性选择</strong>：选择含有某个属性的元素，例如下面是选择含有class属性的h1元素；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">h1[class]&#123;color: silver;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hoopla<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>severe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Shjjlajfl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>就离开了卡上飞机离开<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>又或者a[href][title]&#123;font-weight: bold;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>W3C Home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>W3C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体属性匹配</strong>：选择含有某个属性的某个值的元素。</p><p><code>a[href=&quot;www..&quot;]</code>抑或 <code>p[class=&quot;a b c&quot;]</code> 其是完全字符串匹配，所以class有顺序要求，而且引号里的值必须完全一样。就比如下面的，标签甚至多了个空格都无法正确使用！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">p[class = "t0 t1"]&#123;color:#000000;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t0  t1 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    空间克隆空间尽可能了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    就拉山口解开理解看了看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>部分属性值匹配</strong>：针对能有词列表的属性</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p[class~="warning"]</span><span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span><span class="token selector">img[title~="figure"]</span><span class="token punctuation">&#123;</span>    ...<span class="token comment">/*这样只要是title含有figure字样就行*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：其一次只能匹配一个单词。也就是一个只能匹配一个空格间开的完整单词</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">p[class ~= "t0"][class~="t1"]&#123;      color:#000000;  &#125;  。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t0 t1 t2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   空间克隆空间尽可能了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>   就拉山口解开理解看了看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>子串匹配属性选择器</strong>：前面有具体的匹配，也有部分属性值匹配，但是都是针对整个字符串或者单词的。</p><pre class="line-numbers language-none"><code class="language-none">p[class^&#x3D;&quot;bar&quot;]  选择以bar开头的元素，注意是整个字符串的开头包含bar的字符(不是单词)p[class$&#x3D;&quot;bar&quot;] 选择以bar结尾的元素p[class*&#x3D;&quot;bar&quot;]  选择包含bar子串的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>前面所有的都能混用</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">img[title~=<span class="token string">"img"</span>][title$=<span class="token string">"kl"</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>让我们先理解一下HTML的数结构，可以发现，每个元素间都存在父子关系，比如：</p><p><img src="/2025/08/23/css/image-20250802115327196.png"></p><p>父子关系是相邻两级所有的，后代关系则是高级与低级所有的。例如html与head、body为父子关系。html与后面所有标签为后代关系。由此便可以引出后代选择器，示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">div p em</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            adfsafs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>1. ja;jfsjkfa;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                aasf <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>2. asffads<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                ljkasefi <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span> aflk <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>4.sdfsfa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>3. ajklsfsl;f<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，1、2、4均被设置样式。因为后代选择器中两两元素之间 可以间隔无限，这点从后代关系便很容易理解。即：div的后代p的后代em被设定样式，也就是盒子嵌套盒子。</p><h4 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h4><p>子元素选择器，便是遵循父子关系了，是严格的嵌套；区别于后代选择器。我们用大于号表示父子关系，然后可以发现，只有1被设置了样式（其余代码同后代选择器那里）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div>p>em</span> <span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h4><p>注意，既然是相邻的，也就是有顺序要求的。考虑下面的例子</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">ol+ul+ul &#123;    color: aqua;&#125;li+li &#123;    color: blue;&#125;。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1. asklfj;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2. qweuoir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3. qweorpi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4. qweorpi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5. qwrerwq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>6. htrqera<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>7. qtafsda<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>8. qweorpi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>9. asdfasd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终结果是234、678为蓝色；9呈现出青蓝色。使用<strong>多个加号</strong>则是选择ol的相邻兄弟ul的相邻兄弟ul，即上面的第二个ul元素</p><p>当然，我们可以混用上面的选择器，如： <code>html&gt;body table+ul</code></p><h4 id="普通兄弟选择器"><a href="#普通兄弟选择器" class="headerlink" title="普通兄弟选择器"></a>普通兄弟选择器</h4><p>匹配一个元素的兄弟元素，不考虑相邻。同样以上面的代码为例</p><pre class="line-numbers language-none"><code class="language-none">ol~ul&#123; color: aqua;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样两个ul都被选择了；当然和相邻兄弟选择器一样，它们都选择第二个元素。</p><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p>一般有下面几种效果，注意visited和浏览器缓存有关（所以可能出现一开始就是这个样式）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body *:hover</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:link</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:visited</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token comment">/* 指示鼠标指针停留的元素 */</span><span class="token punctuation">&#125;</span><span class="token selector">a:active</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token comment">/* 指示被用户激活的元素，比如停在超链接时点击鼠标 */</span><span class="token punctuation">&#125;</span><span class="token selector">input:focus</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> silver<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token comment">/* 指示有输入焦点的元素，如input点击时激活 */</span><span class="token punctuation">&#125;</span><span class="token selector">p: first-child</span><span class="token punctuation">&#123;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token comment">/* 指示第一个这种类型的元素 */</span><span class="token punctuation">&#125;</span><span class="token property">p</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 选择父元素的第1个子元素，且该子元素是p */</span><span class="token property">p</span><span class="token punctuation">:</span><span class="token function">nth-of-type</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 选择父元素的第1个p标签，注意是先过滤出所有标签，然后选择 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><p>一般有如下，这样可以设置首字母和首行的样式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p:first-letter</span><span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p:first-line</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>::after</code>和 <code>::before</code></p><p>你可以把它想象成<strong>用CSS凭空创建了一个新的元素</strong>，并把它添加到了 <code>.type</code> 这个 <code>div</code> 的里面、所有内容的最后面（before是最前面）。</p><p><strong>示例</strong></p><pre class="line-numbers language-none"><code class="language-none">.type::after &#123;  content: &quot;&quot;; &#x2F;* 1. 创建内容 *&#x2F;  position: absolute; &#x2F;* 2. 绝对定位 *&#x2F;  bottom: 0;  left: 0;  width: 100%;  height: 80%;  &#x2F;* 3. 创建一个从透明到黑色的渐变 *&#x2F;  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0, rgba(0, 0, 0, 0.8) 80%, rgba(0, 0, 0, 0.8) 100%);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong><code>content: &quot;&quot;;</code></strong>：这是<strong>必须的</strong>，即使内容为空。它告诉浏览器要创建这个伪元素。没有这行，<code>::after</code> 就不会显示。</li><li><strong><code>position: absolute;</code></strong>：将伪元素从正常文档流中取出，使其可以精确地覆盖在 <code>.type</code> 元素之上。</li><li><strong><code>bottom: 0; left: 0;</code></strong>：将伪元素定位到其父容器（<code>.type</code>）的左下角。</li><li><strong><code>width: 100%; height: 80%;</code></strong>：让伪元素的宽度与父容器相同，高度为父容器的80%。</li><li><strong><code>background: linear-gradient(...);</code></strong>：为其设置一个线性渐变背景色，从顶部透明到底部暗色。</li></ol><h2 id="CSS结构与层叠"><a href="#CSS结构与层叠" class="headerlink" title="CSS结构与层叠"></a>CSS结构与层叠</h2><h3 id="特殊性"><a href="#特殊性" class="headerlink" title="特殊性"></a>特殊性</h3><p>同一个元素，可以用多条规则来选择，并赋予样式。比如</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body h1</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1.grape</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">/*这是特定类选择器*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么，在这种情况下，那条规则会胜出呢？？这就和特殊性的高低有关了。</p><p><strong>规则</strong>：</p><ol><li>每个ID选择器 对应 0，1，0，0</li><li>每个类选择器、属性选择器、伪类对应 0，0，1，0</li><li>每个元素与伪元素对应 0，0，0，1</li><li>通配符等无作用</li><li>内联样式为 1，0，0，0</li><li>在后面添加!important有最高优先级</li></ol><p><strong>例子</strong>：</p><ol><li><code>p.bright em.dark &#123;...&#125;</code> —— 0，0，2，2</li><li><code>#id216 &#123;...&#125;</code> —— 0，1，0，0</li><li><code>div#sidebar *[href] &#123;...&#125;</code> —— 0，1，1，1</li><li><code>html&gt;body table tr[id=&quot;totals&quot;] td ul&gt;li &#123;...&#125;</code> —— 0，0，1，7</li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承属性不具有特殊性。如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">p&#123;color: blue;&#125;...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> asfkkfjl <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>asfdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>虽然我们只定义了p标签的样式，但是由于继承性，p标签的后代都会继承它的样式，所以em标签内的文本颜色也会是blue而非默认的black。但是，内外边距、背景、边框等不能继承。</p><h3 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h3><p>简单的来说，就是依据顺序来确定。如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么在后边的将会被选中。当然 <code>  &lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</code> 的本质也是将里面的CSS代码嵌入到HTML中，所以，CSS引入的方法对其优先级没有任何影响。</p><h2 id="值和单位"><a href="#值和单位" class="headerlink" title="值和单位"></a>值和单位</h2><h3 id="颜色的表示"><a href="#颜色的表示" class="headerlink" title="颜色的表示"></a>颜色的表示</h3><p><strong>方法1</strong>： 函数式RGB</p><p>样式如右：rgb(*, *, *)；里面的值从 0 - 255，可以用百分比表示0% - 100% ； 分别代表Red、Green、Blue三种颜色的占比。</p><p><strong>方法2</strong>： 十六进制RGB（HEX）</p><p>即将rgb中的三个颜色值，转化为十六进制数表示。如：#ff0000，两两成对的还可以简写为 #f00。</p><h3 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h3><h4 id="绝对长度单位"><a href="#绝对长度单位" class="headerlink" title="绝对长度单位"></a>绝对长度单位</h4><p>一般而言，我们在web浏览器中不适用绝对长度单位，因为其显示和分辨率、显示屏尺寸有关，所以这里不了解了。</p><ul><li><p><strong>英寸</strong>（in） 1 in——2.54 cm</p></li><li><p><strong>厘米</strong>（cm） 1 cm——0.394 in</p></li><li><p><strong>点</strong>（pt） 1&#x2F;72 in</p></li><li><p><strong>派点</strong>（pc） 1&#x2F;6 in</p></li></ul><h4 id="相对长度单位"><a href="#相对长度单位" class="headerlink" title="相对长度单位"></a>相对长度单位</h4><ul><li><strong>em</strong>  其定义为字体font-size的大小。比如下面的例子中，各个元素的左边距是不一样的，和其字体大小有关。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h2</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1,h2,p</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>ex</strong>  其定义为字体小写字母x的高度，所以不同字体虽然font-size一样，但ex的值不一样；很多用户代理是将它的值作为em值的一半。</li><li><strong>px</strong>  像素。</li></ul><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="通用字体系列"><a href="#通用字体系列" class="headerlink" title="通用字体系列"></a>通用字体系列</h3><p>这些字体集一般是浏览器自带的，就是说它们是一个系列，一个系列包括很多种字体。</p><ul><li>serif字体</li></ul><p>这些字体成比例，就是说所有字符根据大小有不同的宽度，比如i和m</p><ul><li><p>sans-serif字体</p></li><li><p>monospace字体</p></li></ul><p>这些字体不成比例，每个字符宽度都一样</p><ul><li>cursive字体</li></ul><p>模仿人的手写体</p><ul><li>fantasy字体</li></ul><p>指定字体的属性为 <code>font-family</code>，一般最后都要添加一个通用字体系列；而且通用字体系列不能用引号包裹。如果特定字体含有空格、或特殊符号，需要用引号括起。（单双引号都可，但要混用，并且不区分大小写，但是为了可读性，一般会大写）。比如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">font-family</span><span class="token punctuation">:</span> simsum<span class="token punctuation">,</span> KaiTi<span class="token punctuation">,</span> <span class="token string">'Microsoft YaHei'</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><p><strong>字体粗细</strong></p><p><code>font-weight</code> 属性； 值从100、200-900、normal、bold、bolder、lighter；其中normal指代400，bold指代700，bolder和lighter是相对继承的粗细值增减100-200</p><p><strong>字体大小</strong></p><p><code>font-size</code> 属性；值为绝对大小（xx-small、x-small、small、medium、large、x-large、xx-large），smaller、larger，百分比，长度单位。</p><p>相邻绝对大小之间的缩放因子可能是1-1.2或者1.5 。相对大小smaller和larger则和字体粗细中的一个意思。百分比则是根据从父元素继承的大小来计算。长度单位即前面所说的pt、pc、in、cm、mm。</p><p><strong>字体风格</strong></p><p><code>font-style</code>属性；值为normal（竖直）、italic（斜体）、oblique（倾斜）；斜体是换样式的，倾斜是正常字体的普通倾斜，但是实际来看，这两个值的效果几乎没有区别。</p><p><strong>字体变形</strong></p><p><code>font-variant</code>属性；值为normal、small-caps；分别为默认样式、小型大写字母文本，其效果如下(小写变大写、大写更大)</p><style>    .variant{        color:red;        font-variant: small-caps;    }</style><p>    <div class="variant">            The Man is a Monkey.       </div></p>**字体简化**<p><code>font</code>属性，前三个属性是font-style、font-variant、font-weight，顺序任意，最后两个是font-size加&#x2F;line-height（可选），以及font-family。最后两个属性是必须的，前面忽略的部分视作normal。如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span> <span class="token property">font</span><span class="token punctuation">:</span> 500 small-caps 30px/1.2 SimSum<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><p><code>text-indent</code> ；值为百分数或者长度。考虑下面的例子，百分数的缩进参考值为父元素的宽度。所以，下面的p缩进为50px。该属性能够继承；并且，<strong>只作用于第一行文本</strong>，即使主动换行也是如此。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.test&#123;    width: 500px;text-indent: -50px;    padding-left: 50px;&#125;.he&#123;    text-indent: 10%;&#125;...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        拉山口积分龙卷风了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>啊师傅垃圾开发撒法         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>he<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        啊师傅垃圾开发撒法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>萨福克积分士大夫萨        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p><strong>水平对齐</strong></p><p><code>text-align</code>；值有left、right、center、justify；分别代表左对齐、右对齐、水平居中、两端对齐；其只能用于块级元素。</p><p><strong>行高</strong></p><p><code>line-height</code>; 值有百分比、长度单位、缩放因子。它标识着字框的高度，其与字体高度的差值为行间距（可能为负数）；如果采用相对长度单位其继承值是基于父元素的，所以最好采用缩放因子。考虑下面的例子：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">body&#123;    font-size: 10px;  &#125;div&#123;    line-height: 1em;&#125;p&#123;    font-size: 20px;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>          一大段话，能够分行      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现p标签的行高继承的值为div中的10px，它继承的是计算值！！解决方法是采用缩放因子 1，那么继承就是继承缩放因子的数值，而非行高的计算值。</p><p><strong>垂直对齐</strong></p><p><code>vertical-align</code>；值有baseline、sub、super、top、text-top、middle、bottom、text-bottom、百分比和长度单位。它的对齐的意思是与父元素对齐，所以只针对行内元素、图像等，对块级元素p等无用！</p><p>top、bottom为对齐文本框的上下边线；text-top等是字体大小的上下边线；middle则是中间；sub、super则是文本略微上下偏移，但感觉不如用标签；baseline则是对齐基线（小x的底部，其比文本底部略高）</p><h3 id="字间隔与字母间隔"><a href="#字间隔与字母间隔" class="headerlink" title="字间隔与字母间隔"></a>字间隔与字母间隔</h3><p><strong>字间隔</strong></p><p><code>word-spacing</code> ; 值为绝对长度。针对的是单个字符串的间隔，比如i am 这两个单词间的距离。其默认大小为normal（0）；其表现形式为一段句子之间的单词填充间隔。</p><p><strong>字母间隔</strong></p><p><code>letter-spacing</code> ;同字间隔，其针对的是单个字符之间的距离。注意，中文汉字视作字母间隔，字间隔对汉字没用。其表现形式为每个字母向后填充空白。</p><h3 id="其他文本属性"><a href="#其他文本属性" class="headerlink" title="其他文本属性"></a>其他文本属性</h3><p><code>opacity</code>; 控制元素的透明度，从0-1</p><p><strong>大小写</strong></p><p><code>text-transform</code>; 值有uppercase、lowercase、capitalize、none；分别代表大写、小写、首字母大写、不变。</p><p><strong>文本装饰</strong></p><p><code>text-decoration</code> ;值有none、underline、overline、line-through；没用继承 但是会出现一些穿过现象</p><p><strong>文本阴影</strong></p><p><code>text-shadow</code>；值有：颜色、右偏移量、下偏移量、模糊半径；前三个是必须的，模糊半径定义为模糊颜色显示的范围。例如<code>      text-shadow: green 1px 1px 3px;</code></p><p><strong>处理空格</strong></p><p><code>white-space</code>;一般而言p标签对于多个空白符都是合并、换行符是视作空白符</p><p><img src="/2025/08/23/css/image-20250808212014237.png"></p><p><strong>其他</strong></p><p>还有其他属性，比如 <code>writing-mode</code> 和 <code>text-orientation</code> 实现对联式排列</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">writing-mode</span><span class="token punctuation">:</span> vertical-rl<span class="token punctuation">;</span> <span class="token property">text-orientation</span><span class="token punctuation">:</span> upright<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>这是一段竖直排列的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">writing-mode</span><span class="token punctuation">:</span> vertical-rl<span class="token punctuation">;</span> <span class="token property">text-orientation</span><span class="token punctuation">:</span> upright<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>这是一段竖直排列的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本视觉格式化"><a href="#基本视觉格式化" class="headerlink" title="基本视觉格式化"></a>基本视觉格式化</h2><p><strong>基本框</strong></p><p> 每个元素都有一个假定的基本框；其中外边框可为负、内边框必须大于零，外边框通常是透明的，内边框会显示背景属性。</p><p><img src="/2025/08/23/css/image-20250809104139213.png"></p><p><strong>包含块</strong></p><p>如下面的例子，包含块是最近的祖先元素，所以p的包含块是div，它的布局依赖于div的布局。 </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一些术语</strong></p><ol><li><strong>正常流</strong>： 指文本从左往右、从上往下显示。</li><li><strong>非替换元素</strong>： 元素内容在文档中，则是非替换元素。比如段落的文本放在元素之内。</li><li><strong>替换元素</strong>： 作为其它内容占位符的一个元素。比如img</li><li><strong>块级元素</strong>：这是指段落标题或div之类的元素。这些元素在正常流时会在其框前和之后之后产生换行。</li><li><strong>行内元素</strong>：是块级元素的后代</li><li><strong>根元素</strong>：文档数顶端的元素。HTML中为html标签，XML中可以是任何元素。</li></ol><h3 id="块级元素格式化"><a href="#块级元素格式化" class="headerlink" title="块级元素格式化"></a>块级元素格式化</h3><p>在此之前，先让我们先看看块级元素的完整的框模型。一个元素的width定义为左内边界道右内边界的部分。</p><p><img src="/2025/08/23/css/image-20250809144442944.png"></p><p>简单来讲，正常流中块级元素框的水平部分总和等于父元素的width。比如一个div中有两个段落，外边距设置为1em。段落内容宽度width加上左右内边距、边框、外边距，它们之和就是div内容区的width。</p><p>水平格式化有7大属性： </p><p><code>margin-left</code> ，<code>border-left</code>， <code>padding-left</code> ，<code>width</code>， <code>padding-left</code> ，<code>border-right</code> ，<code>margin-right</code>。</p><p>margin和width可以设置成auto。此时会优先满足width，最后使得该元素与父级元素的width相同。</p><p>垂直格式化也有7大属性：</p><p><code>margin-top</code> ，<code>border-top</code>， <code>padding-top</code> ，<code>height</code>， <code>padding-bottom</code> ，<code>border-bottom</code> ，<code>margin-bottom</code>。</p><p>其中垂直相邻的外边距会合并（也可以理解为重叠）。如： 这样实际效果两个 li 标签之间的距离是15px。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li</span><span class="token punctuation">&#123;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内边距、边框和外边距"><a href="#内边距、边框和外边距" class="headerlink" title="内边距、边框和外边距"></a>内边距、边框和外边距</h2><h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><p>其指定了外边距的模式，要遵循</p><p>margin: top right bottom left的模式，可以发现，这是从上，按顺时针旋转的。有时为了方便，有值复制这一规则</p><ul><li>左边 使用 右边</li><li>下面 使用 上面</li><li>右边 使用 上面</li></ul><p>如图所示：</p><p><img src="/2025/08/23/css/image-20250810182306549.png"></p><p>例子：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0.25em 0 0.5em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">/* 等效于0.25 0 0.5 0 */</span><span class="token selector">h2</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0.15em 0.2em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/* 等效于0.15 0.2 0.15 0.2 */</span><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0.1em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/* 等效于0.1 0.1 0.1 0.1 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用负边距，可以有如下效果</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">p.p_normal</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">p.p_white</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 1em -1px 1em 25%<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">p.p_black</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 1em 3em -3em -3em<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 0 0 100px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> silver<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p_normal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p_white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p_normal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p_black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2025/08/23/css/image-20250810184222734.png"></p><p>当外边距应用到行内非替换元素，也就是普通的文本时，上下边距并不会影响行高，也可以理解为没用；只有左右边距会产生效果。当然，应用到图像之类的替换元素，则有效果。</p><h3 id="border"><a href="#border" class="headerlink" title="border"></a>border</h3><p><strong>边框类型</strong></p><p><code>border-style:  top right bottom left</code>； 值有solid（实线）、dotted（点线）、dashed（长点线）、none、hidden（隐藏）、inset等等。</p><p>这个属性和margin一样，有着值复制的规则。</p><p>当然，也可以利用 <code>border-top-style</code>，<code>border-right-style</code>…四个来单独指定</p><p><strong>边框宽度</strong></p><p><code>border-width</code>； 它的所有定义和用法和边框类型一样，有值传递和四个单独指定</p><p><strong>边框颜色</strong></p><p><code>border-color</code>; 同上； 还有一种特殊的颜色：transparent</p><pre class="line-numbers language-none"><code class="language-none">a:link, a:visited &#123;    border-style: solid;    border-width: 5px;    border-color: transparent;&#125;a:hover&#123;border-color: gray;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>简写属性</strong></p><p>我们发现，像上面定义边框，要写的东西太多了，所以就有了一种合并方法：</p><p><code>border-bottom</code>，<code>border-top</code>，<code>border-right</code>，<code>border-left</code>。应用如下</p><p><code>border-bottom: thick solid gray</code>；三个值分别定义宽度、样式、颜色。顺序任意、可以省略使用默认值（样式默认none）</p><p>进一步简写有全局边框：</p><p><code>border</code></p><p>它适用于边框四条边完全一样，否则需要添加规则自定义。如</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span> thick silver solid<span class="token punctuation">;</span><span class="token property">border-left-width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><p>其用法同上面一样，也有着值复制的规则。同样也可以利用padding-top等单独指定。所以不过多赘述。</p><h2 id="颜色与背景"><a href="#颜色与背景" class="headerlink" title="颜色与背景"></a>颜色与背景</h2><p><strong>前景色color</strong></p><p>这个没有什么可多说的。</p><p><strong>背景</strong></p><ol><li><code>background-color: color;</code> 背景色；默认为transparent；</li><li><code>background-image: url(..);</code>  背景图片；如果是全局图片，我们一般会搭配背景色，图片加载失败显示。</li><li><code>background-repeat</code>图片平铺设置；有四个值：repeat、repeat-x、repeat-y、no-repeat，分别表示水平从垂直平铺、水平平铺等；需要平铺时可以提升效率。</li><li><code>background-position</code>；</li></ol><p>关键词有left、top、right、center，最多使用两个，使用一个时另外默认为center；</p><p>使用百分数时，相对于内边距定位，先定位水平值！原理是背景图像该位置与容器位置重合。比如<code>bacground-position:50% 50%;</code>就是让图片中50%的点，与容器中50%的点重合。</p><p>使用长度值时，就是根据左上角的偏移定位了！</p><ol start="5"><li><code>background-attachment</code> 关联；值有scroll（默认）、fixed；在body中使用后者可以声明图像相对于可视区是固定的，因此不会受滚动的影响。</li><li><code>background-size</code> 尺寸；定义了图片显示大小，有auto（原始）、cover（缩放完全覆盖）、（缩放完整图片）、长度值以及百分比。</li></ol><p><strong>汇总</strong></p><p>通过 <code>background</code> 属性，可以对上面所有的声明进行汇总。无其他要求，如果有位置属性，那么posion时两个值要一起出现，省略值均默认。如果要添加尺寸，其必须在位置后面定义，且必须用 <code>/</code>分离（不能单独添加尺寸而不添加位置，</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> white <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> top left repeat-y fixed<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> white <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://picsum.photos/2000/1200?image=723<span class="token punctuation">)</span></span> center center / cover no-repeat fixed<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://picsum.photos/2000/1200?image=723<span class="token punctuation">)</span></span> / cover no-repeat fixed<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浮动与定位"><a href="#浮动与定位" class="headerlink" title="浮动与定位"></a>浮动与定位</h2><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p><code>float</code> 值有 left、right、none。</p><p>浮动元素的外边距不会合并；</p><p><code>clear</code> 值有left、right、both、none。其作用为确保不浮动</p><p>利用浮动可以写出多列效果，如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.column1, .column2, .column3</span><span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>克拉斯付款记录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>定位的类型</strong>：</p><p><code>positon</code>；值有 static、relative、absolute、fixed。</p><p>对于定位，有下列包含块规则</p><ul><li>根元素的包含块，即初始包含块为视窗大小的矩形</li><li>非根元素，其position为static或relative，包含块为最近的块级框、表单元格或行内块祖先框的内容边界构成</li><li>非根元素，其position为absolute，包含块为最近的position不是static的祖先元素。</li></ul><p>定义了定位类型之后，可以使用 <code>top、right、left、bottom</code>四个偏移属性来相对包含块进行偏移，定位。</p><p>还可以使用 <code>min-width</code>、 <code>min-height</code>、 <code>max-width</code>、 <code>max-height</code> 确定元素的最大、最小的长宽。如果元素内容太多了，溢出了元素大小，那么有：</p><p><code>overflow</code> 值有visible、hidden、scroll、auto；分别表示在元素框之外也可见、隐藏溢出元素、提供滚动条、只在必要时提供滚动条。</p><p><code>visibility: </code> 有hidden、visible和collapse。分别代表不可见、可见、表显示用。设置为不可见时，相当于隐藏元素，但是该元素仍占位置，和opacity不同，它无法接收任何交互，比如hover。</p><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>绝对定位元素的包含块为 定位类型是相对 的元素。考虑下面的例子:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"> <span class="token selector">p.container</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">b</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 8em<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 5em<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid gray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于第一个b元素，其祖先元素均为static，所以其包含块为初始包含块；对于第二个b元素，其包含块为第二个p元素；</p><p>注意：元素绝对定位时，会给其后代元素建立一个包含块。比如一个元素是绝对定位的，它的子元素也是，那么，子元素的包含块就是该元素（虽然其祖先元素的position是absolute）</p><p><strong>元素的叠放</strong></p><p>利用 <code>z-index</code> 控制元素的优先级，数字越大越前，一般默认为0。可以是负数。</p><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>一般用于设计固定框，随界面滚动而滚动的。比如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">header</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">aside</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> silver<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token selector">div#main</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>当元素相对定位时，它会从其正常位置移走，不过原来所占的空间并不会消失。</p><h2 id="display详解"><a href="#display详解" class="headerlink" title="display详解"></a>display详解</h2><table><thead><tr><th><code>block</code></th><th>块级元素，占据父元素的全部宽度</th><th>总是从新行开始，可以设置宽度和高度</th></tr></thead><tbody><tr><td><code>inline</code></td><td>内联元素，只占据必要的宽度</td><td>不从新行开始，不能设置宽度和高度</td></tr><tr><td><code>inline-block</code></td><td>内联块级元素</td><td>像内联元素一样排列，但可以设置宽度和高度</td></tr><tr><td><code>flex</code></td><td>弹性盒子布局</td><td>一维布局模型，提供了更有效的布局方式</td></tr><tr><td><code>grid</code></td><td>网格布局</td><td>二维布局系统，用于更复杂的布局需求</td></tr><tr><td><code>none</code></td><td>元素不显示</td><td>元素从文档流中移除，不占据任何空间</td></tr></tbody></table><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p>参考链接：<a href="https://juejin.cn/post/7004622232378966046">彻底理解CSS Flexbox布局，看这一篇就够了！Flexbox布局的概念 Flexbox布局也叫Flex布局，弹性盒 - 掘金</a></p><p>Flexbox布局也叫Flex布局，弹性盒子布局。它的<strong>目标</strong>是提供一个更有效地布局、对齐方式，并且能够使父元素在子元素的大小未知或动态变化情况下仍然能够分配好子元素之间的间隙。<strong>主要思想</strong>是使父元素能够调整子元素的宽度、高度、排列方式，从而更好的适应可用的布局空间。设定为flex布局的元素能够放大子元素使之尽可能填充可用空间，也可以收缩子元素使之不溢出。 </p><p>Flex布局更适合小规模的布局，可以简便、完整、响应式的实现各种页面布局。但是，设为Flex布局以后，其子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p><p>Flex布局是一个完整的模块，它包括了一套完整的属性。其中采用 Flex 布局的元素，称为 Flex 容器，简称”<strong>容器</strong>“。它的所有子元素就是容器成员，称为 Flex 项目，简称”<strong>项目</strong>“。容器默认存在两个轴：<strong>水平轴</strong>（main axis）和<strong>垂直轴</strong>（cross axis），项目默认沿主轴排列（水平轴）</p><p><img src="/2025/08/23/css/image-20250828171539495.png" alt="容器"></p><p>模型概念：</p><p><strong>main axis</strong>: Flex 父元素的主轴是指子元素布局的主要方向轴，它由属性flex-direction来确定主轴是水平还是垂直的，默认为水平轴。</p><p><strong>main-start &amp; main-end</strong>: 分别表示主轴的开始和结束，子元素在父元素中会沿着主轴从main-start到main-end排布。</p><p><strong>main size</strong>: 单个项目占据主轴的长度大小。</p><p><strong>cross axis</strong>: 交叉轴，与主轴垂直。</p><p><strong>cross-start &amp; cross-end</strong>: 分别表示交叉轴的开始和结束。子元素在交叉轴的排布从cross-start开始到cross-end。</p><p><strong>cross size</strong>: 子元素在交叉轴方向上的大小。</p><h4 id="父元素（容器）"><a href="#父元素（容器）" class="headerlink" title="父元素（容器）"></a><strong>父元素（容器）</strong></h4><p><strong>可以设置以下五个属性：</strong>（省略了一个不常用的）</p><ul><li>flex-direction</li></ul><p>主轴方向的定义；有row、row-reverse、column、column-reverse；分别代表水平从左到右、水平从右到左…</p><ul><li>flex-wrap</li></ul><p>定义子元素（项目）是否会换行；有nowrap、wrap、wap-reverse；分别代表不换行，换行，向上换行。不换行会根据主轴长度调整子元素的宽度</p><ul><li>justify-content</li></ul><p>元素在主轴上的对齐方式；有flex-start、flex-end、center、space-between、space-around；分别代表左对齐、右对齐、居中、两端对齐、均匀分布（这里假设主轴是水平从左到右的，用过word的文本对齐就很容易理解）</p><ul><li>align-items</li></ul><p>元素在交叉轴上的对齐方式；有stretch、flex-start、flex-end、center、baseline；分别代表项目高度充满容器、与交叉轴起点对齐、与终点对齐、与中点对齐、与元素第一行文本基线对齐。（其实就是设置垂直方向的对齐形式，当子元素（项目）的高度不同时就很明显了）</p><ul><li>align-content</li></ul><p>多轴线的对齐方式（换行产生多轴线），简单来说就是一列一列元素在交叉轴上的排列，和元素在主轴上的对齐一样。</p><p>有flex-start、flex-end、center、space-between、space-around。</p><h4 id="子元素（项目）"><a href="#子元素（项目）" class="headerlink" title="子元素（项目）"></a>子元素（项目）</h4><ul><li>order</li></ul><p>默认为0，定义项目排列顺序，越小越靠前（主轴的前面）</p><ul><li>flex</li></ul><p>包含flex-grow、flex-shrink、flex-basis三个。分别代表分配多余空间时放大比例（默认0），空间不足时缩小比例（默认1），未分配多余空间时项目大小。</p><p>常用：有</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>       <span class="token comment">/* 1 1 0% 项目宽度等分 */</span><span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token comment">/* 1 1 auto 项目宽度由内容决定 */</span><span class="token property">flex</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>       <span class="token comment">/* 项目宽度尽可能小 */</span><span class="token property">flex</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token comment">/* 文本宽度即为项目宽度，不够时也不缩小 */</span><span class="token property">flex</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span> <span class="token comment">/* 空间足够时保持原本宽度，不够时会缩小 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>align-self</li></ul><p>对单个项目生效的align-items，属性同它。</p><h3 id="grid布局（待补充"><a href="#grid布局（待补充" class="headerlink" title="grid布局（待补充"></a>grid布局（待补充</h3><h2 id="CSS动画详解"><a href="#CSS动画详解" class="headerlink" title="CSS动画详解"></a>CSS动画详解</h2><p>参考链接：<a href="https://juejin.cn/post/6970883520168198158">CSS3-animation动画详解 - 掘金</a> |<a href="https://juejin.cn/post/6970885478967050254#heading-0">CSS3-transition过渡动画详解基本了解 - 掘金</a> |<a href="https://juejin.cn/post/6999557378169372680?searchId=20250906104408F241BC3A4FA4828C3620">3分钟看懂变换【transform】- 掘金</a></p><p>css中实现动画有两种方式：<code>transition</code>过渡动画、 <code>animation</code>自定义动画。</p><h3 id="animation动画"><a href="#animation动画" class="headerlink" title="animation动画"></a>animation动画</h3><p>其用法为首先通过 <code>@keyframes</code>创建关键帧动画（用过剪辑软件就很容易理解，帧与帧之间应该是平滑形式，如果没定义首尾帧，会用原样式代替）；然后使用 <code>animation</code> 配置。</p><p><code>animation</code> 同大多数一样，是简写属性；（前两个属性是必需的！为了记忆方便，前两个属性位置固定，后面的可以随意排列）</p><ul><li>name绑定动画（keyframes的名字）</li><li>duration   动画持续时间</li><li>iteration-function  动画执行次数（infinite为无穷）</li><li>timing-function  动画执行速度随时间的函数</li></ul><p><img src="/2025/08/23/css/image-20250829114525321.png" alt="timing-function属性值"></p><ul><li>delay动画延迟执行时间</li><li>direction  动画执行方向（正向normal就是从0-100%，反向reverse就是100%-0，还有交替alternate、反交替alternate-reverse）</li><li>fill-mode 动画结束后保持的状态（none为原样式，forwards 0%的关键帧，backwards 100%的）</li><li>play-state 播放状态，有running和paused。一般我们通过js动态控制。</li></ul><p>还可以多动画累加</p><ol><li>首先使用<code>animation-name</code>来锁定使用的各个动画</li><li>之后使用其它的<code>animation</code>族属性，分别约束对应动画，且设置顺序与<code>animation-name</code>使用动画的顺序保持一致。比如下面效果</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"> <span class="token property">animation-name</span><span class="token punctuation">:</span> bgcolor<span class="token punctuation">,</span> bodera<span class="token punctuation">,</span> rotat<span class="token punctuation">;</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 2s<span class="token punctuation">,</span> 2s<span class="token punctuation">,</span> 3s<span class="token punctuation">;</span>    <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> 2<span class="token punctuation">,</span> 2<span class="token punctuation">,</span> 1<span class="token punctuation">;</span>    <span class="token property">animation-direction</span><span class="token punctuation">:</span> reverse<span class="token punctuation">,</span> normal<span class="token punctuation">,</span> normal<span class="token punctuation">;</span>    <span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> forwards<span class="token punctuation">,</span> forwards<span class="token punctuation">,</span> forwards<span class="token punctuation">;</span>...... <span class="token atrule"><span class="token rule">@keyframes</span> opcity</span> <span class="token punctuation">&#123;</span>    <span class="token selector">25%</span> <span class="token punctuation">&#123;</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> 0.2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> 0.6<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule"><span class="token rule">@keyframes</span> bgcolor</span> <span class="token punctuation">&#123;</span>    <span class="token selector">25%</span> <span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> #fbc531<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> #8c7ae6<span class="token punctuation">;</span>......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="transition动画"><a href="#transition动画" class="headerlink" title="transition动画"></a>transition动画</h3><p>这个相较于animation比较简单，直接给出实例吧</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">transition-property</span><span class="token punctuation">:</span> all<span class="token punctuation">;</span>  <span class="token comment">/* 指定使用过度效果的属性; */</span>    <span class="token property">transition-duration</span><span class="token punctuation">:</span> 0.8s<span class="token punctuation">;</span> <span class="token comment">/* 持续时间; */</span>    <span class="token property">transition-timing-function</span><span class="token punctuation">:</span> <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>0.49<span class="token punctuation">,</span> 1.59<span class="token punctuation">,</span> 0.46<span class="token punctuation">,</span> -0.21<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* transition-delay: 1s; */</span><span class="token punctuation">&#125;</span><span class="token selector">.box:hover</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>1turn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，一般我们都会使用transition综合属性（更方便，而且能够进行叠加）。比如</p><p>定义顺序为： 对象、持续时间、速度曲线、延迟时间。（缺省为默认值）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">transition</span><span class="token punctuation">:</span> width 1s ease<span class="token punctuation">,</span> height 1.5s linear 1s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="transform变化详解"><a href="#transform变化详解" class="headerlink" title="transform变化详解"></a>transform变化详解</h3><p>下面的图片是transform的坐标系观念。</p><p><img src="/2025/08/23/css/image-20250906152219003.png" alt="transform的建系"></p><p>它有多种属性，值得注意的是，它类似简写属性，一个选择器中只能定义一个，否则总会被最后一个覆盖。</p><p><strong>旋转属性</strong></p><p>旋转是以原矩形的中心点进行建系，然后进行旋转的，而且没有记忆性（就是用动画帧时会完全重新开始）。</p><p><code>rotate(n deg)</code> 以Z轴为旋转中心，正数为顺时针旋转，其和 <code>rotateZ(n deg)</code>一样</p><p><code>rotateX(n deg)</code>，以X轴为旋转中心</p><p><code>rotateY(n deg)</code>，以Y轴为旋转中心</p><p><code>rotate3d(x,y,z,n deg)</code>，3d旋转，其实就是根据向量确定旋转轴。（反正有点诡异</p><p><strong>移动属性</strong></p><p><code>translate(x,y)</code>移动。很容易理解，这里不多解释。可以是具体值，或者百分数（这是相对于容器自身定义的）。分开来就是<code>translateX(x)</code>、<code>translateY(y)</code></p><p>所以可以利用该属性，实现元素居中。原因在于相对定位它是距离形式的定位，会把左上角定位到中心点</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>缩放属性</strong></p><p>其在缩放过程中，中心点保持不变；缩放基数为1，最终大小就是乘以这个系数。（比如0.5就是一半）。比较简单。</p><p><code>scale(n)</code>、 <code>scaleX(n)</code>、<code>scaleY(n)</code>；其中第一个可以写一个参数，或者同时两个参数</p><p><strong>其他</strong></p><p>还有一些比较抽象的，这里就不举例了（感觉太麻烦，目前用不上</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="固定宽度与流体布局"><a href="#固定宽度与流体布局" class="headerlink" title="固定宽度与流体布局"></a>固定宽度与流体布局</h3><p>下面是固定宽度布局</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>My Web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 960px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#content</span> <span class="token punctuation">&#123;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#nav,        #feature,        #footer</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.column1,        .column2,        .column3</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">li</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>logo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>produts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>contact<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>feature<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>feature<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article column1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>column 111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article column2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>column 222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article column3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>column 333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&amp;copy: Copyright 2025<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="/2025/08/23/css/image-20250815100113636.png"></p><p>对于流体布局，采用百分数。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#content</span> <span class="token punctuation">&#123;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#nav,#feature,#footer</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.column1,.column2,.column3</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 31.3%<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">li</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0.5em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#nav,#footer</span><span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0.5em 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#feature, .article</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 10em<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习 第1期 HTML</title>
      <link href="/2025/08/22/html/"/>
      <url>/2025/08/22/html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="网站访问原理"><a href="#网站访问原理" class="headerlink" title="网站访问原理"></a>网站访问原理</h2><p>简单来说，在浏览器输入网址后，会根据分配的DNS服务器解析域名的IP地址，这样通过IP地址就能找到web服务器，然后经过请求响应，浏览器接收服务器发来的HTML与CSS等，并且渲染成网站界面。</p><p>如果访问例如bilibili.com则Web服务器会返回bilibili.com&#x2F;index.html。如下图</p><p><img src="/2025/08/22/html/image-20250723214545307.png"></p><hr><h2 id="文本标签介绍"><a href="#文本标签介绍" class="headerlink" title="文本标签介绍"></a>文本标签介绍</h2><style>    table{        display: table !important;        color: black;        }table td{         text-align: -webkit-center !important;}    table th{        text-align: -webkit-center !important;    }</style><h3 id="文本内容定义"><a href="#文本内容定义" class="headerlink" title="文本内容定义"></a>文本内容定义</h3><table><thead><tr><th align="left">文本内容定义</th><th align="left">代码示例</th><th align="left">效果</th></tr></thead><tbody><tr><td align="left">标题（h）</td><td align="left"><code>&lt;h1&gt;Title&lt;/h1&gt;</code></td><td align="left">略</td></tr><tr><td align="left">段落（p）</td><td align="left"><code>&lt;p&gt;How old are you&lt;/p&gt;</code></td><td align="left">略</td></tr><tr><td align="left">长引用（blockquote）</td><td align="left"><code>&lt;blockquote&gt;我上早八&lt;/blockquote&gt; </code></td><td align="left"><blockquote>我上早八</blockquote></td></tr><tr><td align="left">短引用（q）</td><td align="left"><code>&lt;q&gt;我上早报&lt;q&gt;</code></td><td align="left"><q>我上早报<q></td></tr><tr><td align="left">缩写词（abbr）</td><td align="left"><code>&lt;abbr title=&quot;Professer&quot;&gt;Prof&lt;/abbr&gt;</code></td><td align="left"><abbr title="Professer">Prof</abbr></td></tr><tr><td align="left">引用来源（cite）</td><td align="left"><code>by &lt;cite&gt;baidu&lt;/cite&gt;</code></td><td align="left">by <cite>baidu</cite></td></tr><tr><td align="left">首次定义（dfn）</td><td align="left">在文档中首次解释某个术语</td><td align="left"></td></tr><tr><td align="left">设计者信息（address）</td><td align="left"><code>&lt;address&gt;邮件、姓名...&lt;/address&gt;</code></td><td align="left">用于表示页面设计者信息</td></tr><tr><td align="left">任意（span）</td><td align="left">仅仅用于标识一段文本，无特殊含义</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><p><strong>说明</strong>：</p><ul><li><p><code>h</code>标签范围为 1 - 6 。</p></li><li><p><strong>长引用</strong>一般包含一个段落的引用；<strong>短引用</strong>在浏览器中显示会添加引号(IE浏览器不支持)。二者均可添加cite表示引用来源。比如 <code>&lt;q cite = &quot;https://baidu.com&quot;&gt;&lt;/q&gt;</code></p></li><li><p><strong>缩写词</strong>abbr 其鼠标放置在上面会显示完整名字。</p></li><li><p><strong>引用来源</strong>cite 表示引用书籍、电影、报告，一般是名字；不同于短引用的文字。</p></li><li><p>abbreviation：缩略词</p></li></ul><p><strong>快捷键</strong>：</p><ul><li>快速生成标题<code>h$*6 后回车</code></li></ul><hr><h3 id="文本内容样式"><a href="#文本内容样式" class="headerlink" title="文本内容样式"></a>文本内容样式</h3><table><thead><tr><th align="left">文本内容样式</th><th>代码示例</th><th>效果</th></tr></thead><tbody><tr><td align="left">水平线（hr）</td><td><code>hello &lt;hr /&gt; world</code></td><td>hello <hr /> world</td></tr><tr><td align="left">换行符（br）</td><td><code>hhh.&lt;br /&gt; how are you</code></td><td>hhh.<br /> how are you</td></tr><tr><td align="left">加粗（b）</td><td><code>&lt;b&gt;World&lt;/b&gt;</code></td><td><b>World</b></td></tr><tr><td align="left">斜体（i）</td><td><code>&lt;i&gt;hello&lt;/i&gt;</code></td><td><i>hello</i></td></tr><tr><td align="left">上标（sup）</td><td><code>x&lt;sup&gt;2&lt;/sup&gt;</code></td><td>x<sup>2</sup></td></tr><tr><td align="left">下标（sub）</td><td><code>H&lt;sub&gt;2&lt;/sub&gt;</code></td><td>H<sub>2</sub></td></tr><tr><td align="left">表示重要（strong）</td><td><code>&lt;strong&gt;asdf&lt;/strong&gt;</code></td><td><strong>asdf</strong></td></tr><tr><td align="left">强调（em）</td><td><code>&lt;em&gt;asdfs&lt;/em&gt;</code></td><td><em>asdfs</em></td></tr><tr><td align="left">删除线（del）</td><td><code>&lt;del&gt;hh&lt;/del&gt;</code></td><td><del>hh</del></td></tr><tr><td align="left">插入线（ins）</td><td><code>&lt;ins&gt;hh&lt;/ins&gt;</code></td><td><ins>hh</ins></td></tr><tr><td align="left">不正确线（s）</td><td>表示不相关、不正确但不应删除</td><td><s>hhh</s></td></tr><tr><td align="left"></td><td></td><td></td></tr></tbody></table><p><strong>说明</strong>：</p><ul><li><strong>删除线</strong>和<strong>插入线</strong> 可以用于英文改错</li></ul><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>分为：有序列表、无序列表、定义列表、嵌套列表。</p><p>有序列表（Order List）; 列表（List Item）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>你<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义列表</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>列表的头，比如术语<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>列表的内容，比如解释术语的话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>列表的头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>列表的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嵌套列表</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我d        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>safl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>safl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>safl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>你<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>快捷键：<code>ul&gt;li*5</code></strong></p><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><blockquote>注：<b>href</b>标识超文本引用，用在<b>link</b>和<b>a</b>.等元素上，<b>href</b>是引用和页面关联，是在当前元素和引用资源之间建立联系。</blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Baidu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./pic/background.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跳转百度<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">object-fit</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./pic/background.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../C_study/main.c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mailto:429712080@qq.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链接分为：指向其他网站的链接； 指向同一网站其他位置的链接（比如其他html）。前者用的是绝对地址，后者为相对URL。</p><p>email链接，为mailto前缀，打开时会启动电脑中的email程序（比如outlook、企业微信等等）</p><ul><li>在新窗口打开链接，定义targer即可</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./pic/background.png<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>链接到当前界面中某个位置。通过元素id即可定位</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  S S GDFGSDGF  SAFAFDSDF FV<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>链接到其他界面的某个位置。原理同上，亦可以定位到已知其他网站</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./else.html#text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 上面的text为else.html中某个元素的id，注意是直接紧跟的写的--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><blockquote><b>src</b>表示引用资源，表示替换当前元素，用在<b>img，script，iframe</b>上，    src是页面内容不可缺少的一部分。</blockquote><p>​    </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中</p><p><strong>alt：替换文本，就是无法正常显示时的占位符</strong></p><p><strong>title：鼠标悬停的提示</strong></p><p><strong>宽高等其他设定，建议通过后续的CSS定义</strong></p><p>图像相对于段落的关系，涉及到块级元素和内联元素的关系。例如</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token comment">&lt;!-- img是内联元素，其位于块级元素中，不会另起一行 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这段会另起一行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这段首行会紧接在图片后面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这段会另<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>这段为图片嵌入文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图像格式及原理"><a href="#图像格式及原理" class="headerlink" title="图像格式及原理"></a>图像格式及原理</h3><p><code>.jpeg</code> 适用于有多种不同颜色的图片，比如雪景，具有很多微小差异的颜色</p><p><code>.gif &amp; .png</code> 适合少量颜色，有大面积同色区域的平面彩色。</p><p>屏幕分辨率的意思就是一个确定尺寸的屏幕上，像素点的多少。比如电脑分辨率为1920*1080，意思就是 宽度上有1920个像素点排列，高度上有1080个像素点排列（其中一个像素点是一个单色）。当然，这针对的是像素图（位图）。下面来介绍几种图片类型</p><ul><li><p><strong>位图</strong>，即像素图，又像素点组成，存在缩放失真的情况，而且占用空间大。</p></li><li><p><strong>矢量图</strong>，如AVG，AI，其原理是数学公式(如XML标记语言)表示点，缩放无失真，占用空间小。一般用于logo、简单的平面设计、卡通人物。</p></li><li><p><strong>GIF动画</strong>，显示几帧的图像，用于简单动画。然而过多帧会导致网页加载缓慢</p></li><li><p><strong>透明GIF</strong>，图像的透明部分有直边，并且这部分是100%透明的。用于处理简单图形的透明要求，过于复杂 边缘会出现锯齿（”楼梯状”像素）当然，如果要生成透明GIF动画另说</p></li><li><p><strong>PNG</strong>，图像的透明部分包含斜线或者圆边，或者你想使用半透明的透明度或投影。其能平滑渲染复杂边缘，一般是透明首选。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#apng_animated_portable_network_graphics">APNG（动态可移植网络图形）</a>——无损动画序列的不错选择（GIF 性能较差）。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#avif_image">AVIF（AV1 图像文件格式）</a>——静态图像或动画的不错选择，其性能较好。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#gif_graphics_interchange_format">GIF（图像互换格式）</a>——<em>简单</em>图像和动画的不错选择。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#jpeg_joint_photographic_experts_group_image">JPEG（联合图像专家组）</a>——有损压缩静态图像的不错选择（目前最流行的格式）。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#png_portable_network_graphics">PNG（便携式网络图形）</a>——对于无损压缩静态图像而言是不错的选择（质量略好于 JPEG）。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#svg_scalable_vector_graphics">SVG（可缩放矢量图形）</a>——矢量图像格式。用于必须以不同尺寸准确描绘的图像。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#webp_image">WebP（网络图片格式）</a>——图像和动画的绝佳选择。</p></li></ul><h3 id="图形说明"><a href="#图形说明" class="headerlink" title="图形说明"></a>图形说明</h3><p>利用下面的两个标签，定义图片说明。感觉一般用于类似商品展示需要对图片进行说明，一般图片都只是为了好看。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./pic/background.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>这是图片的描述说明    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a><strong>表格</strong></h2><p>下面是一个简单的表格。tr：table row；td：table data。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>快捷键：<code>table&gt;tr*4&gt;td*3&#123;单元格&#125;</code></strong></p><p>其他标签</p><ul><li>th：代表行或者列的标题，网页会自动加粗</li><li>thead；tbody；tfoot。一般作标识作用</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 可以使用scope标识是列&amp;行标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>语文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数学<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>英语<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>40<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>150<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead>    <th></th>    <th scope="col">学分</th>    <th scope="col">成绩</th>    <!-- 可以使用scope标识是列&行标题 --></thead><tbody>    <tr>        <th scope="">语文</th>        <td>1</td>        <td>50</td>    </tr>        <tr>        <th scope="row">数学</th>        <td>2</td>        <td>60</td>        </tr>        <tr>        <th scope="row">英语</th>        <td>3</td>        <td>40</td>        </tr></tbody><tfoot>    <th></th>       <td>6</td>       <td>150</td></tfoot></table><h3 id="跨行与跨列"><a href="#跨行与跨列" class="headerlink" title="跨行与跨列"></a>跨行与跨列</h3><p>跨行：在th、td标签使用rowspan；跨列：在th、td标签使用colspan即可；要注意匹配。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>不好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>    <table>        <tr>            <td colspan = "2">你好</td>            <td rowspan = "2">不好</td>        </tr>        <tr>            <td>1</td>            <td>2</td>        </tr></table></p><p>​    </p><h2 id="表单（日后更新）"><a href="#表单（日后更新）" class="headerlink" title="表单（日后更新）"></a>表单（日后更新）</h2><p>因为涉及到服务器才能工作，所以目前暂时跳过。</p><h2 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h2><h3 id="DOCTYPE-（文档类型）"><a href="#DOCTYPE-（文档类型）" class="headerlink" title="DOCTYPE （文档类型）"></a>DOCTYPE （文档类型）</h3><p>用于声明网页采用的HTML版本。如HTML 5; HTML 4; XHTML等等。下面就是HTML 5 的声明</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>注释</strong>： 用 <code>&lt;!-- --&gt;</code>表示注释，在编译器（VScode），直接<code>Ctrl + /</code>即可</p></li><li><p><strong>id特性</strong>：唯一标识符（在一个页面中）</p></li><li><p><strong>class特性</strong>：用于单独标识出一些标签</p></li></ul><h3 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h3><p><strong>块级元素</strong>： 在浏览器中显示总是另起一行。包括h标签、p标签、li标签、ul标签等等</p><p><strong>内联元素</strong>： 与它临近元素出现在同一行内。包括a标签、b标签、em标签、img标签等等。</p><h3 id="div"><a href="#div" class="headerlink" title="div"></a>div</h3><p>将文本和元素集中在一个块级元素中。div会使得元素另起一行。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    hello    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        wokao    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--end of header --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="span"><a href="#span" class="headerlink" title="span"></a>span</h3><p>将文本和元素集中在一个内联元素中。</p><p>用途一般是为了控制其中元素的样式</p><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>是一种内联框架。用于嵌入网页，比如google地图或者YouTube、哔哩哔哩视频等等</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span><span class="token punctuation">></span></span>    src="https://maps.google.com/maps?q=地址&amp;output=embed"     width="600"     height="450"     style="border:0;"         allowfullscreen 允许全屏    loading="lazy"> 延迟加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><p>表示<strong>页面信息</strong>。特性一般配套name和content使用。有keywords、description、robots；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这里大概就是浏览器搜索界面显示的网页预览<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>网页关键字大概是用英文逗号隔开<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nofllow,告诉爬虫爬取规则<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>牢小科<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pragma<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-cache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--防止缓存 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>expires<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>过期时间设置、有严格格式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转义字符与特殊字符"><a href="#转义字符与特殊字符" class="headerlink" title="转义字符与特殊字符"></a>转义字符与特殊字符</h3><p>比如要显示编写代码中用到的 <code>&lt; &gt; &amp; &quot; &#39; * /</code>等字符，要显示，需要用到转义（不同于C语言的用法）。如： <code>&amp;copy</code> <code>&amp;amp</code> …</p><div>    &copy  &amp</div><h2 id="Flash、视频和音频"><a href="#Flash、视频和音频" class="headerlink" title="Flash、视频和音频"></a>Flash、视频和音频</h2><p> 由于flash已经逐渐淘汰了（比如很多基于flash的游戏），所以暂时不作了解。</p><p>在网页中插入视频，方法一正如同前文所写，托管（其实就是发布）到视频平台，然后通过iframe嵌入（比如bilibili、youtube等）。</p><p>HTML5中的<code>&lt;video&gt;</code>标签，目前用于展示视频</p><h3 id="video"><a href="#video" class="headerlink" title="video"></a>video</h3><p>特征值有src；poster(未播放时的图像)；width、height；controls（浏览器提供播放控件）；loop；autoplay；preload（三个值none auto metadata）分别代表浏览器不加载、加载、加载基本信息</p><pre class="line-numbers language-none"><code class="language-none">&lt;video src&#x3D;&quot;a.mp4&quot; poster&#x3D;&quot;.&#x2F;pic&#x2F;background.png&quot;  preload&#x3D;&quot;metadata&quot;  controls&gt;&lt;&#x2F;video&gt;&lt;video src&#x3D;&quot;a.webm&quot; preload&#x3D;&quot;auto&quot; controls&gt;&lt;&#x2F;video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="source"><a href="#source" class="headerlink" title="source"></a><strong>source</strong></h3><p><strong>多个视频源</strong> src；type（告诉浏览器视频格式）；codecs（可选指定编码器）。eg：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">loop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./a.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./a.webm<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/webm<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其作用是兼容不同浏览器，其会加载其中一个（可能是顺序尝试）；还可以添加media属性，以适配不同屏幕。</p><h3 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h3><p>用法同video，也可以使用多个音频源。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./Counting Stars - OneRepublic.flac<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>audio/flac<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">loop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="正斜杠-与反斜杠-与"><a href="#正斜杠-与反斜杠-与" class="headerlink" title="正斜杠&#x2F;与反斜杠\与&amp;"></a>正斜杠&#x2F;与反斜杠\与&amp;</h2><p>在HTML中反斜杠并没有特殊作用。</p><p>正斜杠则用于很多。例如： <strong>路径分隔符</strong>；<strong>结束标签</strong>；<strong>自闭合</strong>；<strong>协议或域名后的分隔符</strong></p><p>&amp;在HTML中标识转义作用。</p><h2 id="VScode简要使用及插件"><a href="#VScode简要使用及插件" class="headerlink" title="VScode简要使用及插件"></a><strong>VScode简要使用及插件</strong></h2><p><strong>插件：</strong></p><ol><li><p><strong>CHINESE（中文简体安装包）</strong></p></li><li><p><strong>Live Server（实时更新显示HTML）</strong></p></li></ol><p><strong>常用快捷键：</strong></p><ol><li><strong>Shift+Alt+F ——代码格式化（排版</strong></li><li><strong>Alt+Up&#x2F;Down（上下移动，小箭头）</strong></li><li><strong>Shift+Alt+Up&#x2F;Down （迅速复制</strong></li><li><strong>Ctrl+H ——快速替换</strong></li><li><strong>Ctrl+&#x2F; ——注释和取消</strong></li><li><strong>Ctrl+ 空格 ——重新显示代码自动补全框</strong></li></ol><p>VScode中输入 <code>!</code>后回车，即可自动生成相关代码</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客撰写指南（持续更新中）</title>
      <link href="/2025/07/25/con-bolg-write/"/>
      <url>/2025/07/25/con-bolg-write/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：介绍hexo中blog撰写<span id="more"></span>的小技巧等等。</p><h2 id="一键三连（只需点击-bat）"><a href="#一键三连（只需点击-bat）" class="headerlink" title="一键三连（只需点击.bat）"></a>一键三连（只需点击.bat）</h2><p>为什么不用powershell呢？因为发现会有——因为在此系统上禁止运行脚本。有关详细信息，请参阅…——的问题，想要解决又怕会有安全隐患，比如病毒执行脚本… 所以还是改成用CMD，甚至不用管理员权限，完成操作。</p><p>创建一个.bat文件，右键用记事本编辑。复制下面的代码，注意修改路径</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo oncd &#x2F;d E:\blog_materycmd &#x2F;k &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; start http:&#x2F;&#x2F;localhost:4000&#x2F; &amp;&amp; hexo s&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>命令解释：</p><ol><li><code>@echo on</code>就是显示 命令回显 可以设置成off，都一样。圈中的就是回显</li></ol><p><img src="/2025/07/25/con-bolg-write/image-20250725105234788.png"></p><ol start="2"><li><code>cd /d E:\blog_matery</code> <code>cd</code>简单的跳转目录命令，<code>/d</code>意味着需要跳转盘符，因为似乎默认在C盘启动CMD。否则CMD无动于衷，j具体如下图</li></ol><p><img src="/2025/07/25/con-bolg-write/image-20250725105823740.png"></p><p>也可以先用 <code>e:</code>跳转。这里不过多介绍CMD的东西。反正意思就是将后面的路径改成你以前手动用Git一键三连的路径。</p><ol start="3"><li><code>cmd /k &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; start http://localhost:4000/ &amp;&amp; hexo s&quot;</code></li></ol><p><code>/k</code>是执行完不关闭，<del>似乎可以去掉</del>，后面的就是三连的命令了，很容易看懂，中间加了个自动跳转网站的命令。后面我发现不用CMD也可以，见下面的自定义：&#x2F;</p><p>新增文章（自动关闭）——一般只新增文章无需clean</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo oncd &#x2F;d E:\blog_materyhexo g &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一键四连（上传完调试）</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo oncd &#x2F;d E:\blog_materycmd &#x2F;k &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; start http:&#x2F;&#x2F;localhost:4000&#x2F; &amp;&amp; hexo s&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一键三连（自动关闭）——一般涉及到删除文章才clean</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo oncd &#x2F;d E:\blog_materyhexo clean &amp;&amp; hexo g &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一键调式（不上传到GitHub）</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo oncd &#x2F;d E:\blog_materyhexo g &amp;&amp; start http:&#x2F;&#x2F;localhost:4000&#x2F; &amp;&amp; hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="文章中引入HTML"><a href="#文章中引入HTML" class="headerlink" title="文章中引入HTML"></a>文章中引入HTML</h2><p>突然发现Markdown也支持HTML语法，如下，注意 要换行请使用Shift + Enter</p><p><img src="/2025/07/25/con-bolg-write/image-20250725161953923.png"></p><p>很可惜，img标签无法正常使用，源于其路径无法正常解析。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>./con-bolg-write/image-20250725161953923.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--无法使用！！！--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一般来说，直接在Markdown编辑器里面打字就行了，引入HTML主要是为了结合CSS自定义一些文本样式，或者一些特殊的展现形式（当然，更复杂的正在学习中，eg：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>这是测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote>    <b>这是测试</b></blockquote><h2 id="文章引入CSS自定义样式"><a href="#文章引入CSS自定义样式" class="headerlink" title="文章引入CSS自定义样式"></a>文章引入CSS自定义样式</h2><p>对于一些固有设定的（比如p标签中的字体大小），需要加 !important后缀。当然，我们一般引入选择器（虽然可能与主题的冲突，那就取点奇怪的class）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">table</span><span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> table <span class="token important">!important</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token selector">table td</span><span class="token punctuation">&#123;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> -webkit-center <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token selector">table th</span><span class="token punctuation">&#123;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> -webkit-center <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加入类选择器更加可控。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.wokao</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>wokao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            这是测试文档      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><style>.wokao{color: blue;font-size: 30px;}</style><p>    <div class = "wokao">          <span>            这是测试文档      </span>  </div></p><hr><h2 id="通过iframe引入视频（待理解像素问题后补充"><a href="#通过iframe引入视频（待理解像素问题后补充" class="headerlink" title="通过iframe引入视频（待理解像素问题后补充"></a>通过iframe引入视频（待理解像素问题后补充</h2><p>参考链接：<a href="https://cloud.tencent.com/developer/article/2266871">使用更干净的哔哩哔哩iframe播放器-腾讯云开发者社区-腾讯云</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//www.bilibili.com/blackboard/html5mobileplayer.html?bvid=BV1J18bzgE8H&amp;danmaku=1<span class="token punctuation">"</span></span>           <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span> <span class="token property">aspect-ratio</span><span class="token punctuation">:</span> 16/9</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">allowfullscreen</span>           <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>bvid从视频URL可看到，danmaku标识弹幕是否开启。</p>]]></content>
      
      
      <categories>
          
          <category> blog撰写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章撰写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习 第4期</title>
      <link href="/2025/07/13/cstudy3/"/>
      <url>/2025/07/13/cstudy3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="结构体初探"><a href="#结构体初探" class="headerlink" title="结构体初探"></a>结构体初探</h2><p>通过下面一段代码，可以基本了解道结构体的定义、初始化、访问。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">stuff</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">char</span> code<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> cost<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">stuff</span> monkey <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token number">19</span><span class="token punctuation">,</span>        <span class="token string">"123"</span><span class="token punctuation">,</span>        <span class="token number">1.414</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stuff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token function">sprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"number:%d code:%s cose:%f"</span><span class="token punctuation">,</span> monkey<span class="token punctuation">.</span>number<span class="token punctuation">,</span> monkey<span class="token punctuation">.</span>code<span class="token punctuation">,</span> monkey<span class="token punctuation">.</span>cost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a>嵌套结构</h2><p>在结构中包含另一个结构的用法如下。访问嵌套结构的成员，要使用两次.运算符，其比 <code>&amp;</code>的优先级更高。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEN</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token keyword">struct</span> <span class="token class-name">names</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> first<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> last<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">guy</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">names</span> handle<span class="token punctuation">;</span>    <span class="token keyword">char</span> favfood<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> job<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> income<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">guy</span> fellow <span class="token operator">=</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span><span class="token string">"liu"</span><span class="token punctuation">,</span><span class="token string">"hang"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"food"</span><span class="token punctuation">,</span>        <span class="token string">"teacher"</span><span class="token punctuation">,</span>        <span class="token number">520.2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">guy</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"name:%s %s, favfood:%s, job: %s, income: %f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"name:%s %s, favfood:%s, job: %s, income: %f"</span><span class="token punctuation">,</span>         fellow<span class="token punctuation">.</span>handle<span class="token punctuation">.</span>first<span class="token punctuation">,</span> fellow<span class="token punctuation">.</span>handle<span class="token punctuation">.</span>last<span class="token punctuation">,</span> fellow<span class="token punctuation">.</span>favfood<span class="token punctuation">,</span> fellow<span class="token punctuation">.</span>job<span class="token punctuation">,</span> fellow<span class="token punctuation">.</span>income<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指向结构的指针"><a href="#指向结构的指针" class="headerlink" title="指向结构的指针"></a>指向结构的指针</h2><p>用指针访问成员，使用方法例如： <code>p == &amp;gou[0], p-&gt;age为gou[0].age或者(*p).age</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> xing<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ming<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Name<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    Name name_val<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Person<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Person gou<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#123;</span><span class="token string">"Li"</span><span class="token punctuation">,</span> <span class="token string">"Ming"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token number">20</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#123;</span><span class="token string">"Wan"</span><span class="token punctuation">,</span> <span class="token string">"Wu"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token number">25</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Person<span class="token operator">*</span> p <span class="token operator">=</span> gou<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name: %-5s %-5s, age: %d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name_val<span class="token punctuation">.</span>xing<span class="token punctuation">,</span> p<span class="token operator">-></span>name_val<span class="token punctuation">.</span>ming<span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构的传递"><a href="#结构的传递" class="headerlink" title="结构的传递"></a>结构的传递</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">funds</span><span class="token punctuation">&#123;</span>      <span class="token keyword">char</span> bank<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> bankfund<span class="token punctuation">;</span>    <span class="token keyword">char</span> save<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> savefund<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">sum_0</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">sum_1</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">funds</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">sum_2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">funds</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">funds</span> stan <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"Bank"</span><span class="token punctuation">,</span>        <span class="token number">4032.58</span><span class="token punctuation">,</span>        <span class="token string">"Lucky"</span><span class="token punctuation">,</span>        <span class="token number">8543.94</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stan: %.2f。\n"</span><span class="token punctuation">,</span> <span class="token function">sum_0</span><span class="token punctuation">(</span>stan<span class="token punctuation">.</span>bankfund<span class="token punctuation">,</span> stan<span class="token punctuation">.</span>savefund<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stan: %.2f。\n"</span><span class="token punctuation">,</span> <span class="token function">sum_1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stan: %.2f。\n"</span><span class="token punctuation">,</span> <span class="token function">sum_2</span><span class="token punctuation">(</span>stan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">double</span> <span class="token function">sum_0</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">sum_1</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">funds</span><span class="token operator">*</span> money<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>money<span class="token operator">-></span>bankfund <span class="token operator">+</span> money<span class="token operator">-></span>savefund<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">sum_2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">funds</span> money<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>money<span class="token punctuation">.</span>bankfund <span class="token operator">+</span> money<span class="token punctuation">.</span>savefund<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构与文件"><a href="#结构与文件" class="headerlink" title="结构与文件"></a>结构与文件</h2><p>下面是一个简单的图书馆书本目录。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">s_gets</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">book</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> title<span class="token punctuation">[</span>MAXTITL<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> author<span class="token punctuation">[</span>MAXAUTL<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">float</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">book</span> library<span class="token punctuation">[</span>MAXBKS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> filecount<span class="token punctuation">;</span>FILE<span class="token operator">*</span> pbooks<span class="token punctuation">;</span><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">book</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pbooks <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"book.dat"</span><span class="token punctuation">,</span> <span class="token string">"ab+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Can't Open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">rewind</span><span class="token punctuation">(</span>pbooks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> MAXBKS <span class="token operator">&amp;&amp;</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pbooks<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"现在的书目录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s by %s: %.2f\n"</span><span class="token punctuation">,</span> library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span> library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>filecount <span class="token operator">=</span> count<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> MAXBKS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"书满了"</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"请添加新书的名字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"按下回车停止输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> MAXBKS <span class="token operator">&amp;&amp;</span> <span class="token function">s_gets</span><span class="token punctuation">(</span>library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> MAXTITL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"现在输入作者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">s_gets</span><span class="token punctuation">(</span>library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span> MAXAUTL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"输入价格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>library<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> MAXBKS<span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"输入下一个书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"下面是最新书目"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s by %s: %.2f\n"</span><span class="token punctuation">,</span> library<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> library<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span> library<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>library<span class="token punctuation">[</span>filecount<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> count <span class="token operator">-</span> filecount<span class="token punctuation">,</span> pbooks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No Books?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Byd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pbooks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">s_gets</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> ret_val<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> find<span class="token punctuation">;</span>ret_val <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret_val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>find <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token operator">*</span>find <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ret_val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="联合与枚举"><a href="#联合与枚举" class="headerlink" title="联合与枚举"></a>联合与枚举</h2><h3 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">union</span> hold <span class="token punctuation">&#123;</span><span class="token keyword">int</span> digit<span class="token punctuation">;</span><span class="token keyword">double</span> bigfl<span class="token punctuation">;</span><span class="token keyword">char</span> letter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">union</span> hold valA<span class="token punctuation">;</span>valA<span class="token punctuation">.</span>letter <span class="token operator">=</span> <span class="token char">'R'</span><span class="token punctuation">;</span><span class="token keyword">union</span> hold valB <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">44</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">union</span> hold valC <span class="token operator">=</span> valA<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>注意在C++中枚举不能++</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">spectrum</span> <span class="token punctuation">&#123;</span> red<span class="token punctuation">,</span> orange<span class="token punctuation">,</span> yellow<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> colors<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"orange"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">enum</span> <span class="token class-name">spectrum</span> color<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>color <span class="token operator">=</span> red<span class="token punctuation">;</span> color <span class="token operator">&lt;=</span> blue<span class="token punctuation">;</span> color <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">==</span> yellow<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> red<span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> orange<span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> yellow<span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> green<span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> blue<span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">union</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> int_value<span class="token punctuation">;</span><span class="token keyword">float</span> float_value<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> string_value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Data<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>INT<span class="token punctuation">,</span>FLOAT<span class="token punctuation">,</span>STRING<span class="token punctuation">&#125;</span>DataType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>DataType type<span class="token punctuation">;</span>Data data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>TypeData<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> TypeData<span class="token operator">*</span> print_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>TypeData data1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> INT<span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>TypeData data2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> FLOAT <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>data2<span class="token punctuation">.</span>data<span class="token punctuation">.</span>float_value <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>TypeData data3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> STRING <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>data3<span class="token punctuation">.</span>data<span class="token punctuation">.</span>string_value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"asd"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data3<span class="token punctuation">.</span>data<span class="token punctuation">.</span>string_value<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>data3<span class="token punctuation">.</span>data<span class="token punctuation">.</span>string_value<span class="token punctuation">,</span> <span class="token string">"ads"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> TypeData<span class="token operator">*</span> print_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>print_data<span class="token operator">-></span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> INT<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int_value: %d\n"</span><span class="token punctuation">,</span> print_data<span class="token operator">-></span>data<span class="token punctuation">.</span>int_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> FLOAT<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"float_value: %f\n"</span><span class="token punctuation">,</span> print_data<span class="token operator">-></span>data<span class="token punctuation">.</span>float_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> STRING<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"string_value: %s\n"</span><span class="token punctuation">,</span> print_data<span class="token operator">-></span>data<span class="token punctuation">.</span>string_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 结构体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习 第3期</title>
      <link href="/2025/07/12/cstudy2/"/>
      <url>/2025/07/12/cstudy2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h2><h3 id="fopen-打开文件"><a href="#fopen-打开文件" class="headerlink" title="fopen(打开文件)"></a>fopen(打开文件)</h3><p><code>FILE *fopen(const char *filename, const char *mode)</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"./source/test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者fopen(".\\source\\a.text","w");</span>    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"abcdefghijklmn"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"./source/test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">文件使用方式</th><th>含义</th><th>如果指定文件不存在</th></tr></thead><tbody><tr><td align="left">“r”(只读)</td><td>为了输入数据，打开一个已经存在的文本文件</td><td>出错</td></tr><tr><td align="left">“w”(只写)</td><td>为了输出数据，打开一个文本文件</td><td>建立一个新的文件</td></tr><tr><td align="left">“a”(追加)</td><td>向文本文件尾添加数据</td><td>建立一个新的文件</td></tr><tr><td align="left">“rb”(只读)</td><td>为了输入数据，打开一个二进制文件</td><td>出错</td></tr><tr><td align="left">“wb”(只写)</td><td>为了输出数据，打开一个二进制文件</td><td>建立一个新的文件</td></tr><tr><td align="left">“ab”(追加)</td><td>向一个二进制文件尾添加数据</td><td>出错</td></tr><tr><td align="left">“r+”(读写)</td><td>为了读和写，打开一个文本文件</td><td>出错</td></tr><tr><td align="left">“w+”(读写)</td><td>为了读和写，建一个新的文件</td><td>建立一个新的文件</td></tr><tr><td align="left">“a+”(读写)</td><td>打开一个文件，在文件尾进行读写</td><td>建立一个新的文件</td></tr><tr><td align="left">“rb+”(读写)</td><td>为了读和写打开一个二进制文件</td><td>出错</td></tr><tr><td align="left">“wb+”(读写)</td><td>为了读和写，新建一个新的二进制文件</td><td>建立一个新的文件</td></tr><tr><td align="left">“ab+”(读写)</td><td>打开一个二进制文件，在文件尾进行读和写</td><td>建立一个新的文件</td></tr></tbody></table><p>  注：当使用“w”，“wb”，“w+”，“wb+”打开文件时会清除文件原本存储的数据。</p><h3 id="fclose-关闭文件"><a href="#fclose-关闭文件" class="headerlink" title="fclose(关闭文件)"></a>fclose(关闭文件)</h3><p>该函数的返回值是int类型的：<strong>如果关闭成功就返回0值，否则返回EOF（-1）值。</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打开</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否打开成功</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//关闭失败</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fclose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rename-重命名"><a href="#rename-重命名" class="headerlink" title="rename(重命名)"></a>rename(重命名)</h3><p><code>int rename(const char *old_filename, const char *new_filename)</code></p><p>如果成功，则返回零。如果错误，则返回 -1，并设置 errno(错误信息)。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> oldname<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"./source/a.text"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> newname<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"./source/newfile.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rename</span><span class="token punctuation">(</span>oldname<span class="token punctuation">,</span> newname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件重命名成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"错误：不能重命名该文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fflush-刷新缓冲"><a href="#fflush-刷新缓冲" class="headerlink" title="fflush(刷新缓冲)"></a>fflush(刷新缓冲)</h3><p><code>int fflush(FILE *stream)</code></p><ul><li><p>如果成功刷新缓冲区，<code>fflush()</code> 返回 0。</p></li><li><p>如果发生错误，返回 <code>EOF</code>，并且设置错误标识符（<code>ferror</code>）。</p></li><li><p>如果 <code>stream</code> 为 <code>NULL</code>，则会刷新所有输出流的缓冲区。</p></li><li><p>如果 <code>stream</code> 是文件指针，则刷新该文件流的输出缓冲区。</p></li></ul><h3 id="feof-末尾判定"><a href="#feof-末尾判定" class="headerlink" title="feof(末尾判定)"></a>feof(末尾判定)</h3><p>当设置了与流关联的文件结束标识符时，该函数返回一个非零值，否则返回零。意思就是如果读取到文件末尾，则返回一个非零值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><h3 id="fputc与fgec-单字符存储与读取"><a href="#fputc与fgec-单字符存储与读取" class="headerlink" title="fputc与fgec(单字符存储与读取)"></a>fputc与fgec(单字符存储与读取)</h3><p>成功运行时返回所存入字符的ASCII码值，否则返回EOF（-1）值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">'a'</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这时候，pf就是字母表：abcde...了</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时读取文件要用"r"的方式打开</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fputs与fgets-快速存储与读取"><a href="#fputs与fgets-快速存储与读取" class="headerlink" title="fputs与fgets(快速存储与读取)"></a>fputs与fgets(快速存储与读取)</h3><p>fgets只能读取一行的数据</p><p><code>char *fgets(char *str, int n, FILE *stream)</code></p><p>如果成功，该函数返回相同的 str 参数。如果到达文件末尾或者没有读取到任何字符，str 的内容保持不变，并返回一个空指针。</p><p>如果发生错误，返回一个空指针。 可以使用连续的fgets读取到两行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   FILE<span class="token operator">*</span> fp  <span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"abc\ndef\n"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 需要注意，这里不加rewind的话，指针仍指向文件末尾，所以fgets会返回NULL.</span><span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputs</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputs</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fprintf与fscanf-以文本存储与读取"><a href="#fprintf与fscanf-以文本存储与读取" class="headerlink" title="fprintf与fscanf(以文本存储与读取)"></a>fprintf与fscanf(以文本存储与读取)</h3><p><code>int fprintf(FILE *stream, const char *format, ...)</code></p><p><code>int fscanf(FILE *stream, const char *format, ...)</code></p><p>如果成功，该函数返回成功匹配和赋值的个数。如果到达文件末尾或发生读错误，则前者返回一个负数，后者返回 EOF。</p><p>注意，一般而言，fscanf遇到空格便会停止对这个的读取。fprnitf本质如同sprintf，把输入转化为字符形式。fscanf则是根据定义，把字符转化为要求的输出格式。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> str2<span class="token punctuation">;</span><span class="token keyword">int</span> str3<span class="token punctuation">;</span><span class="token keyword">float</span> year<span class="token punctuation">;</span>FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%s %c %d %.2f"</span><span class="token punctuation">,</span> <span class="token string">"We"</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token number">2025</span><span class="token punctuation">,</span> <span class="token number">1.53</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%s %c %d %f"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>str2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>str3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>year<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"scanf_error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read String1 |%s|\n"</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// We</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read String2 |%c|\n"</span><span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// are</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read String3 |%d|\n"</span><span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read Integer |%f|\n"</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fwrite与fread-以二进制存储与读取"><a href="#fwrite与fread-以二进制存储与读取" class="headerlink" title="fwrite与fread(以二进制存储与读取)"></a>fwrite与fread(以二进制存储与读取)</h3><p><code>size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)</code></p><p><code>size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)</code></p><ul><li><strong>ptr</strong> – 这是指向要被写入的元素数组的指针。</li><li><strong>size</strong> – 这是要被写入的每个元素的大小，以字节为单位。</li><li><strong>nmemb</strong> – 这是要写入元素的个数，每个元素的大小为 size 字节。</li><li><strong>stream</strong> – 这是指向 FILE 对象的指针，该 FILE 对象指定了一个输出流。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">float</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Student<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"students.bin"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Failed to open file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Student s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">95.5f</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Student s2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">88.0f</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>Student read_student<span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"students.bin"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Failed to open file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>read_student<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ID: %d, Name: %s, Score: %.2f\n"</span><span class="token punctuation">,</span> read_student<span class="token punctuation">.</span>id<span class="token punctuation">,</span> read_student<span class="token punctuation">.</span>name<span class="token punctuation">,</span> read_student<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指针定位"><a href="#指针定位" class="headerlink" title="指针定位"></a>指针定位</h2><h3 id="fseek-自定义偏移"><a href="#fseek-自定义偏移" class="headerlink" title="fseek(自定义偏移)"></a>fseek(自定义偏移)</h3><p><code>int fseek(FILE *stream, long int offset, int whence)</code></p><p>该函数运行成功，返回零。否则回非零值。</p><ul><li><p><strong>stream</strong> – 这是指向 FILE 对象的指针，该 FILE 对象标识了流。</p></li><li><p><strong>offset</strong> – 这是相对 whence 的偏移量，以字节为单位。</p></li><li><p><strong>whence</strong> – 这是表示开始添加偏移 offset 的位置。它一般指定为下列常量之一：</p><table><thead><tr><th align="left">常量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">SEEK_SET</td><td align="left">文件的开头</td></tr><tr><td align="left">SEEK_CUR</td><td align="left">文件指针的当前位置</td></tr><tr><td align="left">SEEK_END</td><td align="left">文件的末尾</td></tr></tbody></table></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1. %c"</span><span class="token punctuation">,</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1. %c"</span><span class="token punctuation">,</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ftell-计算偏移量"><a href="#ftell-计算偏移量" class="headerlink" title="ftell(计算偏移量)"></a>ftell(计算偏移量)</h3><p><code>long int ftell(FILE *stream)</code></p><p>成功后，返回位置指示器的当前值。失败时，返回 -1L，并将 <a href="https://legacy.cplusplus.com/errno">errno</a> 设置为系统特定的正值。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;设置偏移量fseek(pf, 0, SEEK_END);&#x2F;&#x2F;计算偏移量printf(&quot;%d&quot;, ftell(pf));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rewind-返回开头"><a href="#rewind-返回开头" class="headerlink" title="rewind(返回开头)"></a>rewind(返回开头)</h3><p>  该函数可以将所传入的文件指针设置指向文件初始位置。</p><h3 id="文件缓冲区"><a href="#文件缓冲区" class="headerlink" title="文件缓冲区"></a>文件缓冲区</h3><pre class="line-numbers language-none"><code class="language-none">int main()&#123;&#x2F;&#x2F;打开FILE* pf &#x3D; fopen(&quot;text.txt&quot;, &quot;wb&quot;);if (pf &#x3D;&#x3D; NULL)&#123;perror(&quot;fopen&quot;);return 1;&#125;&#x2F;&#x2F;存入int a &#x3D; 10000;fwrite(&amp;a, sizeof(int), 1, pf);printf(&quot;此20秒数据在文件缓冲区内，打开文件是没有数据的\n&quot;);Sleep(20000);&#x2F;&#x2F;睡眠10秒fflush(pf);&#x2F;&#x2F;此函数可以刷新缓冲区中的数据，使其存入硬盘文件中printf(&quot;此20秒数据从文件缓冲区内读入到文件中，打开文件是有数据的\n&quot;);Sleep(20000);&#x2F;&#x2F;关闭fclose(pf);pf &#x3D; NULL;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为有缓冲区的存在，C语言在操作文件的时候，需要做刷新缓冲区或者在文件操作结束的时候关闭文件。<br>如果不做，可能导致读写文件的问题。</p><p>这也就是说，如果我们不用fflush，如果我们在一个fopen里面写入、然后读取是会失败的。</p>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 文件操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习 第2期</title>
      <link href="/2025/07/11/cstudy1/"/>
      <url>/2025/07/11/cstudy1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="表示"><a href="#表示" class="headerlink" title="表示"></a>表示</h2><p>指针表示字符串，一般是无法修改的，所以得声明为如下。或者采用隐式定义等等</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pt <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span> pr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"af"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> pr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"af"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> pra<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"af"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><h3 id="ctype-h-处理单个字符"><a href="#ctype-h-处理单个字符" class="headerlink" title="ctype.h(处理单个字符)"></a>ctype.h(处理单个字符)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">有  <span class="token function">isblank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">//是否为空格、tab。注意，如果为真，则返回一个非0值！！！！，所以如果写if(isblank(a) == TRUE) 是不可取的</span><span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数字</span>等等等等。<span class="token function">tolower</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token comment">// 返回小写字母</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="memset-快速初始化"><a href="#memset-快速初始化" class="headerlink" title="memset(快速初始化)"></a>memset(快速初始化)</h3><p><code>void *memset(void *str, int c, size_t n)</code></p><ul><li><p><strong>str</strong> – 指向要填充的内存区域的指针。</p></li><li><p><strong>c</strong> – 要设置的值，通常是一个无符号字符。</p></li><li><p><strong>n</strong> – 要被设置为该值的字节数。</p></li></ul><p>该函数一般仅用于char型的快速初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span> <span class="token comment">// 引入 string.h 头文件以使用 memset</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 将 buffer 数组的前5个字节设置为字符 'A'</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">// 添加字符串终止符</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Buffer after memset: %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将 buffer 全部初始化，使用 '\0' 替代 </span>    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用'\0'确保一致性及可读性</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Buffer after memset: %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="perror-显示报错"><a href="#perror-显示报错" class="headerlink" title="perror(显示报错)"></a>perror(显示报错)</h3><p>C 库函数 <code>void perror(const char *str)</code> 把一个描述性错误消息输出到标准错误 stderr。首先输出字符串 <strong>str</strong>，后跟一个冒号，然后是一个空格。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;FILE* fp;&#x2F;* 首先重命名文件 *&#x2F;rename(&quot;file.txt&quot;, &quot;newfile.txt&quot;);&#x2F;* 现在让我们尝试打开相同的文件 *&#x2F;fp &#x3D; fopen(&quot;file.txt&quot;, &quot;r&quot;);if (fp &#x3D;&#x3D; NULL) &#123;perror(&quot;Error&quot;);return(-1);&#125;fclose(fp);return(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strchr-字符查找"><a href="#strchr-字符查找" class="headerlink" title="strchr(字符查找)"></a>strchr(字符查找)</h3><p>返回该字符在字符串中第一次出现的位置(字符指针)。</p><p>实例如下，通过该函数查找ret_val中的换行符，找到则替换为空，否则说明输入过多需要清除后续输入。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">s_gets</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> ret_val<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> find<span class="token punctuation">;</span>ret_val <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret_val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>find <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token operator">*</span>find <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ret_val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strrchr-字符查找"><a href="#strrchr-字符查找" class="headerlink" title="strrchr(字符查找)"></a>strrchr(字符查找)</h3><p>返回字符最后出现的位置</p><h3 id="strspn-字符匹配"><a href="#strspn-字符匹配" class="headerlink" title="strspn(字符匹配)"></a>strspn(字符匹配)</h3><p>检索字符串 <strong>str1</strong> 中第一个不在字符串 <strong>str2</strong> 中出现的字符下标。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> len<span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ABCDEFG019874"</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ABCD"</span><span class="token punctuation">;</span>   len <span class="token operator">=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始段匹配长度 %d\n"</span><span class="token punctuation">,</span> len <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strcspn-字符匹配"><a href="#strcspn-字符匹配" class="headerlink" title="strcspn(字符匹配)"></a>strcspn(字符匹配)</h3><p>检索字符串 <strong>str1</strong> 开头连续有几个字符都不含字符串 <strong>str2</strong> 中的字符。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> len<span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ABCDEF4960910"</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"013"</span><span class="token punctuation">;</span>   len <span class="token operator">=</span> <span class="token function">strcspn</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第一个匹配的字符是在 %d\n"</span><span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><h3 id="strtol-转换L"><a href="#strtol-转换L" class="headerlink" title="strtol(转换L)"></a>strtol(转换L)</h3><p>定义在<code>stdlib.h</code></p><p><code>long int strtol (const char* str, char** endptr, int base);</code></p><p><code>str</code>为要转化的字符串；<code>base</code>为转化的进制数，为0时默认10进制，0x采用16进制，0采用8进制；<code>endstr</code>为第一个不能转换的字符指针(就是会指向第一个不能转换为long类型的字符)，为NULL时表示不用这个参数。根据这个可以作连续转换 。</p><p><code>strtol()</code> 会扫描参数 str 字符串，<strong>跳过前面的空白字符</strong>（例如空格，tab缩进等，可以通过 isspace() 函数来检测），直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(’\0’)结束转换，并将结果返回。<strong>如果不能转换或者 <code>str</code> 为空字符串，那么返回 <code>0(0L)</code>；</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> li<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> nm<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"202 22 2 1 3"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p_end<span class="token punctuation">;</span>    p_end <span class="token operator">=</span> nm<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>p_end<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p_end<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld\n"</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strtok-切割字符串"><a href="#strtok-切割字符串" class="headerlink" title="strtok(切割字符串)"></a>strtok(切割字符串)</h3><p>定义在<code>string.h</code>中</p><p><code>char *strtok(char *str, const char *delim);</code></p><p><code>str</code>：要分割的字符串，第一次调用时传入需要分割的字符串，<strong>之后传入 NULL</strong>。NULL表示：函数将在同⼀个字符串中被保存的位置开始，查找下⼀个标记。（如果字符串中不存在更多的标记，则返回 NULL 指针）</p><p><code>delim</code>：分隔符字符串，用于指定分隔字符串的<strong>分隔符集合</strong>。</p><p><code>strtok</code>函数找到<code>str</code>中的下⼀个标记，并将其⽤ \0 结尾，返回⼀个指向这个标记的指针。</p><p>（注：strtok函数会改变被操作的字符串，所以在使⽤strtok函数切分的字符串⼀般都是临时拷贝的内容并且可修改。）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"High-Earphone@qq.com.666@.gaoerji"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> deli<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-@."</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>output<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">strtok</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> deli<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> deli<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fgets-字符输入"><a href="#fgets-字符输入" class="headerlink" title="fgets(字符输入)"></a>fgets(字符输入)</h3><p>定义在<code>stdio.h</code>中</p><p><code>char *fgets(char *str, int n, FILE *stream)</code> </p><p>fgets会储存换行符（当然，如果你输入超过n，换行符会没地方储存），最大读取为n-1个字符，达到最大值第n个字符会赋空字符；返回值为指向str的指针，若读取到文件结尾，返回NULL</p><p>第三个参数为<strong>读取</strong>的文件，这里用stdin从键盘读取，后续会在文件操作中介绍</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\n'</span> <span class="token operator">&amp;&amp;</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>  <span class="token comment">// 如果先遇到换行符，换成空字符； 先遇到空字符，else便丢弃多的字符</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>   <span class="token comment">//这个操作就是说，一直getchar，知道传入的是‘\n’</span><span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//清除缓冲区</span><span class="token function">puts</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 上面一番操作使得str一定没有换行符</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fputs-字符输出"><a href="#fputs-字符输出" class="headerlink" title="fputs(字符输出)"></a>fputs(字符输出)</h3><p><code>int fputs(const char *str, FILE *stream)</code></p><p>fputs不会在输入末尾添加换行符，puts会。第二个为要<strong>写入</strong>数据的文件（把str puts 到 FILE中），在屏幕上用stdout。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"nihao"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自定义s-gets输入函数"><a href="#自定义s-gets输入函数" class="headerlink" title="自定义s_gets输入函数"></a>自定义s_gets输入函数</h3><p>这个函数读取整行输入并用空字符代替换行符。读取n-1个字符，并丢弃剩下的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">s_gets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span> ret_val<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ret_val <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret_val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\n'</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>   st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>       <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">return</span> ret_val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sprintf-字符合成"><a href="#sprintf-字符合成" class="headerlink" title="sprintf(字符合成)"></a>sprintf(字符合成)</h3><p><code>int sprintf(char *str, const char *format, ...)</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//用法： sprinf(str, "%s, %d, %c", stri, 2, c);</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> output <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>output<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span><span class="token string">"%c, %s,%d,%ld, %f"</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5L</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里的output溢出了，</span>    <span class="token comment">//注意，双引号里面的 逗号 空格 均被加入进了output中</span><span class="token function">fputs</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放内存</span><span class="token punctuation">&#125;</span><span class="token comment">//可以发现这里产生了内存溢出，output[9]='空格';</span><span class="token comment">//下面是一种动态计算空间方法：</span>    <span class="token comment">// 计算所需空间</span>    <span class="token keyword">int</span> needed <span class="token operator">=</span> <span class="token function">snprintf</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"%c, %s,%d,%ld, %f"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> stri<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5L</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> output <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>needed <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +1 为终止符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>output<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token string">"%c, %s,%d,%ld, %.1f"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> stri<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5L</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>snprintf中的第2个参数表示，最多写入size-1个字符。</p><h3 id="sscanf-字符转换"><a href="#sscanf-字符转换" class="headerlink" title="sscanf(字符转换)"></a>sscanf(字符转换)</h3><p>对于sprintf函数它可以将各种数据以各种格式（如%d，%s，%c等等）转换为字符串类型输入到char*类型的str参数中。    </p><p> 对于sscanf函数它可以将字符串类型的str参数的数据以各种格式（如%d，%s，%c等等）输出到各变量中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">float</span> point<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> l <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">15</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">88.9f</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> j <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//将各类型数据转换为字符串</span><span class="token function">sprintf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">"%d %s %.1f"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>age<span class="token punctuation">,</span> l<span class="token punctuation">.</span>name<span class="token punctuation">,</span> l<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串数据转换为各种类型</span><span class="token function">sscanf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">"%d %s %f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %s %.1f"</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span>age<span class="token punctuation">,</span> j<span class="token punctuation">.</span>name<span class="token punctuation">,</span> j<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strncat-字符拼接"><a href="#strncat-字符拼接" class="headerlink" title="strncat(字符拼接)"></a>strncat(字符拼接)</h3><p><code>char *strncat(char *dest, const char *src, size_t n)</code></p><ul><li><strong>dest</strong> – 指向目标数组，该数组包含了一个 C 字符串，且足够容纳追加后的字符串，包括额外的空字符。</li><li><strong>src</strong> – 要追加的字符串。</li><li><strong>n</strong> – 要追加的最大字符数。（注意这里并减1）</li></ul><p>简单的形式为strcat，但是可能溢出内存。拼接后的str1为<code>&quot;ab12345\0&quot;</code>，也就是说，会自带空字符在末尾。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">snprintf</span><span class="token punctuation">(</span>str0<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"123456780"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncat</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str0<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="strncpy-字符复制"><a href="#strncpy-字符复制" class="headerlink" title="strncpy(字符复制)"></a>strncpy(字符复制)</h3><p><code>char *strncpy(char *dest, const char *src, size_t n)</code></p><ul><li><strong>dest</strong> – 指向用于存储复制内容的目标数组。</li><li><strong>src</strong> – 要复制的字符串。</li><li><strong>n</strong> – 要从源中复制的字符数。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">   <span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token function">memset</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">"This is runoob.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strncpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//desk 最终的目标字符串： This is ru </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strncmp-字符比较"><a href="#strncmp-字符比较" class="headerlink" title="strncmp(字符比较)"></a>strncmp(字符比较)</h3><p><code>int strncmp(const char *str1, const char *str2, size_t n)</code></p><p>比较前n个字符有么有相同的。</p><ul><li>如果返回值 &lt; 0，则表示 str1 小于 str2。</li><li>如果返回值 &gt; 0，则表示 str1 大于 str2。</li><li>如果返回值 &#x3D; 0，则表示 str1 等于 str2。</li></ul><p>原始为<code>strcmp</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token string">"ac"</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> b <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> out <span class="token operator">=</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">fmin</span><span class="token punctuation">(</span><span class="token function">strlen</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strlen-字符长度"><a href="#strlen-字符长度" class="headerlink" title="strlen(字符长度)"></a>strlen(字符长度)</h3><p>返回字符串的长度，但不计算空字符‘\0’ </p><h3 id="strstr-字符串查找"><a href="#strstr-字符串查找" class="headerlink" title="strstr(字符串查找)"></a>strstr(字符串查找)</h3><p>返回字符串第一次出现的位置</p>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 字符函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习 第1期</title>
      <link href="/2025/07/10/cstudy0/"/>
      <url>/2025/07/10/cstudy0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="char与int之间的关系"><a href="#char与int之间的关系" class="headerlink" title="char与int之间的关系"></a>char与int之间的关系</h2><p>char就是int。如何理解、分辨字符和整型之间的区别？ASCII码把int和char联系到了一起。char型就是ASCII码的十进制。简单来说，可以用int表示char。</p><p>字符：如 ‘a’, ‘1’ 等，都可以看作十进制的整型（具体值对应ASCII码中）。 </p><pre class="line-numbers language-none"><code class="language-none">int str &#x3D; &#39;\10&#39;; &#x2F;&#x2F; 这里就的\10 就是八进制的解码，所以对应十进制的8；int str &#x3D; &#39;a&#39; &#x2F;&#x2F;那么 str储存的就是a对应的int。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>总而言之，字符就是int。</p><h2 id="typedef的另类使用"><a href="#typedef的另类使用" class="headerlink" title="typedef的另类使用"></a>typedef的另类使用</h2><p>参考链接：<a href="https://blog.csdn.net/Andrewniu/article/details/80566324">C&#x2F;C++ typedef用法详解（真的很详细）-CSDN博客</a> |</p><p><strong>typedef中声明的类型在变量名的位置出现！！于是可以理解函数指针中的定义</strong></p><p><code>typedef</code> 是 C 语言中一个非常有用的关键字，它的主要作用是为现有的数据类型定义一个新的别名。通过 <code>typedef</code>，可以让代码更具可读性、简洁性和可维护性。以下是 <code>typedef</code> 在 C 语言中的常见运用场景及其详细说明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> Integer<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">float</span> Real<span class="token punctuation">;</span>Integer age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>       <span class="token comment">// 等价于 int age = 25;</span>Real salary <span class="token operator">=</span> <span class="token number">5000.50</span><span class="token punctuation">;</span>  <span class="token comment">// 等价于 float salary = 5000.50;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">*</span> IntPtr<span class="token punctuation">;</span>IntPtr p1<span class="token punctuation">,</span> p2<span class="token punctuation">;</span>  <span class="token comment">// 等价于 int *p1, *p2;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> Vector<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 定义一个包含 10 个 int 元素的数组类型</span>Vector v<span class="token punctuation">;</span>  <span class="token comment">// 等价于 int v[10];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 定义结构体并为其定义别名</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Point<span class="token punctuation">;</span>Point p1<span class="token punctuation">;</span>  <span class="token comment">// 等价于 struct &#123; int x; int y; &#125; p1;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>MathFunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 定义一个函数指针类型</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MathFunc func <span class="token operator">=</span> add<span class="token punctuation">;</span>  <span class="token comment">// 使用别名声明函数指针</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Result: %d\n"</span><span class="token punctuation">,</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 5</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> RED<span class="token punctuation">,</span> GREEN<span class="token punctuation">,</span> BLUE <span class="token punctuation">&#125;</span> Color<span class="token punctuation">;</span>Color c <span class="token operator">=</span> RED<span class="token punctuation">;</span>  <span class="token comment">// 等价于 enum &#123; RED, GREEN, BLUE &#125; c = RED;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> year<span class="token punctuation">;</span>    <span class="token keyword">int</span> month<span class="token punctuation">;</span>    <span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Date<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Date birthday<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Person<span class="token punctuation">;</span>Person p1<span class="token punctuation">;</span>  <span class="token comment">// 使用别名声明复杂结构体变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*do something*/</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fp f1 <span class="token operator">=</span> test<span class="token punctuation">;</span> <span class="token comment">//表达式1</span>    fp f2 <span class="token operator">=</span> <span class="token operator">&amp;</span>test<span class="token punctuation">;</span><span class="token comment">//表达式2</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，声明了返回类型为int，接受两个int类型参数的函数指针f1和f2，分别给它们进行了赋值。表达式1和表达式2在作用上并没有什么区别。因为函数名在被使用时总是由编译器把它转换为函数指针，而前面加上&amp;不过显式的说明了这一点罢了。</p><hr><h2 id="动态内存分配malloc的再探索与形参实参的研究"><a href="#动态内存分配malloc的再探索与形参实参的研究" class="headerlink" title="动态内存分配malloc的再探索与形参实参的研究"></a>动态内存分配malloc的再探索与形参实参的研究</h2><p>参考链接：<a href="https://blog.csdn.net/Dontla/article/details/117886318">C语言visual studio警告：取消对NULL指针“p”的引用_取消对null指针的引用怎么解决-CSDN博客</a> |<a href="https://blog.csdn.net/weixin_40162095/article/details/113992025">看完这篇文章一定弄懂C语言数组作为函数参数的用法_使用可变长度的数组作为函数参数-CSDN博客</a></p><h3 id="形参和实参：malloc为例"><a href="#形参和实参：malloc为例" class="headerlink" title="形参和实参：malloc为例"></a>形参和实参：malloc为例</h3><p><strong>tip:  free指针后最好重置指针。</strong></p><p>中午突然不明白C语言中的形参和实参在函数中的传递规律，由于free()的使用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">clear_p</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>     p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 倘若 没有这一句，我们会发现</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span><span class="token number">2</span>；    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">clear_p</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>经过上面的代码分析，我们可以发现，main 中return 1； printf的两个数分别为1 和 * ；这说明在clear_p中，free改变了传入的参数，而p &#x3D; NULL并未影响传入的参数。这是为什么呢？？</strong> </p><p>首先，要明确C语言中的参数传递是值传递。当调用clear_p(p)时，传**递的是指针p的值，也就是内存地址的副本。**在函数内部，这个副本被free释放，但main中的p本身并没有被修改，仍然指向原来的地址，此时这个指针变成了悬垂指针（野指针），因为它指向的内存已经被释放。</p><p>但是，free操作本身是成功的，因为它释放的是指针所指向的内存块，而不管是通过原始指针还是副本指针。即使传递的是指针的副本，free函数会根据传入的地址来释放对应的内存。因此，main中的p所指向的内存确实被正确释放了。</p><p>不过，main中的p变量本身的值（即存储的地址）并没有改变，仍然指向已经被释放的内存区域。这就是为什么在之后检查p !&#x3D; NULL时，条件成立，返回1的原因，因为clear_p函数中的p &#x3D; NULL只是修改了函数内部的副本，不影响main中的p。</p><p>自此，我也了解了函数中形参传递了</p><p>那，为何<code>fun(int *p)</code>也能改变p？？，因为我们在调用fun时，传入的参数p实际上是&amp;p[0]，也就是地址。也就是说，形参拷贝了一份p[0]地址的副本，形参确实不会改变实参的值（即 p所指向的地址），但我们对其解引用（*p）时，还是对同一个地址操作，那自然会改变实参。</p><h3 id="函数介绍：realloc"><a href="#函数介绍：realloc" class="headerlink" title="函数介绍：realloc"></a><strong>函数介绍：realloc</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token function">realloc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的realloc为重新分配内存，一般会比原来分配的要大。成功返回新地址，失败返回NULL。</p><p>注意，realloc会自动释放原有内存。所以不用free</p><h2 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h2><p>其原型void *calloc(size_t n, size_t size)；<br>其比malloc函数多一个参数，并不需要人为的计算空间的大小，比如如果他要申请20个int类型空间，会int *p &#x3D; (int *)calloc(20, sizeof(int)）,这样就省去了人为空间计算的麻烦。但这并不是他们之间最重要的区别，malloc申请后空间的值是随机的，并没有进行初始化，而calloc却在申请后，对空间逐一进行初始化，并设置值为0;</p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p><strong>定义</strong>，这里定义了pf为一个指针，它指向一个返回类型为void，传入参数为char *的函数。</p><pre class="line-numbers language-none"><code class="language-none">void (*pf) (char *)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>简单使用</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">rount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> fun1<span class="token punctuation">;</span> <span class="token comment">//正确pf = rount; // 错误</span><span class="token comment">//下面调用</span><span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span>mis<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  等价于: fun1(mis)</span><span class="token function">pf</span><span class="token punctuation">(</span>mis<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>把函数指针作为函数参数</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span>fun1<span class="token punctuation">,</span> mis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> mis<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>else</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">show</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>意思是传入sqrt的返回值。<span class="token function">show</span><span class="token punctuation">(</span>sqrt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传入函数地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>使用示例</strong></p><pre class="line-numbers language-none"><code class="language-none">typedef int (*func)(ElemType, ElemType);int f_compare(ElemType input, ElemType judge);void LocateElem(func man);int main()&#123;    ...   func f1 &#x3D; f_compare;   LocateElem(f1);  ...return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归，无疑是非常难以理解和抽象的东西，尤其是在数据结构中的三种遍历方法中。并且其占用的内存很多，使程序运行变慢。下面让我门来理解递归的内在。</p><p>下面是一个简单的递归求阶层</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//递归求阶乘</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">fac</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，其一般有两种返回值，一种调用自己，为递归；另一种为停止条件，就是递归结束的条件。这样看，上面的代码也就很容易理解了。</p><p>或者更精妙一点，引入一个参数，消除返回值中的乘积项。这样就减少了一半的递归，称作尾递归方法。(虽然我个人感觉理论速度没有区别)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//acc为阶乘的值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//递归求阶乘</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> acc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> acc<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">fac</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">*</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻流社的优化日志</title>
      <link href="/2025/07/09/diary/"/>
      <url>/2025/07/09/diary/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="优化日志（更新于20250926"><a href="#优化日志（更新于20250926" class="headerlink" title="优化日志（更新于20250926"></a>优化日志（更新于20250926</h1><h2 id="2025-29-26"><a href="#2025-29-26" class="headerlink" title="2025-29-26"></a>2025-29-26</h2><p>下架大部分和学习技术无关的文章</p><h2 id="2025-09-05"><a href="#2025-09-05" class="headerlink" title="2025-09-05"></a>2025-09-05</h2><p>PS修改banner图片jpg为webp格式。</p><h2 id="2025-08-26"><a href="#2025-08-26" class="headerlink" title="2025-08-26"></a>2025-08-26</h2><p>优化了首页横幅（banner）和卡片图片（featureimages）的大小，其实就是压缩到了1-2百kb，可能看起来有点糊但是无疑极大优化了加载速度</p><p>bing成功收录网站，可以通过bing检索到本站的某些页面。（因为目前不知道如何优化SEO，毕竟博客的标题、描述是不可控的）</p><h2 id="2025-07-09"><a href="#2025-07-09" class="headerlink" title="2025-07-09"></a>2025-07-09</h2><p>将主题由Next7.8.0更换为Matery。重新修改所有文章的内容等等。删除部分过时文章，待重新优化部分长篇文章。删除新增的vip音乐（以前加的音乐好多都成vip了），添加新音乐（全是星铁的）</p><h2 id="2025-06-16"><a href="#2025-06-16" class="headerlink" title="2025-06-16"></a>2025-06-16</h2><p>添加规则，增强了网站安全性。删除部分过时无用文章。修改所有文章显示布局，使其布局显示更好。</p><h2 id="2024-10-09"><a href="#2024-10-09" class="headerlink" title="2024-10-09"></a>2024-10-09</h2><p>删除部分文章，优化了部分文章的图片大小（文件大小）。</p><h2 id="2024-08-28"><a href="#2024-08-28" class="headerlink" title="2024-08-28"></a>2024-08-28</h2><p>抽空把所有的文字加粗了一下，便于看的更清楚。</p><h2 id="2024-08-16"><a href="#2024-08-16" class="headerlink" title="2024-08-16"></a>2024-08-16</h2><p>删除了部分错乱歌曲和大部分纯音乐。</p><p>删除了半数以上的文章</p><h2 id="2024-08-14"><a href="#2024-08-14" class="headerlink" title="2024-08-14"></a>2024-08-14</h2><p>将DNS解析从阿里云换成了Cloudflare，使得网站更加流畅，加载不那么卡顿。</p><h2 id="2024-08-13"><a href="#2024-08-13" class="headerlink" title="2024-08-13"></a>2024-08-13</h2><p>删除了音乐插件中部分只能试听和错乱的歌曲</p>]]></content>
      
      
      <categories>
          
          <category> 优化日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Matery主题的一些设置（持续更新</title>
      <link href="/2025/07/08/20250708/"/>
      <url>/2025/07/08/20250708/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：个人关于Matery主题的一些设置<span id="more"></span>。</p><h2 id="该主题的一些问题（本文未解决"><a href="#该主题的一些问题（本文未解决" class="headerlink" title="该主题的一些问题（本文未解决"></a>该主题的一些问题（本文未解决</h2><ol><li>音乐插件无法全局播放，每次刷新切换等都会重新加载播放器，十分不连贯。目前暂未找到简单、好的解决方法。（听说有类似pjax的方法，待日后学习研究）</li><li>首页文章卡片高度不一致，可以发现，如果文章的标签、标题、分类、摘要预览不一致（比如字数相差过大），会产生卡片高度不一致，无法对齐，十分不美观</li><li>还有很多其他方面不是很友好，相关修改下面会提及。</li><li>文章设置摘要可以通过插入 <code>&lt;!-- more --&gt;</code> 来实现，但是，如果设置了cover: true，即设置了首页轮播，那么就得设置summary。因为此时上面的方法失效。</li><li>插入图片时，图片名字不能含有空格，否则在网页上无法显示</li></ol><h2 id="设置文章密码"><a href="#设置文章密码" class="headerlink" title="设置文章密码"></a>设置文章密码</h2><p>主题自带的密码保护并不好用，有泄漏文章摘要、可以跳过密码看到部分文章内容等问题。所以这里采用hexo-blog-encrypt插件。先把主题配置文件（_config.yml）的这个功能改为false。然后通过npm安装插件（具体可自行搜索，一大堆教程）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">verifyPassword</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment">#由于其主题自带的不是很好用，很容易被泄密。所以推荐使用hexo-blog-encrypt插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后在博客配置文件中添加。只要添加前两行就可以了，当然还可以添加其他设置，需要参考原项目的使用说明。</p><pre class="line-numbers language-none"><code class="language-none"># Security## 密码encrypt:   enable: true    abstract: 这是一篇加密文章。  #这两个可以不要，有默认的  message: 请输入密码或者邮件联系.  #<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于使用，有很多独特的方法。这里就介绍常用的（其他感觉用不太上）。直接写文章时，在title那个界面，加一个”password: 你的密码“就可以了（没有引号）。密码直接正常输，无需加密。</p><p>最后，需要注意一些bug。倘若你设置了cover: true，并且summary为空，那么首页轮播中，文章摘要便会显示该篇文章密码的某种加密格式(类似asdfjsdgfsg…)，正规解决方法未找到。所以，要主动设置summary的内容。</p><h2 id="跳转指定界面"><a href="#跳转指定界面" class="headerlink" title="跳转指定界面"></a>跳转指定界面</h2><p>引用链接<a href="https://github.com/blinkfox/hexo-theme-matery/issues/935">关于文章过多时跳转指定页面 </a></p><p>将 layout_partial\paging.ejs文件代码修改如下，即可得到跳转指定页效果。可以自定义部分内容</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container paging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col s6 m4 l4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>prev_link<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span>               <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left btn-floating btn-large waves-effect waves-light bg-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-angle-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left btn-floating btn-large disabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-angle-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-info col m4 l4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center-align page-nav-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">                 <span class="token keyword">let</span> showPages <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 显示的页码数量</span>                <span class="token keyword">let</span> currentPage <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> totalPages <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> start <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> currentPage <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>showPages<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>totalPages<span class="token punctuation">,</span> start <span class="token operator">+</span> showPages <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> showPages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    start <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> end <span class="token operator">-</span> showPages <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                </span><span class="token delimiter punctuation">%></span></span>                                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-num waves-effect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-dots<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> currentPage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-num active bg-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> i </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>base <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> <span class="token string">'/page/'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span>                            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-num waves-effect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> i </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> totalPages <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-dots<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> totalPages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>base <span class="token operator">+</span> <span class="token string">'/page/'</span> <span class="token operator">+</span> totalPages <span class="token operator">+</span> <span class="token string">'/'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span>                        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-num waves-effect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> totalPages </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col s6 m4 l4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>next_link<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span>               <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right btn-floating btn-large waves-effect waves-light bg-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-angle-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right btn-floating btn-large disabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-angle-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.page-nav-wrapper</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>    <span class="token property">gap</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.page-num</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">min-width</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 6px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #555<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all 0.3s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.page-num:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.page-num.active</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.page-dots</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 601px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">.page-nav-wrapper</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设定文章模板"><a href="#设定文章模板" class="headerlink" title="设定文章模板"></a>设定文章模板</h2><p>在博客根目录的scaffolds–post.md中，即可编辑自己的模板。选择根文件打开<code>post_asset_folder: true</code> （当然，如果采用一些其他图片引用方法可以不用）</p><p>这样通过hexo new 文章名字。便可以自动在source – _post文件夹下生成文档和文件夹（后者用于存放文章内部引用的图片）</p><h2 id="代码块高亮显示"><a href="#代码块高亮显示" class="headerlink" title="代码块高亮显示"></a>代码块高亮显示</h2><p>根目录配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">syntax_highlighter</span><span class="token punctuation">:</span> prismjs   <span class="token comment">#代码块高亮，prismjs为主题支持。</span><span class="token comment">#highlight:</span> <span class="token comment"># enable: false</span>  <span class="token comment">#line_number: true</span> <span class="token comment"># auto_detect: false</span> <span class="token comment"># tab_replace: ''</span>  <span class="token comment">#wrap: true</span> <span class="token comment"># hljs: false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题配置如下</p><pre class="line-numbers language-none"><code class="language-none"># 代码块相关code:  lang: true # 代码块是否显示名称  copy: true # 代码块是否可复制  shrink: true # 代码块是否可以收缩  break: false # 代码是否折行，就是类似自动换行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再于my.css中添加以下代码，以显示行号问题。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 这里是行号显示*/</span><span class="token selector">.line-numbers-rows</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-right-width</span><span class="token punctuation">:</span> 0px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.line-numbers</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1.5rem 1.5rem 1.5rem 3.5rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem 0 <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #272822<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 0.35rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，发现鼠标拖拉选中会出现文本选择的高亮范围和实际的行高不一致的问题。解决方法为于\themes\matery\source\libs\prism中的prism.css</p><p>修改（具体原理不知）引用链接<a href="https://github.com/blinkfox/hexo-theme-matery/issues/928">代码块显示问题</a></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">pre[class*=language-].line-numbers>code</span> <span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> 这里要改！！<span class="token property">white-space</span><span class="token punctuation">:</span> inherit<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">pre[class*=language-].line-numbers>code</span> <span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span> inherit<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章设置成hide-true-不生效。（有bug！"><a href="#文章设置成hide-true-不生效。（有bug！" class="headerlink" title="文章设置成hide: true 不生效。（有bug！"></a>文章设置成<code>hide: true</code> 不生效。（有bug！</h2><h3 id="最新bug"><a href="#最新bug" class="headerlink" title="最新bug"></a>最新bug</h3><p>采用下面的方法会导致网站主页文章排版bug！！！（隐藏文章导致本页末尾留空，下一页的文章不会填充进本页</p><p>找到<code>E:\blog_matery\themes\matery\layout\index.ejs</code>该配置文件，</p><p>将下面这部分（注意，复原时这里的注释不能留！，它仍然会解析代码，因为注释不是ejs的注释语法（vscode的锅</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!-- 所有文章卡片 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articles<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container articles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row article-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> page<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">post</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>         <span class="token comment">&lt;!-- <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>hide <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article col s12 m6 l4<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>path<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>img<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>img<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>responsive-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> post<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">                                <span class="token keyword">var</span> featureimg <span class="token operator">=</span> <span class="token string">'/medias/featureimages/0.jpg'</span><span class="token punctuation">;</span>                                <span class="token keyword">var</span> featureImages <span class="token operator">=</span> theme<span class="token punctuation">.</span>featureImages<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>featureImages <span class="token operator">||</span> featureImages<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">return</span> featureimg<span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                                featureimg <span class="token operator">=</span> featureImages<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token operator">%</span> featureImages<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>                            </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>featureimg<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>responsive-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> post<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> post<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content article-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>summary block-with-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>summary <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> post<span class="token punctuation">.</span>summary </span><span class="token delimiter punctuation">%></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>excerpt <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>excerpt<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">strip_html</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>excerpt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>content <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>content<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">strip_html</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>far fa-clock fa-fw icon-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>date<span class="token punctuation">,</span> config<span class="token punctuation">.</span>date_format<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>categories <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-bookmark fa-fw icon-category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">category</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span>path<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> category<span class="token punctuation">.</span>name </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>author <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>author<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-user fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> post<span class="token punctuation">.</span>author </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-user fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> config<span class="token punctuation">.</span>author </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>tags <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-action article-tags<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> post<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">tag</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>path<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chip bg-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> tag<span class="token punctuation">.</span>name </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token comment">&lt;!-- <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span> --></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改为下面即可——本质就是添加了上面注释的一个简单的if条件</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articles<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container articles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row article-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> page<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">post</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>hide <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article col s12 m6 l4<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>path<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>img<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>img<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>responsive-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> post<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">                                <span class="token keyword">var</span> featureimg <span class="token operator">=</span> <span class="token string">'/medias/featureimages/0.jpg'</span><span class="token punctuation">;</span>                                <span class="token keyword">var</span> featureImages <span class="token operator">=</span> theme<span class="token punctuation">.</span>featureImages<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>featureImages <span class="token operator">||</span> featureImages<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">return</span> featureimg<span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                                featureimg <span class="token operator">=</span> featureImages<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token operator">%</span> featureImages<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>                            </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>featureimg<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>responsive-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> post<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> post<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content article-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>summary block-with-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>summary <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> post<span class="token punctuation">.</span>summary </span><span class="token delimiter punctuation">%></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>excerpt <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>excerpt<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">strip_html</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>excerpt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>content <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>content<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">strip_html</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>far fa-clock fa-fw icon-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>date<span class="token punctuation">,</span> config<span class="token punctuation">.</span>date_format<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>categories <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-bookmark fa-fw icon-category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">category</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span>path<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> category<span class="token punctuation">.</span>name </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>author <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>author<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-user fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> post<span class="token punctuation">.</span>author </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-user fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> config<span class="token punctuation">.</span>author </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>tags <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-action article-tags<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> post<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">tag</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>path<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chip bg-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> tag<span class="token punctuation">.</span>name </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Matery主题引入Pjax（失败！！！发现重大bug"><a href="#Matery主题引入Pjax（失败！！！发现重大bug" class="headerlink" title="Matery主题引入Pjax（失败！！！发现重大bug"></a>Matery主题引入Pjax（失败！！！发现重大bug</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>参考链接：<a href="https://cloud.tencent.com/developer/article/1938971">Matery主题添加Pjax-腾讯云开发者社区-腾讯云</a></p><p>好处有很多，比如音乐全局播放，界面加载更快。然而，也带来了居多问题，因为很多地方的代码都需要修改。下面分享我的引入方法——目前暂未发现什么很大的bug</p><ol><li><code>E:\blog_matery\themes\matery\layout\_widget</code> 处新建 <code>pjax.ejs</code>文件，输入：</li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>pjax<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></span><span class="token delimiter punctuation">%></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"https://cdn.jsdelivr.net/npm/pjax/pjax.min.js"</span><span class="token punctuation">,</span>loadPjax<span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">loadPjax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> pjax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pjax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">selectors</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"head title"</span><span class="token punctuation">,</span>                    <span class="token string">'head meta[name="keywords"]'</span><span class="token punctuation">,</span>                    <span class="token string">'head meta[name="description"]'</span><span class="token punctuation">,</span>                    <span class="token string">"main#main_wrap"</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">cacheBust</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Pjax请求错误时，跳转到404页面</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pjax:error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>request<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                pjax<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">'/404.html'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"><span class="token punctuation">&#125;</span></span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>E:\blog_matery\themes\matery\layout\layout.ejs </code>处，将 原来单个的body ，添加main头尾。</li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main_wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> body </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在底部添加一行代码</li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>instantpage<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>instantpage<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/pjax'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>  <span class="token comment">&lt;!--添加的代码！！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>最后在主题配置文件，随便找个地方（比如底部）添加</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">pjax</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><p>正如参考链接所给出的一样，我们需要修改_widget下的ejs文件。因为本站没有用到说说、谷歌统计、评论。所以仅仅更改了</p><ol><li>标签页面（tags）的词云（tag-wordcloud.ejs）</li><li>分类页面（categories）雷达图(category-radar.ejs)</li><li>归档页面(archives)统计图(post-calendar.ejs)</li><li>关于页面（about）的统计图(post-charts.ejs)</li></ol><p>post-detail-toc.ejs<strong>并未修改</strong>，因为没有发现有什么问题。下面的修改均是借助的deepseek（目前看起来没有什么bug</p><ol><li><strong>tag-wordcloud.ejs</strong></li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>css<span class="token punctuation">.</span>jqcloud<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#tag-wordcloud</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 添加这个样式确保容器正确重置 */</span>    <span class="token selector">#tag-wordcloud-wrapper</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 添加一个包装容器 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag-wordcloud-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag-wordcloud<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 封装标签云初始化函数</span>    <span class="token keyword">function</span> <span class="token function">initTagCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 确保jQCloud加载完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>jQCloud <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>jqcloud<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">loadTagCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">loadTagCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">loadTagCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 完全重建DOM结构 - 这是关键修复</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#tag-wordcloud-wrapper'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;div id="tag-wordcloud" class="card-content">&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 准备标签数据</span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">        <span class="token keyword">let</span> tagWordArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        site<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tagWordArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'text'</span><span class="token operator">:</span> tag<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-property property">'weight'</span><span class="token operator">:</span> tag<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string-property property">'link'</span><span class="token operator">:</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token function">url_for</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> tagWords <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tagWordArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token delimiter punctuation">%></span></span>        <span class="token comment">// 初始化标签云</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#tag-wordcloud'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jQCloud</span><span class="token punctuation">(</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> tagWords </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">autoResize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">removeOverflowing</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token function-variable function">afterCloudRender</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Tag cloud rendered successfully'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 窗口大小变化时重新渲染</span>        <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'resize.tagcloud'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'resize.tagcloud'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#tag-wordcloud'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jQCloud</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始加载</span>    <span class="token function">initTagCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Pjax重载处理</span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pjax:complete'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 添加延迟确保完全卸载</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>initTagCloud<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>category-radar.ejs</strong></li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#category-radar</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 360px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-radar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 封装雷达图初始化函数</span>    <span class="token keyword">function</span> <span class="token function">initRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 确保echarts加载完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> echarts <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>echarts<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">loadRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">loadRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">loadRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 销毁旧实例（如果存在）</span>        <span class="token keyword">let</span> radarDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'category-radar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>radarDom <span class="token operator">&amp;&amp;</span> echarts<span class="token punctuation">.</span><span class="token function">getInstanceByDom</span><span class="token punctuation">(</span>radarDom<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            echarts<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span>radarDom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">let</span> radarChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>radarDom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">            <span class="token keyword">var</span> categories <span class="token operator">=</span> site<span class="token punctuation">.</span>categories<span class="token punctuation">;</span>            <span class="token keyword">var</span> radarValueArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            categories<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">category</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                radarValueArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> radarValueArr<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> radarValueArr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> indicatorArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            categories<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">category</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                indicatorArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'name'</span><span class="token operator">:</span> category<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-property property">'max'</span><span class="token operator">:</span> max<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> indicatorData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>indicatorArr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> radarValueData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>radarValueArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token delimiter punctuation">%></span></span>        <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"categoryRadarTitle"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>                    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">22</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">radar</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#3C4858'</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">indicator</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> indicatorData </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>                <span class="token literal-property property">nameGap</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>                <span class="token literal-property property">center</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'50%'</span><span class="token punctuation">,</span><span class="token string">'55%'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token string">'66%'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'radar'</span><span class="token punctuation">,</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#3ecf8e'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">areaStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'default'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span> <span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">value</span> <span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> radarValueData </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>                        <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"categoryNumber"</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>'</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        radarChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 响应式调整</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            radarChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始加载</span>    <span class="token function">initRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Pjax重载处理</span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pjax:complete'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">initRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>post-calendar.ejs</strong></li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container archive-calendar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-calendar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 封装日历热力图初始化函数</span>    <span class="token keyword">function</span> <span class="token function">initPostCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 确保echarts加载完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> echarts <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>echarts<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">loadPostCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">loadPostCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">loadPostCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 销毁旧实例（如果存在）</span>        <span class="token keyword">let</span> calendarDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'post-calendar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>calendarDom <span class="token operator">&amp;&amp;</span> echarts<span class="token punctuation">.</span><span class="token function">getInstanceByDom</span><span class="token punctuation">(</span>calendarDom<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            echarts<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span>calendarDom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">let</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>calendarDom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">        <span class="token keyword">var</span> nameMap <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>language<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'zh'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'cn'</span> <span class="token operator">:</span> <span class="token string">'en'</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> titleText <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>language<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'zh'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'文章日历'</span> <span class="token operator">:</span> <span class="token string">'Post Calendar'</span><span class="token punctuation">;</span>        <span class="token comment">// calculate range.</span>        <span class="token keyword">var</span> startDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'years'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> endDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> rangeArr <span class="token operator">=</span> <span class="token string">'["'</span> <span class="token operator">+</span> startDate<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'", "'</span> <span class="token operator">+</span> endDate<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'"]'</span><span class="token punctuation">;</span>        <span class="token comment">// post and count map.</span>        <span class="token keyword">var</span> dateMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        site<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> date <span class="token operator">=</span> post<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> count <span class="token operator">=</span> dateMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            dateMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> count <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> count <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// loop the data for the current year, generating the number of post per day</span>        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> datePosts <span class="token operator">=</span> <span class="token string">'['</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> dayTime <span class="token operator">=</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> time <span class="token operator">=</span> startDate<span class="token punctuation">;</span> time <span class="token operator">&lt;=</span> endDate<span class="token punctuation">;</span> time <span class="token operator">+=</span> dayTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            datePosts <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> datePosts <span class="token operator">+</span> <span class="token string">'["'</span> <span class="token operator">:</span> datePosts <span class="token operator">+</span> <span class="token string">', ["'</span><span class="token punctuation">)</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">'", '</span>                    <span class="token operator">+</span> <span class="token punctuation">(</span>dateMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">?</span> dateMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        datePosts <span class="token operator">+=</span> <span class="token string">']'</span><span class="token punctuation">;</span>        </span><span class="token delimiter punctuation">%></span></span>        <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> titleText </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>                <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#3C4858'</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>                <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'#555'</span><span class="token punctuation">,</span>                <span class="token literal-property property">borderColor</span><span class="token operator">:</span> <span class="token string">'#777'</span><span class="token punctuation">,</span>                <span class="token literal-property property">borderWidth</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token function-variable function">formatter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">var</span> value <span class="token operator">=</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token string">'&lt;div style="font-size: 14px;">'</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'：'</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;/div>'</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">visualMap</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">showLabel</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">categories</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">calculable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">inRange</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">symbol</span><span class="token operator">:</span> <span class="token string">'rect'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#ebedf0'</span><span class="token punctuation">,</span> <span class="token string">'#c6e48b'</span><span class="token punctuation">,</span> <span class="token string">'#7bc96f'</span><span class="token punctuation">,</span> <span class="token string">'#239a3b'</span><span class="token punctuation">,</span> <span class="token string">'#196127'</span><span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">itemWidth</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                <span class="token literal-property property">itemHeight</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                <span class="token literal-property property">orient</span><span class="token operator">:</span> <span class="token string">'horizontal'</span><span class="token punctuation">,</span>                <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>                <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">calendar</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>                <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> rangeArr </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>                <span class="token literal-property property">cellSize</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">splitLine</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#196127'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">borderColor</span><span class="token operator">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">borderWidth</span><span class="token operator">:</span> <span class="token number">2</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">yearLabel</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">monthLabel</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">nameMap</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> nameMap </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">11</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">dayLabel</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">formatter</span><span class="token operator">:</span> <span class="token string">'&#123;start&#125;  1st'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">nameMap</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> nameMap </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">11</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'heatmap'</span><span class="token punctuation">,</span>                <span class="token literal-property property">coordinateSystem</span><span class="token operator">:</span> <span class="token string">'calendar'</span><span class="token punctuation">,</span>                <span class="token literal-property property">calendarIndex</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> datePosts </span><span class="token delimiter punctuation">%></span></span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 响应式调整</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            myChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始加载</span>    <span class="token function">initPostCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Pjax重载处理</span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pjax:complete'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">initPostCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>post-charts.ejs</strong></li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#posts-chart,    #categories-chart,    #tags-chart</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0.5rem auto<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0.5rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postCharts<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-charts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>far fa-bar-chart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'postCharts'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart col s12 m6 l4<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>posts-chart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart col s12 m6 l4<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categories-chart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart col s12 m6 l4<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags-chart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 封装图表初始化函数</span>    <span class="token keyword">function</span> <span class="token function">initPostCharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 确保echarts加载完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> echarts <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>echarts<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">loadAllCharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">loadAllCharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">loadAllCharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 销毁旧实例（如果存在）</span>        <span class="token punctuation">[</span><span class="token string">'posts-chart'</span><span class="token punctuation">,</span> <span class="token string">'categories-chart'</span><span class="token punctuation">,</span> <span class="token string">'tags-chart'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> chartDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>chartDom <span class="token operator">&amp;&amp;</span> echarts<span class="token punctuation">.</span><span class="token function">getInstanceByDom</span><span class="token punctuation">(</span>chartDom<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                echarts<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span>chartDom<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化三个图表</span>        <span class="token keyword">let</span> postsChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'posts-chart'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> categoriesChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'categories-chart'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> tagsChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'tags-chart'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">        <span class="token comment">/* ========== 文章发布折线图数据 ========== */</span>        <span class="token keyword">var</span> startDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'years'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> endDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> monthMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> dayTime <span class="token operator">=</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> time <span class="token operator">=</span> startDate<span class="token punctuation">;</span> time <span class="token operator">&lt;=</span> endDate<span class="token punctuation">;</span> time <span class="token operator">+=</span> dayTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>monthMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                monthMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>month<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        site<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> month <span class="token operator">=</span> post<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>monthMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                monthMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>month<span class="token punctuation">,</span> monthMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> monthArr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>monthMap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> monthValueArr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>monthMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* ========== 分类饼图数据 ========== */</span>        <span class="token keyword">var</span> categoryArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        site<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">category</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            categoryArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'name'</span><span class="token operator">:</span> category<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-property property">'value'</span><span class="token operator">:</span> category<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> categoryArrJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>categoryArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* ========== 标签柱状图数据 ========== */</span>        <span class="token keyword">var</span> tagArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        site<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tagArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'name'</span><span class="token operator">:</span> tag<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-property property">'value'</span><span class="token operator">:</span> tag<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tagArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> b<span class="token punctuation">.</span>value <span class="token operator">-</span> a<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> tagNameArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> tagCountArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>tagArr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tagNameArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tagArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            tagCountArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tagArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> tagNameArrJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tagNameArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> tagCountArrJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tagCountArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token delimiter punctuation">%></span></span>        <span class="token comment">// 文章发布折线图配置</span>        <span class="token keyword">let</span> postsOption <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"postPublishChart"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>                <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">'center'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'axis'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">xAxis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> monthArr </span><span class="token delimiter punctuation">%></span></span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">yAxis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'value'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"postsNumberName"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'line'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#6772e5'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> monthValueArr </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>                    <span class="token literal-property property">markPoint</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">symbolSize</span><span class="token operator">:</span> <span class="token number">45</span><span class="token punctuation">,</span>                        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#fa755a'</span><span class="token punctuation">,</span><span class="token string">'#3ecf8e'</span><span class="token punctuation">,</span><span class="token string">'#82d3f4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'max'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#3ecf8e'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"maximum"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'min'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#fa755a'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"minimum"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token literal-property property">markLine</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#ab47bc'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span>                            <span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'average'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"average"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">&#125;</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 分类饼图配置</span>        <span class="token keyword">let</span> categoriesOption <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"categoriesChart"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>                <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">'center'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'item'</span><span class="token punctuation">,</span>                <span class="token literal-property property">formatter</span><span class="token operator">:</span> <span class="token string">"&#123;a&#125; &lt;br/>&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"categories"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'pie'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token string">'50%'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#6772e5'</span><span class="token punctuation">,</span> <span class="token string">'#ff9e0f'</span><span class="token punctuation">,</span> <span class="token string">'#fa755a'</span><span class="token punctuation">,</span> <span class="token string">'#3ecf8e'</span><span class="token punctuation">,</span> <span class="token string">'#82d3f4'</span><span class="token punctuation">,</span> <span class="token string">'#ab47bc'</span><span class="token punctuation">,</span> <span class="token string">'#525f7f'</span><span class="token punctuation">,</span> <span class="token string">'#f51c47'</span><span class="token punctuation">,</span> <span class="token string">'#26A69A'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> categoryArrJson </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>                    <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">emphasis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            <span class="token literal-property property">shadowBlur</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>                            <span class="token literal-property property">shadowOffsetX</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                            <span class="token literal-property property">shadowColor</span><span class="token operator">:</span> <span class="token string">'rgba(0, 0, 0, 0.5)'</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 标签柱状图配置</span>        <span class="token keyword">let</span> tagsOption <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"top10TagsChart"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>                <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">'center'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">xAxis</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> tagNameArrJson </span><span class="token delimiter punctuation">%></span></span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">yAxis</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'value'</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#82d3f4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token literal-property property">barWidth</span> <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>                    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> tagCountArrJson </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>                    <span class="token literal-property property">markPoint</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">symbolSize</span><span class="token operator">:</span> <span class="token number">45</span><span class="token punctuation">,</span>                        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'max'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#3ecf8e'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"maximum"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'min'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#fa755a'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"minimum"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token literal-property property">markLine</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#ab47bc'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span>                            <span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'average'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"average"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">&#125;</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 渲染图表</span>        postsChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>postsOption<span class="token punctuation">)</span><span class="token punctuation">;</span>        categoriesChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>categoriesOption<span class="token punctuation">)</span><span class="token punctuation">;</span>        tagsChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>tagsOption<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 响应式调整</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            postsChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            categoriesChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tagsChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始加载</span>    <span class="token function">initPostCharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Pjax重载处理</span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pjax:complete'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">initPostCharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转载提示bug"><a href="#转载提示bug" class="headerlink" title="转载提示bug"></a>转载提示bug</h3><p>配置完上面的之后，突然发现代码复制的地方，点击一次会弹出多个转载提示（和你进入该界面的次数一样）——如果你在主题配置文件设置了<code>reprint:  enable: true</code> 的话。</p><p><img src="/2025/07/08/20250708/image-20250729140422797.png"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a><strong>解决方法</strong></h4><p>找到<code>E:\blog_matery\themes\matery\layout\_partial\reprint-statement.ejs</code> 该配置文件。修改下面代码：（询问deepseek得）</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"copy"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> toastHTML <span class="token operator">=</span> <span class="token string">'&lt;span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'pleaseFollowReprintPolicy'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>&lt;/span>&lt;button class="btn-flat toast-action" onclick="navToReprintStatement()" style="font-size: smaller"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'checkPolicy'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>&lt;/a>'</span><span class="token punctuation">;</span>    <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">toast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">html</span><span class="token operator">:</span> toastHTML<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">navToReprintStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"html, body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">scrollTop</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#reprint-statement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">-</span> <span class="token number">80</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为：（直接替换这部分代码即可。也可以注释上面的备份）</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> oldCopyListeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>copyEventListeners<span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">listener</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleCopyEvent</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> toastHTML <span class="token operator">=</span> <span class="token string">'&lt;span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'pleaseFollowReprintPolicy'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>&lt;/span>&lt;button class="btn-flat toast-action" onclick="navToReprintStatement()" style="font-size: smaller"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'checkPolicy'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>&lt;/button>'</span><span class="token punctuation">;</span>    <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">toast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">html</span><span class="token operator">:</span> toastHTML<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  window<span class="token punctuation">.</span><span class="token function-variable function">navToReprintStatement</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"html, body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">scrollTop</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#reprint-statement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">-</span> <span class="token number">80</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>document<span class="token punctuation">.</span>copyEventListeners<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span>copyEventListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  document<span class="token punctuation">.</span>copyEventListeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>handleCopyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"copy"</span><span class="token punctuation">,</span> handleCopyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="未解决bug"><a href="#未解决bug" class="headerlink" title="未解决bug"></a>未解决bug</h3><p>第一次进入网站，打开的第一篇文章，其目录无法正确显示和隐藏。重进、刷新会恢复正常</p><h3 id="重大bug"><a href="#重大bug" class="headerlink" title="重大bug"></a>重大bug</h3><p>首页banner从其他界面跳转 就无法再显示了。目前难以找到解决方法（在本地部署正常显示，但网页上无法显示，十分奇特）</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他设置均可以参照官方发布的文档进行操作。总的来说相较于Next主题还是简便许多的，因为后者没有官方配置说明，需要懂这方面的知识，而且由于版本更新，网上大量的适配版本都很老了（你敢相信，我24年配置的next主题竟然是20年发布的7.8.0版本，而那时早已发布了8.版本了）。由此可以教程滞后性有多大。如果想更新版本，需要从头到尾的重新配置——而事实是早已忘记了当初找的哪些文章（网上教程很多都是随意转载的，很多根本无用）。这也就是为何自从配置好，我就没再配置过，因为改动一点，就发现跑不动了，直到这次更换主题。</p>]]></content>
      
      
      <categories>
          
          <category> 博客优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中的插入图片问题解决</title>
      <link href="/2025/07/05/20250705/"/>
      <url>/2025/07/05/20250705/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：深入探讨了写文章时插入图片<span id="more"></span>的语法。</p><p><strong>preface:  上互联网搜寻了很多资料，都发现引用方式<code>！[](*.jpg)</code>总是莫名失败，经过审查界面元素、对Html代码分析，终于找到了问题所在。</strong></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有两种插入图片方式，分别为：</p><p><code>&#123;% asset_img *.png 这是一张图片%&#125;</code></p><p><code>！[图片描述](*.jpg)</code></p><p>他们的能否使用，取决于下图中relative_link是否启用。启用了，则使用第二种方可；为false，则是用第一种形式。目前未发现这种东西对其他有任何影响。比如下载文件的语法不会有改变：<code>[描述](/download/*.7z)</code></p><p>目前还未搞懂具体原因，但是两种方法都无法在编辑器中显示图片，就比如我用的typora，要在编辑器中显示（改了就不能在网页中显示）得改成 <code>！[图片描述](./这篇文章的名字/*.jpg)</code>，因为图片是放在同名文件夹下的，推荐第二种方式，可参见下篇关于Matery主题的文章。（解决方式倒是看见过一篇文章，但是感觉太麻烦了）</p><p><img src="/2025/07/05/20250705/image-20250706215449624.png"></p><p><a href="/download/1.jpg">测试下载</a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>现在提供一种解决方案，由于启用<code>relative_link: true</code> 会带来一些意想不到的问题，比如版权声明中文章链接的错误显示。所以，经过检索，有了下面一种完美的解决方案。注意，我这里是结合下面的链接所尝试出来的一种可行的方法，与下面的链接中方法有不同之处！</p><p>参考链接：<a href="https://shmily101.github.io/post/hexo/003-hexo-img">优雅地在 hexo 博客中插入图片 | 小野</a>|<a href="https://zhuanlan.zhihu.com/p/696630232">(17 封私信 &#x2F; 80 条消息) hexo 博客插入本地图片时遇到的坑 - 知乎</a>|<a href="https://moeci.com/posts/hexo-typora/">Hexo + Typora + 开发Hexo插件 解决图片路径不一致 | yiyun’s Blog</a></p><p>首先，在根目录的配置文件下，添加下面代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">relative_link<span class="token operator">:</span> false#下面是新添加的marked<span class="token operator">:</span>  prependRoot<span class="token operator">:</span> true  postAsset<span class="token operator">:</span> true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能在<code>relative_link: false</code>的情况下使用 <code>![](image.png)</code>来显示图片，但是我们发现，使用md编辑器却无法实时显示，于是我们用到了下面的插件：</p><p>在根目录下输入 <code>npm install hexo-asset-img --save</code> 安装此插件。如果有<code>hexo-asset-image</code>插件，需要在 <code>node_modules</code> 目录下把其删除，或者输入  <code>npm uninstall hexo-asset-image</code>(命令可能是这样)卸载插件。</p><p>这样，使用 <code>![](**/image.png)</code> 就可以实现md编辑器实时预览图片，而且网页上也能看到，并且通过对Typora的设置，能够实现编写md时直接复制粘贴图片，方便快捷。（当然，似乎 原方式<code>![](image.png)</code>也支持，也就是上面三种方式均可在网页端显示图片</p><p>插件bug如下：（注意，前面的为md文件名，这里不得已打了空格以便显示）</p><pre class="line-numbers language-none"><code class="language-none">![](20250705  &#x2F;image.png) 在以代码模式显示时，会显示为![](image.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我估计是该插件的实现原理就是网页端会替换上面的东西，所以造成了这种问题</p><p><img src="/2025/07/05/20250705/image-20250721195351088.png" alt="image-20250721195351088"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>如果使用的是Typora，采用以下设置方法，这样将图片复制粘贴时，会自动生成一个同名文件夹和图片。</p><p><img src="/2025/07/05/20250705/image-20250721195637379.png"></p>]]></content>
      
      
      <categories>
          
          <category> 博客优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 插入图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub入门（持续更新）</title>
      <link href="/2025/06/30/con-github/"/>
      <url>/2025/06/30/con-github/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：主要介绍GitHub的<span id="more"></span>使用。</p><p><strong>preface: 大一的时候就接触到了GitHub这么一个平台，奈何因为网络问题，所以很少登录。加之全英文看得头痛的界面，所以虽然认为其很有用，但也迟迟没有深入了解。那么，现在就趁暑假，学会使用GitHub这一藏宝地。</strong></p><p>参考链接：<a href="https://www.bilibili.com/video/BV1e541137Tc/?spm_id_from=333.337.search-card.all.click&vd_source=b7320a11239509eb1a422f34c9f477a3">Github 新手够用指南 | 全程演示&amp;个人找项目技巧放送_哔哩哔哩_bilibili</a>|<a href="https://zhuanlan.zhihu.com/p/664195515">(17 封私信 &#x2F; 80 条消息) 【小白向】最新最详细的GitHub全站使用指南 - 知乎</a></p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>简单来说就是一个项目提交的应用。</p><p><code>git clone https://...</code> 下载仓库，区别于下载zip（前者直接是仓库，后者是纯粹文件夹）</p><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>&emsp;可以搜索github中文插件，便能找到一个github上的以 油猴脚本方式运行的中文脚本，虽然目前存在部分翻译不恰当的问题，但对于英文水平不高的大多数人，还是很可以的。（全英文界面看起来太难受了）</p><p>一些检索技巧：</p><p>特殊的查找资源小技巧-常用前缀后缀<br>• 找百科大全 awesome xxx<br>• 找例子 xxx sample<br>• 找空项目架子 xxx starter &#x2F; xxx boilerplate<br>• 找教程 xxx tutorial</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级搜索指令</title>
      <link href="/2025/05/28/20250528/"/>
      <url>/2025/05/28/20250528/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：高级搜索选项<span id="more"></span>。</p><p><strong>preface:  参考链接：<a href="https://cloud.tencent.com/developer/article/1464793">99%的人都不知道的，高级搜索技巧！精度提升 10 倍！-腾讯云开发者社区-腾讯云</a></strong></p><p>最近检索一些信息时，发现来来回回总是知乎、百度、CSDN等等的一些垃圾，根本无法寻找到优质内容，这也许和搜索策略与选取的搜索引擎相关，于是本文便介绍一下搜索引擎中的高级搜索选项。这里以edge为例。</p><ul><li><strong>site指令</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">你好 site<span class="token operator">:</span>baidu<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定搜索的网站，可以更加细化。</p><ul><li><strong>filetype</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">百年孤独 filetype:pdf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索指定文件类型，一般用于查找电子书、ppt等等。感觉一般用不到</p><ul><li><p><strong>3、逻辑词</strong></p><table><thead><tr><th align="left">符号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">查找包含所有字词的网页，这些术语前面带有 + 符号。 还允许包含通常被忽略的术语。（即停用词）</td></tr><tr><td align="left">“ “</td><td align="left">查找短语中的确切字词。</td></tr><tr><td align="left">()</td><td align="left">查找或排除包含一组字词的网页。</td></tr><tr><td align="left">AND 或 &amp;</td><td align="left">查找包含所有术语或短语的网页。</td></tr><tr><td align="left">NOT 或 –</td><td align="left">排除包含术语或短语的网页。</td></tr><tr><td align="left">OR 或 |</td><td align="left">查找包含任一术语或短语的网页。</td></tr></tbody></table></li></ul><p>注意，上面的停用词是为了便于索引而建立的，有很多。可以自行查阅（比如各种数字和哈哈等常见意义不大的词）</p><p>使用示例：</p><pre class="line-numbers language-none"><code class="language-none">+在 +巴黎 -希尔顿<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&ensp;</p><p>目前就总结到这里吧，还有其他的比如language等等，但实测并没有用，也许是格式问题，日后有空再补充。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言中的路径问题</title>
      <link href="/2025/03/13/20250313/"/>
      <url>/2025/03/13/20250313/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：简单介绍了路径问题<span id="more"></span>，当然适用于很多地方。</p><p><strong>preface:参考链接： <a href="https://blog.csdn.net/csdndg/article/details/89708048">关于文件路径中&#x2F; \ &#x2F;&#x2F; \的使用以及绝对相对路径的问题_路径哪里加转义字符-CSDN博客</a>  |</strong></p><p>综下所述，文件路径中直接用正斜杠 <code>/</code>能兼容更多地方。反斜杠的特性是windows带来的。</p><p>&emsp;<strong>路径分为两种：绝对路径、相对路径</strong></p><p>绝对路径：就是E:\test\file\data。&#96;&#96;</p><p>在C语言中，<code>\\</code>代表<code>\</code> 故有</p><pre class="line-numbers language-none"><code class="language-none"> FILE *fp; fp &#x3D; fopen(&quot;C:\\Users\\Administrator.USER0160\\Desktop\\data.txt&quot;,&quot;r&quot;);  &#x2F;&#x2F; 路径名称要正确 FILE * fp;fp &#x3D; fopen(&quot;E:&#x2F;test&#x2F;file&#x2F;data&#x2F;d.txt&quot;,&quot;r&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相对路径<br>电脑硬盘E盘下，建文件夹“test”，”test”下建立子文件夹“file”，”file”下建子文件夹“data”, 电脑资源管理器显示目录 E:\test\file\data 当前路径 E:\test\file</p><p>相对路径 ，用正斜杠 &#x2F;</p><p>向上一级目录指向<br>，&#x2F; 表示当前路径，相当于E:\test\file<br>，， 表示当前路径的上一级路径，相当于E:\test<br>，，&#x2F;，，&#x2F; 表示当前路径上上一级路径，相当于E:</p><p>向下一级目录指向<br>.&#x2F;data 表示当前路径下一级路径，相当于E:\test\file\data<br>.&#x2F;data&#x2F;xxx 表示当前路径的下下一级路径，相当于 E:\test\file\data\xxx</p><p>，，&#x2F; 代表上一级目录</p><p>，，&#x2F;，，&#x2F; 代表上两级目录</p><p>&#x2F;，， 代表下级目录</p><p>&#x2F;，，&#x2F;，，代表下两级目录<br>（其实后面两个有点抽象了，毕竟我怎么知道下两级目录是哪个文件夹的打开？？）</p>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS下的编码问题</title>
      <link href="/2025/02/14/20250214/"/>
      <url>/2025/02/14/20250214/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：本文主要介绍编码问题。<span id="more"></span></p><p><strong>preface:   参考文章：<a href="https://blog.csdn.net/no_say_you_know/article/details/121146469">VS2019 编码问题，如何完美改为UTF-8_vs utf-8-CSDN博客</a>  |  <a href="https://blog.csdn.net/no_say_you_know/article/details/126695461">探究Visual Studio中的乱码问题_visual studio 英文乱码-CSDN博客</a></strong></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>&emsp;关于字符的编码，有ANSI(也可以认为就是GBK，中国汉字用的编码)，ASCII（仅支持2^8个字符），utf-8（全球统一编码）。不懂的可自行查阅：<a href="https://www.bilibili.com/video/BV1BT421a7N6/?spm_id_from=333.1387.favlist.content.click">锟斤拷烫烫烫�ַ��ͨ？文字乱码频发 你该如何避免？带你探索乱码编码解码的前世今生_哔哩哔哩_bilibili</a>|  &emsp;</p><p>在VS中文版，默认的字符编码格式就是GBK，当我们通过特殊的方法改成通用的utf-8时，却发生了匪夷所思的一幕。</p><p>&#x2F;&#x2F;文件存储的编码格式是 utf-8。</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;windows.h&gt;int main() &#123;&#x2F;&#x2F; 设置控制台输出编码为 UTF-8SetConsoleOutputCP(65001);&#x2F;&#x2F;意思就是按照utf-8的密码表，解密得到输出。&#x2F;&#x2F; 输出 UTF-8 编码的字符串printf(&quot;完整汉字\n&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果却是匪夷所思的 乱码。为什么会这样？</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;int main() &#123;char m[] &#x3D; &#123; &quot;加咖啡&quot; &#125;;&#x2F;&#x2F;printf(&quot;%s&quot;, m);return 0;&#125; &#x2F;&#x2F;文件编码是 GBK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的程序运行的结果竟然是正常的？</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>VS插件<code>FileEncoding</code></p><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><h4 id="VS中的三个字符集概念："><a href="#VS中的三个字符集概念：" class="headerlink" title="VS中的三个字符集概念："></a>VS中的三个字符集概念：</h4><p><strong>1.源码字符集</strong></p><p>即源代码文本文件的字符集，NodePad++、记事本、VS Code这样类似的文本编辑器，可以打开源文件看一下你的字符集（文件编码）。</p><p>源代码文本文件是以二进制的形式存在硬盘里的，无论中文英文都一样，当你输入一个汉字后保存关闭，这个汉字就会按照你指定的字符集转换成二进制编码保存下去的，当你在以这个格式打开文件时候，就再按照你指定的字符集把二进制转回来。如果两次使用不同的字符集，也就会出现乱码了。<br><strong>2.执行字符集</strong></p><p>执行字符集决定了这行代码在编译器进行编译的时候，str存储的字节到底是什么，你可能会说源码字符集不是已经决定了这个”我”的二进制表示了么？没错，但是这个执行字符集就是让你在这里对它再解释一次。比如我源码字符集可能是UTF8的，但是我可以通过执行字符集来让最终str存储的是GBK的字节编码。<br><strong>3.解析字符集</strong></p><p>最终要还原显示这些二进制字节编码的时候，就需要用到它。比如通过<code>printf()</code>把前面的<code>str</code>显示到控制台时，这个<code>printf()</code>就会按照解析字符集来解析这些字节编码，找到指定字符显示出来。比如下面的控制台输出编码。</p><p>简而言之，对于执行字符集，Visual Studio默认根据系统的Locale来决定执行字符集，一般大家都是Windows中文系统，Locale是中国，那么就是GBK编码。对于解析字符集，如果没有手动更改的话，Visual Studio的标准输入输出(printf,cout)到命令行也是根据系统Locael决定的，也就是GBK。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>由此，我们可以知道<code>printf</code>中的汉字，实际上编译的时候用的是GBK方式，所以设定控制台输出为utf-8后 就无法正常显示了。</p><p>解决方法，一是添加下面的命令<code>#pragma execution_character_set(&quot;utf-8&quot;)</code>；二是在前面添加<code>u8</code>前缀；三是利用函数 <code>setlocale</code>函数，具体深层原因可自行询问AI。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;#pragma execution_character_set(&quot;utf-8&quot;)#include &lt;stdio.h&gt;#include &lt;windows.h&gt;int main() &#123;&#x2F;&#x2F; 设置控制台输出编码为 UTF-8SetConsoleOutputCP(65001);&#x2F;&#x2F; 输出 UTF-8 编码的字符串printf(u8&quot;完整汉字\n&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;windows.h&gt;#include &lt;locale.h&gt;int main() &#123;&#x2F;&#x2F; 设置控制台输出编码为 UTF-8SetConsoleOutputCP(65001);&#x2F;&#x2F;意思就是按照utf-8的密码表，解密得到输出。setlocale(LC_ALL, &quot;&quot;); &#x2F;&#x2F;此函数的意思就是设置各种环境为系统环境变量默认。&#x2F;&#x2F; 输出 UTF-8 编码的字符串printf(&quot;完整汉字\n&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&ensp;</p><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>char是一个字符，用的是ASCII码，那它为何能够储存中文呢？或者说，按道理在gbk的编码格式下，char根本无法正常使用才对啊。</p><p>实际上，gbk和utf-8都兼容 ASCII码，也就是说，假如0在ASCII码中编译为0000，那再gbk中也是0000。所以英文能正常使用。那中文嘞？</p><p>我们深刻理解编码、解码原理。<code>加咖啡</code>，占6字节，假设再gbk编码下为000….，那么char的作用，就是储存一个字节而已。然后，系统按照gbk的表，解码，从而正常显示。</p><p>所以，当我们把汉字、英文看作 一串二进制的数时，一切便合理起来。</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;int main() &#123;char m[] &#x3D; &#123; &quot;加咖啡&quot; &#125;;&#x2F;&#x2F;printf(&quot;%s&quot;, m);return 0;&#125; &#x2F;&#x2F;文件编码是 GBK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有，tchar，wchar_t，LPCSTR(long, *p, const, string)。</p>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公告（更新于2025-07-29</title>
      <link href="/2024/10/26/top/"/>
      <url>/2024/10/26/top/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本站无商业用途，仅做个人学习、分享、唠嗑用。</p><p>目前屏蔽了国外ip，访问请于国内部分地区（大陆&amp;Honkong），因为发现来自国外的不明生物访问太多了</p><p><strong>一些小问题：</strong></p><ul><li><p><strong>关于音乐播放器无法全局播放的问题：由于更换了Matery主题，其刷新跳转时会重新加载音乐插件。比较好的解决方式目前暂未找到。这个问题还是等待学会相关知识再解决。</strong></p></li><li><p><strong>关于评论，目前感觉没有很大必要配置评论区，主要是风险小、好用的目前没有找到。日后再说。</strong></p></li><li><p><strong>关于域名。 目前是买了三年（2023），后面极大可能会更换域名，请注意到时候的文章（更换域名的时候也可能会重新搭建blog，文章到时候应该会全部搬迁，有可能会换用其他主题（</strong></p></li><li><p><strong>关于wx二维码，真实有效</strong></p></li><li><p><strong>关于音乐错乱。其为用网yy插件实现，有些vip歌曲实在没办法（有些歌莫名其妙就成了付费的了），而且会出现信息错乱等现象。还有一些是用的网友上传的。</strong></p></li><li><p><strong>联系方式：请通过邮件发送信息，要求来信请详细说清楚，发送到：<a href="mailto:&#x6c;&#97;&#x6f;&#x78;&#105;&#x61;&#x6f;&#x6b;&#101;&#64;&#x7a;&#121;&#119;&#105;&#x66;&#101;&#108;&#x69;&#x75;&#121;&#x69;&#110;&#x67;&#46;&#x74;&#111;&#112;">laoxiaoke@zywifeliuying.top</a></strong></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
