<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端学习 第3期 JavaScript</title>
      <link href="/2025/08/24/js/"/>
      <url>/2025/08/24/js/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：html等前端学习合集<span id="more"></span>。</p><h2 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h2><p>什么是DOM？简单地说，DOM是一套对文档的内容进行抽象和概念化的方法。DOM是一种API（应用编程接口）。简单地说，API就是一组已经得到有关各方共同认可的基本约定。在现实世界中，相当于API的例子包括（但不限于）摩尔斯码、国际时区、化学元素周期表。以上这些都是不同学科领域中的标准，它们使得人们能够更方便地交流与合作。如果没有一个统一的标准，事情往往会演变成为一场灾难。别忘了，因混淆英制度量衡与公制度量衡至少导致过一次火星探测任务的失败。</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p><strong>JavaScript引入</strong></p><p>最好的做法是把<code>&lt;script&gt;</code>标签放到HTML文档的最后，<code>&lt;/body&gt;</code>标签之前，这样可以提高加载页面速度。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><ol><li>建议每条语句用分号隔开。</li><li>注释采用的语法和C语言一致，为 <code>//</code> 、 <code>/* */</code>、HTML中的 <code>&lt;!--</code> 部分；前者和后者均只能用于单行，中者可以跨行。</li><li>声明变量大体同C语言，可以在声明的时候同时赋初始值。还可以一次声明多种 <code>var mood = &quot;happy&quot;, age = 33;</code>；其不在乎变量具体的类型，所以可以随意更改变量的数据类型</li><li></li></ol><h2 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h2><p>首先让我们先理解<strong>编译原理</strong></p><p>&ensp;</p><p>传统编译语言，对源代码会进行 词法分析、语法分析、代码生成三个步骤；分别是分解字符串、分析代码块的关系、转化为机器能理解的指令。</p><p>在JavaScript中，编译和执行可以看作是一起的。一般编程语言，都是可以预先编译成exe可执行文件，然后运行；JS编译是发生在执行的前一瞬。例如</p><p><code>var a = 2;</code> 简单来说，这是两部分，分为 <code>var a</code> 和 <code>a = 2</code> 两部分。首先，编译器询问作用域是否存在一个相同名称变量（在同一作用域中），是则忽略该声明，否则要求作用域声明该变量为a。接下来编译器为引擎生成代码，其处理 a &#x3D; 2 的赋值操作。引擎运行会询问作用域当前作用域是否存在该变量，是则使用，否则在更外层的作用域查找。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>LHS与RHS</strong></p><p>引擎对变量查找的两种方式，前者只关心变量的地址，后者只关心变量的值。</p><p>进行RHS查找时，若全局作用域也未能找到，会抛出ReferenceError异常；如果找到了，但是你对该变量的值操作不合理，那么会抛出TypeError异常，感觉和C语言中参数类型不匹配的错误类似。前者代表作用域判别失败，后者是作用域成功了</p><p><img src="/2025/08/24/js/image-20250816153542464.png"></p><p>进行LHS查找时，如果未能找到，则在正常模式会自动创建声明一个全局变量。</p><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>目前绝大数编译语言都采用这种做法。简单来说，词法作用域是由你在写代码时 变量和块作用域 写在哪里决定的，因此大部分情况，其作用域会保持不变。</p><p>考虑下面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">bar</span><span class="token punctuation">(</span>b <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2，4，12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>a的作用域是整个函数，b则是大函数内部，c则是小函数内部。可以发现，他们是逐级包含的。（当然，优先级也是反过来的</p><h3 id="函数、块作用域"><a href="#函数、块作用域" class="headerlink" title="函数、块作用域"></a>函数、块作用域</h3><p><strong>隐藏内部实现</strong></p><p>考虑下面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> doSomethingElse<span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b<span class="token punctuation">;</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，这种写法是很危险的。因为给外部作用域对b和doSomethingElse的访问权限毫无必要。所以，采用函数包裹是更好的选择。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> doSomethingElse<span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span>a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而，利用函数封装某一部分的做法还是有问题，因为函数本身的名字会污染作用域，而且必须显式的调用它。JavaScript给出了解决方案。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//或者 改进的形式</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的做法，将函数处理为函数表达式，这样，foo变量名只能在自身函数中访问。末尾的括号表示立即执行，函数括起来表示是函数表达式。</p><p><strong>匿名与具名</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I wait a second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的便是匿名函数表达式，因为function没用名称标识符，但是也会带来一些不便。所以我们更推荐加一个名称，就像上上面写的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token constant">IIFE</span><span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token constant">IIFE</span><span class="token punctuation">(</span><span class="token parameter">def</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">def</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">def</span><span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们来分析上面的函数表达式，第一个小括号内部定义了一个函数，第二个小括号表示传入的参数。这样就显而易见了。1. 定义了一个名称为IIFE的函数，其参数为global，具体内容在大括号中。之后传入参数window，并执行。（这里的window可以看作一个全局变量数据库，可以通过 <code>.</code> 来访问其中的元素。 2. 定义了一个名称为IIFE的函数，参数为def(它是一个函数)，功能为执行def。之后传入函数参数。这种做法实现了倒置代码的运行顺序。</p><p><strong>块作用域</strong></p><p>考虑下面的例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可能会以为它的C语言一样，变量i只能在for语句中使用，然而实际上它还是会绑定到外部作用域中。这是因为使用var声明变量时，无论在哪里都是一样的。</p><p>所以，有一种新的变量声明方式： <code>let</code> ； 它会隐式的声明一个块作用域，并且不会有变量不会有提升行为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span> <span class="token comment">// 这是显示声明块，也可以去掉就是隐式了。</span>        <span class="token keyword">let</span> bar <span class="token operator">=</span> foo<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其好处是可以在闭包结构中 对一些已经无用的变量进行回收。</p><p>另一种声明是 <code>const</code> 用于声明块作用域常量。</p><h3 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h3><p><strong>基本提升</strong></p><p>有变量提升、函数声明提升。例子如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能会认为这无法执行，但是Javascript会先编译变量，也就是所谓的提升，等效如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span> <span class="token comment">//忽略</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，函数表达式并不会提升</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相当于</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError，因为试图引用未定义的函数</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError，因为未找到声明</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token operator">...</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>函数提升优先于变量提升</strong></p><p>它的意思就是，函数提升的排名总是在变量前面，然后按顺序，正如上面开始的例子</p><p>让我们深入探讨一些函数声明的提升，实际上，函数提升具有块作用域，也就是它会提升到块作用域的顶部，然而同时会自动声明一个var同名变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//正常执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等效代码为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> foo<span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 这里相当于对var foo 进行赋值，就是foo = function foo()&#123;...&#125;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// var foo已经被赋值了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h3><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域外执行。听起来很抽象，让我们看个例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> bar<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按道理，执行baz();相当于直接把bar函数拷贝过来，也就是如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们会发现，a是什么？？ 是的，这就是函数的闭包，函数闭包意味着它能访问原来所在的词法作用域，也就是能访问foo内部的变量。所以上面的结果优先输出2而不是1。</p><p>在foo()执行后，通常其整个的内部作用域都会被销毁，但是闭包可以阻止，内部作用域仍然存在，以供bar在后面的任何时间引用。bar依然持有对该作用域的引用，这个引用就叫闭包。</p><p><strong>循环与闭包</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码的输出，看起来应该是每隔1s输出1-5；然而实际是输出5次数字 6；为什么？？</p><ol><li><strong><code>var</code> 没有块级作用域</strong></li></ol><p><code>var</code> 是函数作用域，不是块级作用域，所以 <code>i</code> 在整个 <code>for</code> 循环里是<strong>同一个变量</strong>。也就是说每次循环都修改的是同一个 <code>i</code>，而不是创建一个新的 <code>i</code>。究其原因，是变量提升（提升到了外部）</p><ol start="2"><li><strong><code>setTimeout</code> 是异步的</strong></li></ol><p><code>setTimeout</code> 的回调函数（<code>timer</code>）会在循环结束后才执行（即使设置了不同的延迟时间）。当 <code>timer</code> 执行时，循环已经结束。</p><ol start="3"><li><strong>所有回调函数共享同一个 <code>i</code></strong></li></ol><p>由于 <code>i</code> 是同一个变量，所有 <code>timer</code> 函数打印的都是<strong>最终 <code>i</code> 的值</strong>（即 <code>6</code>）</p><p>下面让我们来看看解决方案：</p><ol><li>使用 <code>let</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能如我们预想的一样工作了？为什么？实际上，如同C语言中的结果，因为let并不会进行提升，所以每次循环都创建了一个 <code>i</code>，故每个回调函数绑定的都是当前循环的 <code>i</code>。</p><ol start="2"><li>使用闭包</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> j<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IIFE(立即执行函数)会在每次循环时创建一个新的作用域，并传入当前值 <code>i</code></p><h2 id="this和对象原型"><a href="#this和对象原型" class="headerlink" title="this和对象原型"></a>this和对象原型</h2><h3 id="this简介（待补充，先了解对象等语法"><a href="#this简介（待补充，先了解对象等语法" class="headerlink" title="this简介（待补充，先了解对象等语法"></a>this简介（待补充，先了解对象等语法</h3><p>this 提供了一种优雅的方式来隐式的传递一个对象的引用，这样更加简洁：（否则我们还得在函数定义中添加一个变量）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> me<span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Kyle"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象的定义有两种方式，声明（文字）形式和构造形式。一般我们采用前者的方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> my_obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>    <span class="token comment">// 这种形式类似C语言中结构的初始化</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> my_obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的Object就相当于函数</span>my_obj<span class="token punctuation">.</span>key <span class="token operator">=</span> value<span class="token punctuation">;</span>my_obj<span class="token punctuation">[</span><span class="token string">"key"</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问对象也有两种方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> idx<span class="token punctuation">;</span>idx <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前者为属性访问，后者为键访问。对象中，属性名是字符串，如果采用其他值作为属性名，会被自动转化为字符串（注意，仅仅发生在声明的时候，所以后续引用需要字符串形式、或者变量）；考虑下面的例子，可以发现，虽然我们尝试定义属性名为非string类型的值，但是实际上其会利用字符串转换函数，转换为对应字符串。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>my<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>my<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bar"</span><span class="token punctuation">;</span>my<span class="token punctuation">[</span>my<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"baz"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span><span class="token string">"true"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo</span><span class="token function">alert</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bar</span><span class="token function">alert</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span><span class="token string">"[object Object]"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// baz 对象经过函数的返回值就是这个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用键访问，我们可以做到可计算属性名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> prefix <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>prefix<span class="token operator">+</span><span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>prefix<span class="token operator">+</span><span class="token string">"baz"</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myObject<span class="token punctuation">[</span><span class="token string">"foobar"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>foobaz<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="语言类型"><a href="#语言类型" class="headerlink" title="语言类型"></a>语言类型</h3><p>Javascript中有如下数据类型</p><ol><li>string</li><li>number</li><li>boolean</li><li>null</li><li>undefined</li><li>object</li><li>symbol</li></ol><p>内置对象</p><ol><li>String</li><li>Number</li><li>Boolean</li><li>Function</li><li>Array</li><li>Date</li><li>RedExp</li><li>Error</li></ol><p>内置对象可以看作就是一种函数。</p><h3 id="函数与对象"><a href="#函数与对象" class="headerlink" title="函数与对象"></a>函数与对象</h3><p>让我们直接给出下面的例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> someFoo <span class="token operator">=</span> foo<span class="token punctuation">;</span><span class="token keyword">var</span> my<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">someFoo</span><span class="token operator">:</span> foo<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function foo()&#123;&#125;</span><span class="token function">someFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function foo()&#123;&#125;</span>my<span class="token punctuation">.</span><span class="token function">someFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function foo()&#123;&#125;</span><span class="token comment">//---------------------------------</span><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> someFoo <span class="token operator">=</span> myObject<span class="token punctuation">.</span>foo<span class="token punctuation">;</span><span class="token function">someFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myObject<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>定义和赋值如下。一般而言，我们不采用对数组添加属性值的操作，当然这是指添加key和value；添加数组的附加属性描述还是可以的。添加键值要利用到下标赋值操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>myArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">//3</span>myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// foo</span><span class="token comment">//你可以给数组添加属性值，但不推荐！</span>myArray<span class="token punctuation">.</span>baz <span class="token operator">=</span> <span class="token string">"baz"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span>baz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仍然是3，添加属性值不会添加数组索引</span><span class="token comment">//如果尝试添加属性名像数字的属性，那么会变成数组下标</span><span class="token comment">//myArray.4="af"; ？？ 属性访问中 属性名不能以数字开头！！</span>myArray<span class="token punctuation">[</span><span class="token string">"4"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"af"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一般赋值是</span>myArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h3><p>对象的复制分浅复制和深复制两种，而后者很复杂，依据不同JavaScript框架。所以这里仅仅介绍浅复制，利用函数Object.assign。第一个参数为目标对象，后面可以跟多个源对象。其会遍历源对象所有可枚举的自有键；</p><p>浅复制的意思是，其复制的属性如果是对象，那么是引用方法，而不是副本！可以理解为一个快捷方式。考虑下面例子，可以发现，修改新对象中的对象属性值后，老对象中的对象属性也变了！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token comment">// 基本类型（字符串）</span>  <span class="token literal-property property">hobbies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"读书"</span><span class="token punctuation">,</span> <span class="token string">"音乐"</span><span class="token punctuation">]</span> <span class="token comment">// 引用类型（数组）</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 浅拷贝</span><span class="token keyword">var</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> myObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制到空对象，然后返回到 newObj</span><span class="token comment">// 1. 修改新对象的基本类型属性 -> 安全</span>newObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: "张三" (原对象未受影响)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出: "李四"</span><span class="token comment">// 2. 修改新对象中的引用类型属性 -> 危险！</span>newObj<span class="token punctuation">.</span>hobbies<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"编程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过新对象修改数组</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: ["读书", "音乐", "编程"] (原对象也被影响了！)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">.</span>hobbies<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出: ["读书", "音乐", "编程"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><p>如下面代码所示</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 其返回一个对象，包含属性描述符信息</span><span class="token comment">// &#123;</span><span class="token comment">//     value: 2,</span><span class="token comment">//     writable: true,  可写为false时，表示无法修改该属性</span><span class="token comment">//     enumerable: true, </span><span class="token comment">//     configurable: true 可配置为false时，表示无法删除该属性、修改属性描述符（除把writable改为flase）</span><span class="token comment">// &#125;</span><span class="token comment">//可以通过下面的函数定义</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习 第2期 CSS</title>
      <link href="/2025/08/23/css/"/>
      <url>/2025/08/23/css/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：CSS学习<span id="more"></span>。</p><h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><p>层叠样式表，简称CSS。其区分大小写；注释使用的是 <code>/* */</code>；注释不能嵌套使用；</p><p>css可以理解为给元素添加了一个盒子，其定义了盒子内部元素的样式。基本组成为：选择器+声明块。声明块由多种属性及对应值组成；共同选择器用逗号隔开。eg：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1, h2</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> #e52eae<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"SimSun"</span><span class="token punctuation">,</span> <span class="token string">"KaiTi"</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS引入"><a href="#CSS引入" class="headerlink" title="CSS引入"></a>CSS引入</h2><h3 id="使用外部CSS"><a href="#使用外部CSS" class="headerlink" title="使用外部CSS"></a>使用外部CSS</h3><p>stylesheet是样式表的意思、rel标识HTML界面与链接文件关系；href表明CSS文件路径；type表面链接文档类型。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./css/p.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用内部CSS"><a href="#使用内部CSS" class="headerlink" title="使用内部CSS"></a>使用内部CSS</h3><p>在 <code>&lt;head&gt; &lt;/head&gt;</code>标签内部引入 <code>&lt;style&gt;</code>以使用内部CSS。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.p1</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #f0f8ff<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="元素使用CSS"><a href="#元素使用CSS" class="headerlink" title="元素使用CSS"></a>元素使用CSS</h3><p>一般而言，为了网页的可维护性，我们要尽量避免使用。但是对于某些情况，如编写特定文章，为了方便自定义，CSS样式不至于冗杂（样式太多，名称都难以取）。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #44ff00<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>就拉山口发大师傅立<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><h4 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h4><p>定义文档所有文档的属性。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p.p2</span><span class="token punctuation">&#123;</span>     <span class="token property">color</span><span class="token punctuation">:</span> #af46ec<span class="token punctuation">;</span>     <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 也可以支持多个class */</span><span class="token selector">.p3</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前者是元素<strong>特定类选择器</strong>；后者是<strong>普通类选择器</strong>。意思就是针对特定class的标签（这些标签是HTML5预定义的）所定义的样式。</p><p>下面的例子是<strong>多类选择器</strong>——其把多个类选择器链接在一起，仅可以选择同时包含这些类名的元素（没有顺序要求）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.t0.t1</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#c6f300<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t0 t1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    空间克隆空间尽可能了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    就拉山口解开理解看了看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">#ID&#123;color:...&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ID<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p><strong>简单属性选择</strong>：选择含有某个属性的元素，例如下面是选择含有class属性的h1元素；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">h1[class]&#123;color: silver;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hoopla<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>severe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Shjjlajfl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>就离开了卡上飞机离开<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>又或者a[href][title]&#123;font-weight: bold;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>W3C Home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>W3C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体属性匹配</strong>：选择含有某个属性的某个值的元素。</p><p><code>a[href=&quot;www..&quot;]</code>抑或 <code>p[class=&quot;a b c&quot;]</code> 其是完全字符串匹配，所以class有顺序要求，而且引号里的值必须完全一样。就比如下面的，标签甚至多了个空格都无法正确使用！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">p[class = "t0 t1"]&#123;color:#000000;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t0  t1 <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    空间克隆空间尽可能了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    就拉山口解开理解看了看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>部分属性值匹配</strong>：针对能有词列表的属性</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p[class~="warning"]</span><span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span><span class="token selector">img[title~="figure"]</span><span class="token punctuation">&#123;</span>    ...<span class="token comment">/*这样只要是title含有figure字样就行*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：其一次只能匹配一个单词。也就是一个只能匹配一个空格间开的完整单词</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">p[class ~= "t0"][class~="t1"]&#123;      color:#000000;  &#125;  。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t0 t1 t2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   空间克隆空间尽可能了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>   就拉山口解开理解看了看<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>子串匹配属性选择器</strong>：前面有具体的匹配，也有部分属性值匹配，但是都是针对整个字符串或者单词的。</p><pre class="line-numbers language-none"><code class="language-none">p[class^&#x3D;&quot;bar&quot;]  选择以bar开头的元素，注意是整个字符串的开头包含bar的字符(不是单词)p[class$&#x3D;&quot;bar&quot;] 选择以bar结尾的元素p[class*&#x3D;&quot;bar&quot;]  选择包含bar子串的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>前面所有的都能混用</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">img[title~=<span class="token string">"img"</span>][title$=<span class="token string">"kl"</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>让我们先理解一下HTML的数结构，可以发现，每个元素间都存在父子关系，比如：</p><p><img src="/2025/08/23/css/image-20250802115327196.png"></p><p>父子关系是相邻两级所有的，后代关系则是高级与低级所有的。例如html与head、body为父子关系。html与后面所有标签为后代关系。由此便可以引出后代选择器，示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">div p em</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            adfsafs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>1. ja;jfsjkfa;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                aasf <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>2. asffads<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                ljkasefi <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span> aflk <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>4.sdfsfa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>3. ajklsfsl;f<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，1、2、4均被设置样式。因为后代选择器中两两元素之间 可以间隔无限，这点从后代关系便很容易理解。即：div的后代p的后代em被设定样式，也就是盒子嵌套盒子。</p><h4 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h4><p>子元素选择器，便是遵循父子关系了，是严格的嵌套；区别于后代选择器。我们用大于号表示父子关系，然后可以发现，只有1被设置了样式（其余代码同后代选择器那里）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div>p>em</span> <span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> blueviolet<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h4><p>注意，既然是相邻的，也就是有顺序要求的。考虑下面的例子</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">ol+ul+ul &#123;    color: aqua;&#125;li+li &#123;    color: blue;&#125;。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1. asklfj;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2. qweuoir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3. qweorpi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4. qweorpi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5. qwrerwq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>6. htrqera<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>7. qtafsda<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>8. qweorpi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>9. asdfasd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终结果是234、678为蓝色；9呈现出青蓝色。使用<strong>多个加号</strong>则是选择ol的相邻兄弟ul的相邻兄弟ul，即上面的第二个ul元素</p><p>当然，我们可以混用上面的选择器，如： <code>html&gt;body table+ul</code></p><h4 id="普通兄弟选择器"><a href="#普通兄弟选择器" class="headerlink" title="普通兄弟选择器"></a>普通兄弟选择器</h4><p>匹配一个元素的兄弟元素，不考虑相邻。同样以上面的代码为例</p><pre class="line-numbers language-none"><code class="language-none">ol~ul&#123; color: aqua;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样两个ul都被选择了；当然和相邻兄弟选择器一样，它们都选择第二个元素。</p><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p>一般有下面几种效果，注意visited和浏览器缓存有关（所以可能出现一开始就是这个样式）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body *:hover</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:link</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:visited</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token comment">/* 指示鼠标指针停留的元素 */</span><span class="token punctuation">&#125;</span><span class="token selector">a:active</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token comment">/* 指示被用户激活的元素，比如停在超链接时点击鼠标 */</span><span class="token punctuation">&#125;</span><span class="token selector">input:focus</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> silver<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token comment">/* 指示有输入焦点的元素，如input点击时激活 */</span><span class="token punctuation">&#125;</span><span class="token selector">p: first-child</span><span class="token punctuation">&#123;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token comment">/* 指示第一个这种类型的元素 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><p>一般有如下，这样可以设置首字母和首行的样式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p:first-letter</span><span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 200%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p:first-line</span><span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS结构与层叠"><a href="#CSS结构与层叠" class="headerlink" title="CSS结构与层叠"></a>CSS结构与层叠</h2><h3 id="特殊性"><a href="#特殊性" class="headerlink" title="特殊性"></a>特殊性</h3><p>同一个元素，可以用多条规则来选择，并赋予样式。比如</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body h1</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1.grape</span> <span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">/*这是特定类选择器*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么，在这种情况下，那条规则会胜出呢？？这就和特殊性的高低有关了。</p><p><strong>规则</strong>：</p><ol><li>每个ID选择器 对应 0，1，0，0</li><li>每个类选择器、属性选择器、伪类对应 0，0，1，0</li><li>每个元素与伪元素对应 0，0，0，1</li><li>通配符等无作用</li><li>内联样式为 1，0，0，0</li><li>在后面添加!important有最高优先级</li></ol><p><strong>例子</strong>：</p><ol><li><code>p.bright em.dark &#123;...&#125;</code> —— 0，0，2，2</li><li><code>#id216 &#123;...&#125;</code> —— 0，1，0，0</li><li><code>div#sidebar *[href] &#123;...&#125;</code> —— 0，1，1，1</li><li><code>html&gt;body table tr[id=&quot;totals&quot;] td ul&gt;li &#123;...&#125;</code> —— 0，0，1，7</li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承属性不具有特殊性。如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">p&#123;color: blue;&#125;...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> asfkkfjl <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>asfdf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>虽然我们只定义了p标签的样式，但是由于继承性，p标签的后代都会继承它的样式，所以em标签内的文本颜色也会是blue而非默认的black。但是，内外边距、背景、边框等不能继承。</p><h3 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h3><p>简单的来说，就是依据顺序来确定。如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么在后边的将会被选中。当然 <code>  &lt;link rel=&quot;stylesheet&quot; href=&quot;&quot;&gt;</code> 的本质也是将里面的CSS代码嵌入到HTML中，所以，CSS引入的方法对其优先级没有任何影响。</p><h2 id="值和单位"><a href="#值和单位" class="headerlink" title="值和单位"></a>值和单位</h2><h3 id="颜色的表示"><a href="#颜色的表示" class="headerlink" title="颜色的表示"></a>颜色的表示</h3><p><strong>方法1</strong>： 函数式RGB</p><p>样式如右：rgb(*, *, *)；里面的值从 0 - 255，可以用百分比表示0% - 100% ； 分别代表Red、Green、Blue三种颜色的占比。</p><p><strong>方法2</strong>： 十六进制RGB（HEX）</p><p>即将rgb中的三个颜色值，转化为十六进制数表示。如：#ff0000，两两成对的还可以简写为 #f00。</p><h3 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h3><h4 id="绝对长度单位"><a href="#绝对长度单位" class="headerlink" title="绝对长度单位"></a>绝对长度单位</h4><p>一般而言，我们在web浏览器中不适用绝对长度单位，因为其显示和分辨率、显示屏尺寸有关，所以这里不了解了。</p><ul><li><p><strong>英寸</strong>（in） 1 in——2.54 cm</p></li><li><p><strong>厘米</strong>（cm） 1 cm——0.394 in</p></li><li><p><strong>点</strong>（pt） 1&#x2F;72 in</p></li><li><p><strong>派点</strong>（pc） 1&#x2F;6 in</p></li></ul><h4 id="相对长度单位"><a href="#相对长度单位" class="headerlink" title="相对长度单位"></a>相对长度单位</h4><ul><li><strong>em</strong>  其定义为字体font-size的大小。比如下面的例子中，各个元素的左边距是不一样的，和其字体大小有关。</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h2</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1,h2,p</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>ex</strong>  其定义为字体小写字母x的高度，所以不同字体虽然font-size一样，但ex的值不一样；很多用户代理是将它的值作为em值的一半。</li><li><strong>px</strong>  像素。</li></ul><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="通用字体系列"><a href="#通用字体系列" class="headerlink" title="通用字体系列"></a>通用字体系列</h3><p>这些字体集一般是浏览器自带的，就是说它们是一个系列，一个系列包括很多种字体。</p><ul><li>serif字体</li></ul><p>这些字体成比例，就是说所有字符根据大小有不同的宽度，比如i和m</p><ul><li><p>sans-serif字体</p></li><li><p>monospace字体</p></li></ul><p>这些字体不成比例，每个字符宽度都一样</p><ul><li>cursive字体</li></ul><p>模仿人的手写体</p><ul><li>fantasy字体</li></ul><p>指定字体的属性为 <code>font-family</code>，一般最后都要添加一个通用字体系列；而且通用字体系列不能用引号包裹。如果特定字体含有空格、或特殊符号，需要用引号括起。（单双引号都可，但要混用，并且不区分大小写，但是为了可读性，一般会大写）。比如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">font-family</span><span class="token punctuation">:</span> simsum<span class="token punctuation">,</span> KaiTi<span class="token punctuation">,</span> <span class="token string">'Microsoft YaHei'</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h3><p><strong>字体粗细</strong></p><p><code>font-weight</code> 属性； 值从100、200-900、normal、bold、bolder、lighter；其中normal指代400，bold指代700，bolder和lighter是相对继承的粗细值增减100-200</p><p><strong>字体大小</strong></p><p><code>font-size</code> 属性；值为绝对大小（xx-small、x-small、small、medium、large、x-large、xx-large），smaller、larger，百分比，长度单位。</p><p>相邻绝对大小之间的缩放因子可能是1-1.2或者1.5 。相对大小smaller和larger则和字体粗细中的一个意思。百分比则是根据从父元素继承的大小来计算。长度单位即前面所说的pt、pc、in、cm、mm。</p><p><strong>字体风格</strong></p><p><code>font-style</code>属性；值为normal（竖直）、italic（斜体）、oblique（倾斜）；斜体是换样式的，倾斜是正常字体的普通倾斜，但是实际来看，这两个值的效果几乎没有区别。</p><p><strong>字体变形</strong></p><p><code>font-variant</code>属性；值为normal、small-caps；分别为默认样式、小型大写字母文本，其效果如下(小写变大写、大写更大)</p><style>    .variant{        color:red;        font-variant: small-caps;    }</style><p>    <div class="variant">            The Man is a Monkey.       </div></p>**字体简化**<p><code>font</code>属性，前三个属性是font-style、font-variant、font-weight，顺序任意，最后两个是font-size加&#x2F;line-height（可选），以及font-family。最后两个属性是必须的，前面忽略的部分视作normal。如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span> <span class="token property">font</span><span class="token punctuation">:</span> 500 small-caps 30px/1.2 SimSum<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><p><code>text-indent</code> ；值为百分数或者长度。考虑下面的例子，百分数的缩进参考值为父元素的宽度。所以，下面的p缩进为50px。该属性能够继承；并且，<strong>只作用于第一行文本</strong>，即使主动换行也是如此。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.test&#123;    width: 500px;text-indent: -50px;    padding-left: 50px;&#125;.he&#123;    text-indent: 10%;&#125;...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        拉山口积分龙卷风了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>啊师傅垃圾开发撒法         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>he<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        啊师傅垃圾开发撒法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>萨福克积分士大夫萨        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p><strong>水平对齐</strong></p><p><code>text-align</code>；值有left、right、center、justify；分别代表左对齐、右对齐、水平居中、两端对齐；其只能用于块级元素。</p><p><strong>行高</strong></p><p><code>line-height</code>; 值有百分比、长度单位、缩放因子。它标识着字框的高度，其与字体高度的差值为行间距（可能为负数）；如果采用相对长度单位其继承值是基于父元素的，所以最好采用缩放因子。考虑下面的例子：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">body&#123;    font-size: 10px;  &#125;div&#123;    line-height: 1em;&#125;p&#123;    font-size: 20px;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>          一大段话，能够分行      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现p标签的行高继承的值为div中的10px，它继承的是计算值！！解决方法是采用缩放因子 1，那么继承就是继承缩放因子的数值，而非行高的计算值。</p><p><strong>垂直对齐</strong></p><p><code>vertical-align</code>；值有baseline、sub、super、top、text-top、middle、bottom、text-bottom、百分比和长度单位。它的对齐的意思是与父元素对齐，所以只针对行内元素、图像等，对块级元素p等无用！</p><p>top、bottom为对齐文本框的上下边线；text-top等是字体大小的上下边线；middle则是中间；sub、super则是文本略微上下偏移，但感觉不如用标签；baseline则是对齐基线（小x的底部，其比文本底部略高）</p><h3 id="字间隔与字母间隔"><a href="#字间隔与字母间隔" class="headerlink" title="字间隔与字母间隔"></a>字间隔与字母间隔</h3><p><strong>字间隔</strong></p><p><code>word-spacing</code> ; 值为绝对长度。针对的是单个字符串的间隔，比如i am 这两个单词间的距离。其默认大小为normal（0）；其表现形式为一段句子之间的单词填充间隔。</p><p><strong>字母间隔</strong></p><p><code>letter-spacing</code> ;同字间隔，其针对的是单个字符之间的距离。注意，中文汉字视作字母间隔，字间隔对汉字没用。其表现形式为每个字母向后填充空白。</p><h3 id="其他文本属性"><a href="#其他文本属性" class="headerlink" title="其他文本属性"></a>其他文本属性</h3><p><code>opacity</code>; 控制元素的透明度，从0-1</p><p><strong>大小写</strong></p><p><code>text-transform</code>; 值有uppercase、lowercase、capitalize、none；分别代表大写、小写、首字母大写、不变。</p><p><strong>文本装饰</strong></p><p><code>text-decoration</code> ;值有none、underline、overline、line-through；没用继承 但是会出现一些穿过现象</p><p><strong>文本阴影</strong></p><p><code>text-shadow</code>；值有：颜色、右偏移量、下偏移量、模糊半径；前三个是必须的，模糊半径定义为模糊颜色显示的范围。例如<code>      text-shadow: green 1px 1px 3px;</code></p><p><strong>处理空格</strong></p><p><code>white-space</code>;一般而言p标签对于多个空白符都是合并、换行符是视作空白符</p><p><img src="/2025/08/23/css/image-20250808212014237.png"></p><p><strong>其他</strong></p><p>还有其他属性，比如 <code>writing-mode</code> 和 <code>text-orientation</code> 实现对联式排列</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">writing-mode</span><span class="token punctuation">:</span> vertical-rl<span class="token punctuation">;</span> <span class="token property">text-orientation</span><span class="token punctuation">:</span> upright<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>这是一段竖直排列的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">writing-mode</span><span class="token punctuation">:</span> vertical-rl<span class="token punctuation">;</span> <span class="token property">text-orientation</span><span class="token punctuation">:</span> upright<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>这是一段竖直排列的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本视觉格式化"><a href="#基本视觉格式化" class="headerlink" title="基本视觉格式化"></a>基本视觉格式化</h2><p><strong>基本框</strong></p><p> 每个元素都有一个假定的基本框；其中外边框可为负、内边框必须大于零，外边框通常是透明的，内边框会显示背景属性。</p><p><img src="/2025/08/23/css/image-20250809104139213.png"></p><p><strong>包含块</strong></p><p>如下面的例子，包含块是最近的祖先元素，所以p的包含块是div，它的布局依赖于div的布局。 </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一些术语</strong></p><ol><li><strong>正常流</strong>： 指文本从左往右、从上往下显示。</li><li><strong>非替换元素</strong>： 元素内容在文档中，则是非替换元素。比如段落的文本放在元素之内。</li><li><strong>替换元素</strong>： 作为其它内容占位符的一个元素。比如img</li><li><strong>块级元素</strong>：这是指段落标题或div之类的元素。这些元素在正常流时会在其框前和之后之后产生换行。</li><li><strong>行内元素</strong>：是块级元素的后代</li><li><strong>根元素</strong>：文档数顶端的元素。HTML中为html标签，XML中可以是任何元素。</li></ol><h3 id="块级元素格式化"><a href="#块级元素格式化" class="headerlink" title="块级元素格式化"></a>块级元素格式化</h3><p>在此之前，先让我们先看看块级元素的完整的框模型。一个元素的width定义为左内边界道右内边界的部分。</p><p><img src="/2025/08/23/css/image-20250809144442944.png"></p><p>简单来讲，正常流中块级元素框的水平部分总和等于父元素的width。比如一个div中有两个段落，外边距设置为1em。段落内容宽度width加上左右内边距、边框、外边距，它们之和就是div内容区的width。</p><p>水平格式化有7大属性： </p><p><code>margin-left</code> ，<code>border-left</code>， <code>padding-left</code> ，<code>width</code>， <code>padding-left</code> ，<code>border-right</code> ，<code>margin-right</code>。</p><p>margin和width可以设置成auto。此时会优先满足width，最后使得该元素与父级元素的width相同。</p><p>垂直格式化也有7大属性：</p><p><code>margin-top</code> ，<code>border-top</code>， <code>padding-top</code> ，<code>height</code>， <code>padding-bottom</code> ，<code>border-bottom</code> ，<code>margin-bottom</code>。</p><p>其中垂直相邻的外边距会合并（也可以理解为重叠）。如： 这样实际效果两个 li 标签之间的距离是15px。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li</span><span class="token punctuation">&#123;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内边距、边框和外边距"><a href="#内边距、边框和外边距" class="headerlink" title="内边距、边框和外边距"></a>内边距、边框和外边距</h2><h3 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h3><p>其指定了外边距的模式，要遵循</p><p>margin: top right bottom left的模式，可以发现，这是从上，按顺时针旋转的。有时为了方便，有值复制这一规则</p><ul><li>左边 使用 右边</li><li>下面 使用 上面</li><li>右边 使用 上面</li></ul><p>如图所示：</p><p><img src="/2025/08/23/css/image-20250810182306549.png"></p><p>例子：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0.25em 0 0.5em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">/* 等效于0.25 0 0.5 0 */</span><span class="token selector">h2</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0.15em 0.2em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/* 等效于0.15 0.2 0.15 0.2 */</span><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0.1em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/* 等效于0.1 0.1 0.1 0.1 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用负边距，可以有如下效果</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">p.p_normal</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">p.p_white</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 1em -1px 1em 25%<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">p.p_black</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 1em 3em -3em -3em<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 0 0 100px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> silver<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p_normal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p_white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p_normal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p_black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2025/08/23/css/image-20250810184222734.png"></p><p>当外边距应用到行内非替换元素，也就是普通的文本时，上下边距并不会影响行高，也可以理解为没用；只有左右边距会产生效果。当然，应用到图像之类的替换元素，则有效果。</p><h3 id="border"><a href="#border" class="headerlink" title="border"></a>border</h3><p><strong>边框类型</strong></p><p><code>border-style:  top right bottom left</code>； 值有solid（实线）、dotted（点线）、dashed（长点线）、none、hidden（隐藏）、inset等等。</p><p>这个属性和margin一样，有着值复制的规则。</p><p>当然，也可以利用 <code>border-top-style</code>，<code>border-right-style</code>…四个来单独指定</p><p><strong>边框宽度</strong></p><p><code>border-width</code>； 它的所有定义和用法和边框类型一样，有值传递和四个单独指定</p><p><strong>边框颜色</strong></p><p><code>border-color</code>; 同上； 还有一种特殊的颜色：transparent</p><pre class="line-numbers language-none"><code class="language-none">a:link, a:visited &#123;    border-style: solid;    border-width: 5px;    border-color: transparent;&#125;a:hover&#123;border-color: gray;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>简写属性</strong></p><p>我们发现，像上面定义边框，要写的东西太多了，所以就有了一种合并方法：</p><p><code>border-bottom</code>，<code>border-top</code>，<code>border-right</code>，<code>border-left</code>。应用如下</p><p><code>border-bottom: thick solid gray</code>；三个值分别定义宽度、样式、颜色。顺序任意、可以省略使用默认值（样式默认none）</p><p>进一步简写有全局边框：</p><p><code>border</code></p><p>它适用于边框四条边完全一样，否则需要添加规则自定义。如</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span> thick silver solid<span class="token punctuation">;</span><span class="token property">border-left-width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h3><p>其用法同上面一样，也有着值复制的规则。同样也可以利用padding-top等单独指定。所以不过多赘述。</p><h2 id="颜色与背景"><a href="#颜色与背景" class="headerlink" title="颜色与背景"></a>颜色与背景</h2><p><strong>前景色color</strong></p><p>这个没有什么可多说的。</p><p><strong>背景</strong></p><ol><li><code>background-color: color;</code> 背景色；默认为transparent；</li><li><code>background-image: url(..);</code>  背景图片；如果是全局图片，我们一般会搭配背景色，图片加载失败显示。</li><li><code>background-repeat</code>图片平铺设置；有四个值：repeat、repeat-x、repeat-y、no-repeat，分别表示水平从垂直平铺、水平平铺等；需要平铺时可以提升效率。</li><li><code>background-position</code>；</li></ol><p>关键词有left、top、right、center，最多使用两个，使用一个时另外默认为center；</p><p>使用百分数时，相对于内边距定位，先定位水平值！原理是背景图像该位置与容器位置重合。比如<code>bacground-position:50% 50%;</code>就是让图片中50%的点，与容器中50%的点重合。</p><p>使用长度值时，就是根据左上角的偏移定位了！</p><ol start="5"><li><code>background-attachment</code> 关联；值有scroll（默认）、fixed；在body中使用后者可以声明图像相对于可视区是固定的，因此不会受滚动的影响。</li><li><code>background-size</code> 尺寸；定义了图片显示大小，有auto（原始）、cover（缩放完全覆盖）、（缩放完整图片）、长度值以及百分比。</li></ol><p><strong>汇总</strong></p><p>通过 <code>background</code> 属性，可以对上面所有的声明进行汇总。无其他要求，如果有位置属性，那么posion时两个值要一起出现，省略值均默认。如果要添加尺寸，其必须在位置后面定义，且必须用 <code>/</code>分离（不能单独添加尺寸而不添加位置，</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> white <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> top left repeat-y fixed<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> white <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://picsum.photos/2000/1200?image=723<span class="token punctuation">)</span></span> center center / cover no-repeat fixed<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://picsum.photos/2000/1200?image=723<span class="token punctuation">)</span></span> / cover no-repeat fixed<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浮动与定位"><a href="#浮动与定位" class="headerlink" title="浮动与定位"></a>浮动与定位</h2><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p><code>float</code> 值有 left、right、none。</p><p>浮动元素的外边距不会合并；</p><p><code>clear</code> 值有left、right、both、none。其作用为确保不浮动</p><p>利用浮动可以写出多列效果，如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.column1, .column2, .column3</span><span class="token punctuation">&#123;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>克拉斯付款记录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>定位的类型</strong>：</p><p><code>positon</code>；值有 static、relative、absolute、fixed。</p><p>对于定位，有下列包含块规则</p><ul><li>根元素的包含块，即初始包含块为视窗大小的矩形</li><li>非根元素，其position为static或relative，包含块为最近的块级框、表单元格或行内块祖先框的内容边界构成</li><li>非根元素，其position为absolute，包含块为最近的position不是static的祖先元素。</li></ul><p>定义了定位类型之后，可以使用 <code>top、right、left、bottom</code>四个偏移属性来相对包含块进行偏移，定位。</p><p>还可以使用 <code>min-width</code>、 <code>min-height</code>、 <code>max-width</code>、 <code>max-height</code> 确定元素的最大、最小的长宽。如果元素内容太多了，溢出了元素大小，那么有：</p><p><code>overflow</code> 值有visible、hidden、scroll、auto；分别表示在元素框之外也可见、隐藏溢出元素、提供滚动条、只在必要时提供滚动条。</p><p><code>visibility: </code> 有hidden、visible和collapse。分别代表不可见、可见、表显示用。设置为不可见时，相当于隐藏元素，但是该元素仍占位置，和opacity不同，它无法接收任何交互，比如hover。</p><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>绝对定位元素的包含块为 定位类型是相对 的元素。考虑下面的例子:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"> <span class="token selector">p.container</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">b</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 8em<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 5em<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid gray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于第一个b元素，其祖先元素均为static，所以其包含块为初始包含块；对于第二个b元素，其包含块为第二个p元素；</p><p>注意：元素绝对定位时，会给其后代元素建立一个包含块。比如一个元素是绝对定位的，它的子元素也是，那么，子元素的包含块就是该元素（虽然其祖先元素的position是absolute）</p><p><strong>元素的叠放</strong></p><p>利用 <code>z-index</code> 控制元素的优先级，数字越大越前，一般默认为0。可以是负数。</p><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>一般用于设计固定框，随界面滚动而滚动的。比如：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">header</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">aside</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> silver<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token selector">div#main</span><span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>当元素相对定位时，它会从其正常位置移走，不过原来所占的空间并不会消失。</p><h2 id="表布局"><a href="#表布局" class="headerlink" title="表布局"></a>表布局</h2><h2 id="列表与生成内容"><a href="#列表与生成内容" class="headerlink" title="列表与生成内容"></a>列表与生成内容</h2><h2 id="用户界面样式"><a href="#用户界面样式" class="headerlink" title="用户界面样式"></a>用户界面样式</h2><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="固定宽度与流体布局"><a href="#固定宽度与流体布局" class="headerlink" title="固定宽度与流体布局"></a>固定宽度与流体布局</h3><p>下面是固定宽度布局</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>My Web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 960px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#content</span> <span class="token punctuation">&#123;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#nav,        #feature,        #footer</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.column1,        .column2,        .column3</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">li</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>logo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>produts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>contact<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>feature<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>feature<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article column1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>column 111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article column2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>column 222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article column3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>column 333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&amp;copy: Copyright 2025<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="/2025/08/23/css/image-20250815100113636.png"></p><p>对于流体布局，采用百分数。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#content</span> <span class="token punctuation">&#123;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#nav,#feature,#footer</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.column1,.column2,.column3</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 31.3%<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">li</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0.5em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#nav,#footer</span><span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0.5em 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#feature, .article</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 10em<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习 第1期 HTML</title>
      <link href="/2025/08/22/html/"/>
      <url>/2025/08/22/html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="网站访问原理"><a href="#网站访问原理" class="headerlink" title="网站访问原理"></a>网站访问原理</h2><p>简单来说，在浏览器输入网址后，会根据分配的DNS服务器解析域名的IP地址，这样通过IP地址就能找到web服务器，然后经过请求响应，浏览器接收服务器发来的HTML与CSS等，并且渲染成网站界面。</p><p>如果访问例如bilibili.com则Web服务器会返回bilibili.com&#x2F;index.html。如下图</p><p><img src="/2025/08/22/html/image-20250723214545307.png"></p><hr><h2 id="文本标签介绍"><a href="#文本标签介绍" class="headerlink" title="文本标签介绍"></a>文本标签介绍</h2><style>    table{        display: table !important;        color: black;        }table td{         text-align: -webkit-center !important;}    table th{        text-align: -webkit-center !important;    }</style><h3 id="文本内容定义"><a href="#文本内容定义" class="headerlink" title="文本内容定义"></a>文本内容定义</h3><table><thead><tr><th align="left">文本内容定义</th><th align="left">代码示例</th><th align="left">效果</th></tr></thead><tbody><tr><td align="left">标题（h）</td><td align="left"><code>&lt;h1&gt;Title&lt;/h1&gt;</code></td><td align="left">略</td></tr><tr><td align="left">段落（p）</td><td align="left"><code>&lt;p&gt;How old are you&lt;/p&gt;</code></td><td align="left">略</td></tr><tr><td align="left">长引用（blockquote）</td><td align="left"><code>&lt;blockquote&gt;我上早八&lt;/blockquote&gt; </code></td><td align="left"><blockquote>我上早八</blockquote></td></tr><tr><td align="left">短引用（q）</td><td align="left"><code>&lt;q&gt;我上早报&lt;q&gt;</code></td><td align="left"><q>我上早报<q></td></tr><tr><td align="left">缩写词（abbr）</td><td align="left"><code>&lt;abbr title=&quot;Professer&quot;&gt;Prof&lt;/abbr&gt;</code></td><td align="left"><abbr title="Professer">Prof</abbr></td></tr><tr><td align="left">引用来源（cite）</td><td align="left"><code>by &lt;cite&gt;baidu&lt;/cite&gt;</code></td><td align="left">by <cite>baidu</cite></td></tr><tr><td align="left">首次定义（dfn）</td><td align="left">在文档中首次解释某个术语</td><td align="left"></td></tr><tr><td align="left">设计者信息（address）</td><td align="left"><code>&lt;address&gt;邮件、姓名...&lt;/address&gt;</code></td><td align="left">用于表示页面设计者信息</td></tr><tr><td align="left">任意（span）</td><td align="left">仅仅用于标识一段文本，无特殊含义</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><p><strong>说明</strong>：</p><ul><li><p><code>h</code>标签范围为 1 - 6 。</p></li><li><p><strong>长引用</strong>一般包含一个段落的引用；<strong>短引用</strong>在浏览器中显示会添加引号(IE浏览器不支持)。二者均可添加cite表示引用来源。比如 <code>&lt;q cite = &quot;https://baidu.com&quot;&gt;&lt;/q&gt;</code></p></li><li><p><strong>缩写词</strong>abbr 其鼠标放置在上面会显示完整名字。</p></li><li><p><strong>引用来源</strong>cite 表示引用书籍、电影、报告，一般是名字；不同于短引用的文字。</p></li><li><p>abbreviation：缩略词</p></li></ul><p><strong>快捷键</strong>：</p><ul><li>快速生成标题<code>h$*6 后回车</code></li></ul><hr><h3 id="文本内容样式"><a href="#文本内容样式" class="headerlink" title="文本内容样式"></a>文本内容样式</h3><table><thead><tr><th align="left">文本内容样式</th><th>代码示例</th><th>效果</th></tr></thead><tbody><tr><td align="left">水平线（hr）</td><td><code>hello &lt;hr /&gt; world</code></td><td>hello <hr /> world</td></tr><tr><td align="left">换行符（br）</td><td><code>hhh.&lt;br /&gt; how are you</code></td><td>hhh.<br /> how are you</td></tr><tr><td align="left">加粗（b）</td><td><code>&lt;b&gt;World&lt;/b&gt;</code></td><td><b>World</b></td></tr><tr><td align="left">斜体（i）</td><td><code>&lt;i&gt;hello&lt;/i&gt;</code></td><td><i>hello</i></td></tr><tr><td align="left">上标（sup）</td><td><code>x&lt;sup&gt;2&lt;/sup&gt;</code></td><td>x<sup>2</sup></td></tr><tr><td align="left">下标（sub）</td><td><code>H&lt;sub&gt;2&lt;/sub&gt;</code></td><td>H<sub>2</sub></td></tr><tr><td align="left">表示重要（strong）</td><td><code>&lt;strong&gt;asdf&lt;/strong&gt;</code></td><td><strong>asdf</strong></td></tr><tr><td align="left">强调（em）</td><td><code>&lt;em&gt;asdfs&lt;/em&gt;</code></td><td><em>asdfs</em></td></tr><tr><td align="left">删除线（del）</td><td><code>&lt;del&gt;hh&lt;/del&gt;</code></td><td><del>hh</del></td></tr><tr><td align="left">插入线（ins）</td><td><code>&lt;ins&gt;hh&lt;/ins&gt;</code></td><td><ins>hh</ins></td></tr><tr><td align="left">不正确线（s）</td><td>表示不相关、不正确但不应删除</td><td><s>hhh</s></td></tr><tr><td align="left"></td><td></td><td></td></tr></tbody></table><p><strong>说明</strong>：</p><ul><li><strong>删除线</strong>和<strong>插入线</strong> 可以用于英文改错</li></ul><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>分为：有序列表、无序列表、定义列表、嵌套列表。</p><p>有序列表（Order List）; 列表（List Item）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>你<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义列表</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>列表的头，比如术语<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>列表的内容，比如解释术语的话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>列表的头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>列表的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嵌套列表</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>我d        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>safl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>safl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>safl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>你<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>快捷键：<code>ul&gt;li*5</code></strong></p><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><blockquote>注：<b>href</b>标识超文本引用，用在<b>link</b>和<b>a</b>.等元素上，<b>href</b>是引用和页面关联，是在当前元素和引用资源之间建立联系。</blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Baidu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./pic/background.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跳转百度<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token property">object-fit</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./pic/background.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../../C_study/main.c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mailto:429712080@qq.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链接分为：指向其他网站的链接； 指向同一网站其他位置的链接（比如其他html）。前者用的是绝对地址，后者为相对URL。</p><p>email链接，为mailto前缀，打开时会启动电脑中的email程序（比如outlook、企业微信等等）</p><ul><li>在新窗口打开链接，定义targer即可</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./pic/background.png<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>链接到当前界面中某个位置。通过元素id即可定位</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  S S GDFGSDGF  SAFAFDSDF FV<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>链接到其他界面的某个位置。原理同上，亦可以定位到已知其他网站</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./else.html#text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>返回顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 上面的text为else.html中某个元素的id，注意是直接紧跟的写的--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><blockquote><b>src</b>表示引用资源，表示替换当前元素，用在<b>img，script，iframe</b>上，    src是页面内容不可缺少的一部分。</blockquote><p>​    </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中</p><p><strong>alt：替换文本，就是无法正常显示时的占位符</strong></p><p><strong>title：鼠标悬停的提示</strong></p><p><strong>宽高等其他设定，建议通过后续的CSS定义</strong></p><p>图像相对于段落的关系，涉及到块级元素和内联元素的关系。例如</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token comment">&lt;!-- img是内联元素，其位于块级元素中，不会另起一行 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这段会另起一行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这段首行会紧接在图片后面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这段会另<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>这段为图片嵌入文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图像格式及原理"><a href="#图像格式及原理" class="headerlink" title="图像格式及原理"></a>图像格式及原理</h3><p><code>.jpeg</code> 适用于有多种不同颜色的图片，比如雪景，具有很多微小差异的颜色</p><p><code>.gif &amp; .png</code> 适合少量颜色，有大面积同色区域的平面彩色。</p><p>屏幕分辨率的意思就是一个确定尺寸的屏幕上，像素点的多少。比如电脑分辨率为1920*1080，意思就是 宽度上有1920个像素点排列，高度上有1080个像素点排列（其中一个像素点是一个单色）。当然，这针对的是像素图（位图）。下面来介绍几种图片类型</p><ul><li><p><strong>位图</strong>，即像素图，又像素点组成，存在缩放失真的情况，而且占用空间大。</p></li><li><p><strong>矢量图</strong>，如AVG，AI，其原理是数学公式(如XML标记语言)表示点，缩放无失真，占用空间小。一般用于logo、简单的平面设计、卡通人物。</p></li><li><p><strong>GIF动画</strong>，显示几帧的图像，用于简单动画。然而过多帧会导致网页加载缓慢</p></li><li><p><strong>透明GIF</strong>，图像的透明部分有直边，并且这部分是100%透明的。用于处理简单图形的透明要求，过于复杂 边缘会出现锯齿（”楼梯状”像素）当然，如果要生成透明GIF动画另说</p></li><li><p><strong>PNG</strong>，图像的透明部分包含斜线或者圆边，或者你想使用半透明的透明度或投影。其能平滑渲染复杂边缘，一般是透明首选。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#apng_animated_portable_network_graphics">APNG（动态可移植网络图形）</a>——无损动画序列的不错选择（GIF 性能较差）。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#avif_image">AVIF（AV1 图像文件格式）</a>——静态图像或动画的不错选择，其性能较好。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#gif_graphics_interchange_format">GIF（图像互换格式）</a>——<em>简单</em>图像和动画的不错选择。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#jpeg_joint_photographic_experts_group_image">JPEG（联合图像专家组）</a>——有损压缩静态图像的不错选择（目前最流行的格式）。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#png_portable_network_graphics">PNG（便携式网络图形）</a>——对于无损压缩静态图像而言是不错的选择（质量略好于 JPEG）。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#svg_scalable_vector_graphics">SVG（可缩放矢量图形）</a>——矢量图像格式。用于必须以不同尺寸准确描绘的图像。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Media/Guides/Formats/Image_types#webp_image">WebP（网络图片格式）</a>——图像和动画的绝佳选择。</p></li></ul><h3 id="图形说明"><a href="#图形说明" class="headerlink" title="图形说明"></a>图形说明</h3><p>利用下面的两个标签，定义图片说明。感觉一般用于类似商品展示需要对图片进行说明，一般图片都只是为了好看。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./pic/background.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>这是图片的描述说明    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a><strong>表格</strong></h2><p>下面是一个简单的表格。tr：table row；td：table data。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>快捷键：<code>table&gt;tr*4&gt;td*3&#123;单元格&#125;</code></strong></p><p>其他标签</p><ul><li>th：代表行或者列的标题，网页会自动加粗</li><li>thead；tbody；tfoot。一般作标识作用</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学分<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 可以使用scope标识是列&amp;行标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>语文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>数学<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>英语<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>40<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>150<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead>    <th></th>    <th scope="col">学分</th>    <th scope="col">成绩</th>    <!-- 可以使用scope标识是列&行标题 --></thead><tbody>    <tr>        <th scope="">语文</th>        <td>1</td>        <td>50</td>    </tr>        <tr>        <th scope="row">数学</th>        <td>2</td>        <td>60</td>        </tr>        <tr>        <th scope="row">英语</th>        <td>3</td>        <td>40</td>        </tr></tbody><tfoot>    <th></th>       <td>6</td>       <td>150</td></tfoot></table><h3 id="跨行与跨列"><a href="#跨行与跨列" class="headerlink" title="跨行与跨列"></a>跨行与跨列</h3><p>跨行：在th、td标签使用rowspan；跨列：在th、td标签使用colspan即可；要注意匹配。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>不好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>    <table>        <tr>            <td colspan = "2">你好</td>            <td rowspan = "2">不好</td>        </tr>        <tr>            <td>1</td>            <td>2</td>        </tr></table></p><p>​    </p><h2 id="表单（日后更新）"><a href="#表单（日后更新）" class="headerlink" title="表单（日后更新）"></a>表单（日后更新）</h2><p>因为涉及到服务器才能工作，所以目前暂时跳过。</p><h2 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h2><h3 id="DOCTYPE-（文档类型）"><a href="#DOCTYPE-（文档类型）" class="headerlink" title="DOCTYPE （文档类型）"></a>DOCTYPE （文档类型）</h3><p>用于声明网页采用的HTML版本。如HTML 5; HTML 4; XHTML等等。下面就是HTML 5 的声明</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>注释</strong>： 用 <code>&lt;!-- --&gt;</code>表示注释，在编译器（VScode），直接<code>Ctrl + /</code>即可</p></li><li><p><strong>id特性</strong>：唯一标识符（在一个页面中）</p></li><li><p><strong>class特性</strong>：用于单独标识出一些标签</p></li></ul><h3 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h3><p><strong>块级元素</strong>： 在浏览器中显示总是另起一行。包括h标签、p标签、li标签、ul标签等等</p><p><strong>内联元素</strong>： 与它临近元素出现在同一行内。包括a标签、b标签、em标签、img标签等等。</p><h3 id="div"><a href="#div" class="headerlink" title="div"></a>div</h3><p>将文本和元素集中在一个块级元素中。div会使得元素另起一行。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    hello    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        wokao    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--end of header --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="span"><a href="#span" class="headerlink" title="span"></a>span</h3><p>将文本和元素集中在一个内联元素中。</p><p>用途一般是为了控制其中元素的样式</p><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>是一种内联框架。用于嵌入网页，比如google地图或者YouTube、哔哩哔哩视频等等</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>     <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://maps.google.com/maps?q=地址&amp;output=embed<span class="token punctuation">"</span></span>     <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>600<span class="token punctuation">"</span></span>     <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span>     <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span>         <span class="token attr-name">allowfullscreen</span> <span class="token attr-name">允许全屏</span>    <span class="token attr-name">loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 延迟加载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><p>表示<strong>页面信息</strong>。特性一般配套name和content使用。有keywords、description、robots；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这里大概就是浏览器搜索界面显示的网页预览<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>网页关键字大概是用英文逗号隔开<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nofllow,告诉爬虫爬取规则<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>牢小科<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pragma<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-cache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--防止缓存 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>expires<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>过期时间设置、有严格格式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转义字符与特殊字符"><a href="#转义字符与特殊字符" class="headerlink" title="转义字符与特殊字符"></a>转义字符与特殊字符</h3><p>比如要显示编写代码中用到的 <code>&lt; &gt; &amp; &quot; &#39; * /</code>等字符，要显示，需要用到转义（不同于C语言的用法）。如： <code>&amp;copy</code> <code>&amp;amp</code> …</p><div>    &copy  &amp</div><h2 id="Flash、视频和音频"><a href="#Flash、视频和音频" class="headerlink" title="Flash、视频和音频"></a>Flash、视频和音频</h2><p> 由于flash已经逐渐淘汰了（比如很多基于flash的游戏），所以暂时不作了解。</p><p>在网页中插入视频，方法一正如同前文所写，托管（其实就是发布）到视频平台，然后通过iframe嵌入（比如bilibili、youtube等）。</p><p>HTML5中的<code>&lt;video&gt;</code>标签，目前用于展示视频</p><h3 id="video"><a href="#video" class="headerlink" title="video"></a>video</h3><p>特征值有src；poster(未播放时的图像)；width、height；controls（浏览器提供播放控件）；loop；autoplay；preload（三个值none auto metadata）分别代表浏览器不加载、加载、加载基本信息</p><pre class="line-numbers language-none"><code class="language-none">&lt;video src&#x3D;&quot;a.mp4&quot; poster&#x3D;&quot;.&#x2F;pic&#x2F;background.png&quot;  preload&#x3D;&quot;metadata&quot;  controls&gt;&lt;&#x2F;video&gt;&lt;video src&#x3D;&quot;a.webm&quot; preload&#x3D;&quot;auto&quot; controls&gt;&lt;&#x2F;video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="source"><a href="#source" class="headerlink" title="source"></a><strong>source</strong></h3><p><strong>多个视频源</strong> src；type（告诉浏览器视频格式）；codecs（可选指定编码器）。eg：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">loop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./a.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./a.webm<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/webm<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其作用是兼容不同浏览器，其会加载其中一个（可能是顺序尝试）；还可以添加media属性，以适配不同屏幕。</p><h3 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h3><p>用法同video，也可以使用多个音频源。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./Counting Stars - OneRepublic.flac<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>audio/flac<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">autoplay</span> <span class="token attr-name">loop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="正斜杠-与反斜杠-与"><a href="#正斜杠-与反斜杠-与" class="headerlink" title="正斜杠&#x2F;与反斜杠\与&amp;"></a>正斜杠&#x2F;与反斜杠\与&amp;</h2><p>在HTML中反斜杠并没有特殊作用。</p><p>正斜杠则用于很多。例如： <strong>路径分隔符</strong>；<strong>结束标签</strong>；<strong>自闭合</strong>；<strong>协议或域名后的分隔符</strong></p><p>&amp;在HTML中标识转义作用。</p><h2 id="VScode简要使用及插件"><a href="#VScode简要使用及插件" class="headerlink" title="VScode简要使用及插件"></a><strong>VScode简要使用及插件</strong></h2><p><strong>插件：</strong></p><ol><li><p><strong>CHINESE（中文简体安装包）</strong></p></li><li><p><strong>Live Server（实时更新显示HTML）</strong></p></li></ol><p><strong>常用快捷键：</strong></p><ol><li><strong>Shift+Alt+F ——代码格式化（排版</strong></li><li><strong>Alt+Up&#x2F;Down（上下移动，小箭头）</strong></li><li><strong>Shift+Alt+Up&#x2F;Down （迅速复制</strong></li><li><strong>Ctrl+H ——快速替换</strong></li><li><strong>Ctrl+&#x2F; ——注释和取消</strong></li><li><strong>Ctrl+ 空格 ——重新显示代码自动补全框</strong></li></ol><p>VScode中输入 <code>!</code>后回车，即可自动生成相关代码</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>停更通知</title>
      <link href="/2025/08/21/2025/"/>
      <url>/2025/08/21/2025/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>大概是7月份的时候，尝试提交个人网站地图到bing，过了约一个月，bing爬虫也是成功工作了。于是，在浏览器也可以检索到本站了。（无关主题的话</p><p>咳咳，下面还是来说明停更通知。</p><p>由于开学将至，可想而知学院又会有一堆破事，加之课程十分多，需要时间调整自己，虽然只求不挂科罢了；所以便发布停更通知，估计有一段时间不会再更新文章了。闲暇时间会放在学习更新JavaScript、CSS等前端技术上。并且最近有点心烦意乱，需要一定的时间用来思考、思考、思考。</p><p>所以特此通知。</p>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客撰写指南（持续更新中）</title>
      <link href="/2025/07/25/con-bolg-write/"/>
      <url>/2025/07/25/con-bolg-write/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：介绍hexo中blog撰写<span id="more"></span>的小技巧等等。</p><h2 id="一键三连（只需点击-bat）"><a href="#一键三连（只需点击-bat）" class="headerlink" title="一键三连（只需点击.bat）"></a>一键三连（只需点击.bat）</h2><p>为什么不用powershell呢？因为发现会有——因为在此系统上禁止运行脚本。有关详细信息，请参阅…——的问题，想要解决又怕会有安全隐患，比如病毒执行脚本… 所以还是改成用CMD，甚至不用管理员权限，完成操作。</p><p>创建一个.bat文件，右键用记事本编辑。复制下面的代码，注意修改路径</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo oncd &#x2F;d E:\blog_materycmd &#x2F;k &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; start http:&#x2F;&#x2F;localhost:4000&#x2F; &amp;&amp; hexo s&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>命令解释：</p><ol><li><code>@echo on</code>就是显示 命令回显 可以设置成off，都一样。圈中的就是回显</li></ol><p><img src="/2025/07/25/con-bolg-write/image-20250725105234788.png"></p><ol start="2"><li><code>cd /d E:\blog_matery</code> <code>cd</code>简单的跳转目录命令，<code>/d</code>意味着需要跳转盘符，因为似乎默认在C盘启动CMD。否则CMD无动于衷，j具体如下图</li></ol><p><img src="/2025/07/25/con-bolg-write/image-20250725105823740.png"></p><p>也可以先用 <code>e:</code>跳转。这里不过多介绍CMD的东西。反正意思就是将后面的路径改成你以前手动用Git一键三连的路径。</p><ol start="3"><li><code>cmd /k &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; start http://localhost:4000/ &amp;&amp; hexo s&quot;</code></li></ol><p><code>/k</code>是执行完不关闭，<del>似乎可以去掉</del>，后面的就是三连的命令了，很容易看懂，中间加了个自动跳转网站的命令。后面我发现不用CMD也可以，见下面的自定义：&#x2F;</p><p>新增文章（自动关闭）——一般只新增文章无需clean</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo oncd &#x2F;d E:\blog_materyhexo g &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一键四连（上传完调试）</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo oncd &#x2F;d E:\blog_materycmd &#x2F;k &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; start http:&#x2F;&#x2F;localhost:4000&#x2F; &amp;&amp; hexo s&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一键三连（自动关闭）——一般涉及到删除文章才clean</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo oncd &#x2F;d E:\blog_materyhexo clean &amp;&amp; hexo g &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一键调式（不上传到GitHub）</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo oncd &#x2F;d E:\blog_materyhexo g &amp;&amp; start http:&#x2F;&#x2F;localhost:4000&#x2F; &amp;&amp; hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="文章中引入HTML"><a href="#文章中引入HTML" class="headerlink" title="文章中引入HTML"></a>文章中引入HTML</h2><p>突然发现Markdown也支持HTML语法，如下，注意 要换行请使用Shift + Enter</p><p><img src="/2025/07/25/con-bolg-write/image-20250725161953923.png"></p><p>很可惜，img标签无法正常使用，源于其路径无法正常解析。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>./con-bolg-write/image-20250725161953923.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--无法使用！！！--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一般来说，直接在Markdown编辑器里面打字就行了，引入HTML主要是为了结合CSS自定义一些文本样式，或者一些特殊的展现形式（当然，更复杂的正在学习中，eg：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>这是测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote>    <b>这是测试</b></blockquote><h2 id="文章引入CSS自定义样式"><a href="#文章引入CSS自定义样式" class="headerlink" title="文章引入CSS自定义样式"></a>文章引入CSS自定义样式</h2><p>对于一些固有设定的（比如p标签中的字体大小），需要加 !important后缀。当然，我们一般引入选择器（虽然可能与主题的冲突，那就取点奇怪的class）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">table</span><span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> table <span class="token important">!important</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token selector">table td</span><span class="token punctuation">&#123;</span>         <span class="token property">text-align</span><span class="token punctuation">:</span> -webkit-center <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token selector">table th</span><span class="token punctuation">&#123;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> -webkit-center <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加入类选择器更加可控。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.wokao</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>wokao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            这是测试文档      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><style>.wokao{color: blue;font-size: 30px;}</style><p>    <div class = "wokao">          <span>            这是测试文档      </span>  </div></p><hr><h2 id="通过iframe引入视频（待理解像素问题后补充"><a href="#通过iframe引入视频（待理解像素问题后补充" class="headerlink" title="通过iframe引入视频（待理解像素问题后补充"></a>通过iframe引入视频（待理解像素问题后补充</h2><p>参考链接：<a href="https://cloud.tencent.com/developer/article/2266871">使用更干净的哔哩哔哩iframe播放器-腾讯云开发者社区-腾讯云</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//www.bilibili.com/blackboard/html5mobileplayer.html?bvid=BV1J18bzgE8H&amp;danmaku=1<span class="token punctuation">"</span></span>           <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span> <span class="token property">aspect-ratio</span><span class="token punctuation">:</span> 16/9</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">allowfullscreen</span>           <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>bvid从视频URL可看到，danmaku标识弹幕是否开启。</p>]]></content>
      
      
      <categories>
          
          <category> blog撰写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章撰写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习 第4期</title>
      <link href="/2025/07/13/cstudy3/"/>
      <url>/2025/07/13/cstudy3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="结构体初探"><a href="#结构体初探" class="headerlink" title="结构体初探"></a>结构体初探</h2><p>通过下面一段代码，可以基本了解道结构体的定义、初始化、访问。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">stuff</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">char</span> code<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> cost<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">stuff</span> monkey <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token number">19</span><span class="token punctuation">,</span>        <span class="token string">"123"</span><span class="token punctuation">,</span>        <span class="token number">1.414</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">stuff</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token function">sprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"number:%d code:%s cose:%f"</span><span class="token punctuation">,</span> monkey<span class="token punctuation">.</span>number<span class="token punctuation">,</span> monkey<span class="token punctuation">.</span>code<span class="token punctuation">,</span> monkey<span class="token punctuation">.</span>cost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a>嵌套结构</h2><p>在结构中包含另一个结构的用法如下。访问嵌套结构的成员，要使用两次.运算符，其比 <code>&amp;</code>的优先级更高。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LEN</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token keyword">struct</span> <span class="token class-name">names</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> first<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> last<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">guy</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">names</span> handle<span class="token punctuation">;</span>    <span class="token keyword">char</span> favfood<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> job<span class="token punctuation">[</span>LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> income<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">guy</span> fellow <span class="token operator">=</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span><span class="token string">"liu"</span><span class="token punctuation">,</span><span class="token string">"hang"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"food"</span><span class="token punctuation">,</span>        <span class="token string">"teacher"</span><span class="token punctuation">,</span>        <span class="token number">520.2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">guy</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"name:%s %s, favfood:%s, job: %s, income: %f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token string">"name:%s %s, favfood:%s, job: %s, income: %f"</span><span class="token punctuation">,</span>         fellow<span class="token punctuation">.</span>handle<span class="token punctuation">.</span>first<span class="token punctuation">,</span> fellow<span class="token punctuation">.</span>handle<span class="token punctuation">.</span>last<span class="token punctuation">,</span> fellow<span class="token punctuation">.</span>favfood<span class="token punctuation">,</span> fellow<span class="token punctuation">.</span>job<span class="token punctuation">,</span> fellow<span class="token punctuation">.</span>income<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指向结构的指针"><a href="#指向结构的指针" class="headerlink" title="指向结构的指针"></a>指向结构的指针</h2><p>用指针访问成员，使用方法例如： <code>p == &amp;gou[0], p-&gt;age为gou[0].age或者(*p).age</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> xing<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ming<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Name<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    Name name_val<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Person<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Person gou<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#123;</span><span class="token string">"Li"</span><span class="token punctuation">,</span> <span class="token string">"Ming"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token number">20</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#123;</span><span class="token string">"Wan"</span><span class="token punctuation">,</span> <span class="token string">"Wu"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token number">25</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Person<span class="token operator">*</span> p <span class="token operator">=</span> gou<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name: %-5s %-5s, age: %d\n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>name_val<span class="token punctuation">.</span>xing<span class="token punctuation">,</span> p<span class="token operator">-></span>name_val<span class="token punctuation">.</span>ming<span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构的传递"><a href="#结构的传递" class="headerlink" title="结构的传递"></a>结构的传递</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">funds</span><span class="token punctuation">&#123;</span>      <span class="token keyword">char</span> bank<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> bankfund<span class="token punctuation">;</span>    <span class="token keyword">char</span> save<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> savefund<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">sum_0</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">sum_1</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">funds</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">sum_2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">funds</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">funds</span> stan <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"Bank"</span><span class="token punctuation">,</span>        <span class="token number">4032.58</span><span class="token punctuation">,</span>        <span class="token string">"Lucky"</span><span class="token punctuation">,</span>        <span class="token number">8543.94</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stan: %.2f。\n"</span><span class="token punctuation">,</span> <span class="token function">sum_0</span><span class="token punctuation">(</span>stan<span class="token punctuation">.</span>bankfund<span class="token punctuation">,</span> stan<span class="token punctuation">.</span>savefund<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stan: %.2f。\n"</span><span class="token punctuation">,</span> <span class="token function">sum_1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stan: %.2f。\n"</span><span class="token punctuation">,</span> <span class="token function">sum_2</span><span class="token punctuation">(</span>stan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">double</span> <span class="token function">sum_0</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">sum_1</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">funds</span><span class="token operator">*</span> money<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>money<span class="token operator">-></span>bankfund <span class="token operator">+</span> money<span class="token operator">-></span>savefund<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">sum_2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">funds</span> money<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>money<span class="token punctuation">.</span>bankfund <span class="token operator">+</span> money<span class="token punctuation">.</span>savefund<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构与文件"><a href="#结构与文件" class="headerlink" title="结构与文件"></a>结构与文件</h2><p>下面是一个简单的图书馆书本目录。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">s_gets</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">book</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> title<span class="token punctuation">[</span>MAXTITL<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> author<span class="token punctuation">[</span>MAXAUTL<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">float</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">book</span> library<span class="token punctuation">[</span>MAXBKS<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> filecount<span class="token punctuation">;</span>FILE<span class="token operator">*</span> pbooks<span class="token punctuation">;</span><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">book</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pbooks <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"book.dat"</span><span class="token punctuation">,</span> <span class="token string">"ab+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Can't Open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">rewind</span><span class="token punctuation">(</span>pbooks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> MAXBKS <span class="token operator">&amp;&amp;</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pbooks<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"现在的书目录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s by %s: %.2f\n"</span><span class="token punctuation">,</span> library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span> library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>filecount <span class="token operator">=</span> count<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> MAXBKS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"书满了"</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"请添加新书的名字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"按下回车停止输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> MAXBKS <span class="token operator">&amp;&amp;</span> <span class="token function">s_gets</span><span class="token punctuation">(</span>library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> MAXTITL<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"现在输入作者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">s_gets</span><span class="token punctuation">(</span>library<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span> MAXAUTL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"输入价格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>library<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> MAXBKS<span class="token punctuation">)</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"输入下一个书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"下面是最新书目"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s by %s: %.2f\n"</span><span class="token punctuation">,</span> library<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> library<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span> library<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>library<span class="token punctuation">[</span>filecount<span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> count <span class="token operator">-</span> filecount<span class="token punctuation">,</span> pbooks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No Books?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Byd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pbooks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">s_gets</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> ret_val<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> find<span class="token punctuation">;</span>ret_val <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret_val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>find <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token operator">*</span>find <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ret_val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="联合与枚举"><a href="#联合与枚举" class="headerlink" title="联合与枚举"></a>联合与枚举</h2><h3 id="联合"><a href="#联合" class="headerlink" title="联合"></a>联合</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">union</span> hold <span class="token punctuation">&#123;</span><span class="token keyword">int</span> digit<span class="token punctuation">;</span><span class="token keyword">double</span> bigfl<span class="token punctuation">;</span><span class="token keyword">char</span> letter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">union</span> hold valA<span class="token punctuation">;</span>valA<span class="token punctuation">.</span>letter <span class="token operator">=</span> <span class="token char">'R'</span><span class="token punctuation">;</span><span class="token keyword">union</span> hold valB <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">44</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">union</span> hold valC <span class="token operator">=</span> valA<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>注意在C++中枚举不能++</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">spectrum</span> <span class="token punctuation">&#123;</span> red<span class="token punctuation">,</span> orange<span class="token punctuation">,</span> yellow<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> colors<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"red"</span><span class="token punctuation">,</span><span class="token string">"orange"</span><span class="token punctuation">,</span><span class="token string">"yellow"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">,</span><span class="token string">"blue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">enum</span> <span class="token class-name">spectrum</span> color<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>color <span class="token operator">=</span> red<span class="token punctuation">;</span> color <span class="token operator">&lt;=</span> blue<span class="token punctuation">;</span> color <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">==</span> yellow<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> red<span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> orange<span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> yellow<span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> green<span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> blue<span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">union</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> int_value<span class="token punctuation">;</span><span class="token keyword">float</span> float_value<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> string_value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Data<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>INT<span class="token punctuation">,</span>FLOAT<span class="token punctuation">,</span>STRING<span class="token punctuation">&#125;</span>DataType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>DataType type<span class="token punctuation">;</span>Data data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>TypeData<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> TypeData<span class="token operator">*</span> print_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>TypeData data1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> INT<span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>TypeData data2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> FLOAT <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>data2<span class="token punctuation">.</span>data<span class="token punctuation">.</span>float_value <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span>TypeData data3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> STRING <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>data3<span class="token punctuation">.</span>data<span class="token punctuation">.</span>string_value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"asd"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data3<span class="token punctuation">.</span>data<span class="token punctuation">.</span>string_value<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>data3<span class="token punctuation">.</span>data<span class="token punctuation">.</span>string_value<span class="token punctuation">,</span> <span class="token string">"ads"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> TypeData<span class="token operator">*</span> print_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>print_data<span class="token operator">-></span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> INT<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int_value: %d\n"</span><span class="token punctuation">,</span> print_data<span class="token operator">-></span>data<span class="token punctuation">.</span>int_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> FLOAT<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"float_value: %f\n"</span><span class="token punctuation">,</span> print_data<span class="token operator">-></span>data<span class="token punctuation">.</span>float_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> STRING<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"string_value: %s\n"</span><span class="token punctuation">,</span> print_data<span class="token operator">-></span>data<span class="token punctuation">.</span>string_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 结构体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习 第3期</title>
      <link href="/2025/07/12/cstudy2/"/>
      <url>/2025/07/12/cstudy2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h2><h3 id="fopen-打开文件"><a href="#fopen-打开文件" class="headerlink" title="fopen(打开文件)"></a>fopen(打开文件)</h3><p><code>FILE *fopen(const char *filename, const char *mode)</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"./source/test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者fopen(".\\source\\a.text","w");</span>    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"abcdefghijklmn"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"./source/test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">文件使用方式</th><th>含义</th><th>如果指定文件不存在</th></tr></thead><tbody><tr><td align="left">“r”(只读)</td><td>为了输入数据，打开一个已经存在的文本文件</td><td>出错</td></tr><tr><td align="left">“w”(只写)</td><td>为了输出数据，打开一个文本文件</td><td>建立一个新的文件</td></tr><tr><td align="left">“a”(追加)</td><td>向文本文件尾添加数据</td><td>建立一个新的文件</td></tr><tr><td align="left">“rb”(只读)</td><td>为了输入数据，打开一个二进制文件</td><td>出错</td></tr><tr><td align="left">“wb”(只写)</td><td>为了输出数据，打开一个二进制文件</td><td>建立一个新的文件</td></tr><tr><td align="left">“ab”(追加)</td><td>向一个二进制文件尾添加数据</td><td>出错</td></tr><tr><td align="left">“r+”(读写)</td><td>为了读和写，打开一个文本文件</td><td>出错</td></tr><tr><td align="left">“w+”(读写)</td><td>为了读和写，建一个新的文件</td><td>建立一个新的文件</td></tr><tr><td align="left">“a+”(读写)</td><td>打开一个文件，在文件尾进行读写</td><td>建立一个新的文件</td></tr><tr><td align="left">“rb+”(读写)</td><td>为了读和写打开一个二进制文件</td><td>出错</td></tr><tr><td align="left">“wb+”(读写)</td><td>为了读和写，新建一个新的二进制文件</td><td>建立一个新的文件</td></tr><tr><td align="left">“ab+”(读写)</td><td>打开一个二进制文件，在文件尾进行读和写</td><td>建立一个新的文件</td></tr></tbody></table><p>  注：当使用“w”，“wb”，“w+”，“wb+”打开文件时会清除文件原本存储的数据。</p><h3 id="fclose-关闭文件"><a href="#fclose-关闭文件" class="headerlink" title="fclose(关闭文件)"></a>fclose(关闭文件)</h3><p>该函数的返回值是int类型的：<strong>如果关闭成功就返回0值，否则返回EOF（-1）值。</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打开</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否打开成功</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fopen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//关闭失败</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fclose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rename-重命名"><a href="#rename-重命名" class="headerlink" title="rename(重命名)"></a>rename(重命名)</h3><p><code>int rename(const char *old_filename, const char *new_filename)</code></p><p>如果成功，则返回零。如果错误，则返回 -1，并设置 errno(错误信息)。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> oldname<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"./source/a.text"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> newname<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"./source/newfile.txt"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rename</span><span class="token punctuation">(</span>oldname<span class="token punctuation">,</span> newname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件重命名成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"错误：不能重命名该文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fflush-刷新缓冲"><a href="#fflush-刷新缓冲" class="headerlink" title="fflush(刷新缓冲)"></a>fflush(刷新缓冲)</h3><p><code>int fflush(FILE *stream)</code></p><ul><li><p>如果成功刷新缓冲区，<code>fflush()</code> 返回 0。</p></li><li><p>如果发生错误，返回 <code>EOF</code>，并且设置错误标识符（<code>ferror</code>）。</p></li><li><p>如果 <code>stream</code> 为 <code>NULL</code>，则会刷新所有输出流的缓冲区。</p></li><li><p>如果 <code>stream</code> 是文件指针，则刷新该文件流的输出缓冲区。</p></li></ul><h3 id="feof-末尾判定"><a href="#feof-末尾判定" class="headerlink" title="feof(末尾判定)"></a>feof(末尾判定)</h3><p>当设置了与流关联的文件结束标识符时，该函数返回一个非零值，否则返回零。意思就是如果读取到文件末尾，则返回一个非零值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><h3 id="fputc与fgec-单字符存储与读取"><a href="#fputc与fgec-单字符存储与读取" class="headerlink" title="fputc与fgec(单字符存储与读取)"></a>fputc与fgec(单字符存储与读取)</h3><p>成功运行时返回所存入字符的ASCII码值，否则返回EOF（-1）值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">'a'</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这时候，pf就是字母表：abcde...了</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时读取文件要用"r"的方式打开</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fputs与fgets-快速存储与读取"><a href="#fputs与fgets-快速存储与读取" class="headerlink" title="fputs与fgets(快速存储与读取)"></a>fputs与fgets(快速存储与读取)</h3><p>fgets只能读取一行的数据</p><p><code>char *fgets(char *str, int n, FILE *stream)</code></p><p>如果成功，该函数返回相同的 str 参数。如果到达文件末尾或者没有读取到任何字符，str 的内容保持不变，并返回一个空指针。</p><p>如果发生错误，返回一个空指针。 可以使用连续的fgets读取到两行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   FILE<span class="token operator">*</span> fp  <span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"abc\ndef\n"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 需要注意，这里不加rewind的话，指针仍指向文件末尾，所以fgets会返回NULL.</span><span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputs</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputs</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fprintf与fscanf-以文本存储与读取"><a href="#fprintf与fscanf-以文本存储与读取" class="headerlink" title="fprintf与fscanf(以文本存储与读取)"></a>fprintf与fscanf(以文本存储与读取)</h3><p><code>int fprintf(FILE *stream, const char *format, ...)</code></p><p><code>int fscanf(FILE *stream, const char *format, ...)</code></p><p>如果成功，该函数返回成功匹配和赋值的个数。如果到达文件末尾或发生读错误，则前者返回一个负数，后者返回 EOF。</p><p>注意，一般而言，fscanf遇到空格便会停止对这个的读取。fprnitf本质如同sprintf，把输入转化为字符形式。fscanf则是根据定义，把字符转化为要求的输出格式。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> str2<span class="token punctuation">;</span><span class="token keyword">int</span> str3<span class="token punctuation">;</span><span class="token keyword">float</span> year<span class="token punctuation">;</span>FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%s %c %d %.2f"</span><span class="token punctuation">,</span> <span class="token string">"We"</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token number">2025</span><span class="token punctuation">,</span> <span class="token number">1.53</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%s %c %d %f"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>str2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>str3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>year<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"scanf_error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read String1 |%s|\n"</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// We</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read String2 |%c|\n"</span><span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// are</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read String3 |%d|\n"</span><span class="token punctuation">,</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Read Integer |%f|\n"</span><span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fwrite与fread-以二进制存储与读取"><a href="#fwrite与fread-以二进制存储与读取" class="headerlink" title="fwrite与fread(以二进制存储与读取)"></a>fwrite与fread(以二进制存储与读取)</h3><p><code>size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)</code></p><p><code>size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)</code></p><ul><li><strong>ptr</strong> – 这是指向要被写入的元素数组的指针。</li><li><strong>size</strong> – 这是要被写入的每个元素的大小，以字节为单位。</li><li><strong>nmemb</strong> – 这是要写入元素的个数，每个元素的大小为 size 字节。</li><li><strong>stream</strong> – 这是指向 FILE 对象的指针，该 FILE 对象指定了一个输出流。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">float</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Student<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"students.bin"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Failed to open file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Student s1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">95.5f</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Student s2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">88.0f</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>Student read_student<span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"students.bin"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Failed to open file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>read_student<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ID: %d, Name: %s, Score: %.2f\n"</span><span class="token punctuation">,</span> read_student<span class="token punctuation">.</span>id<span class="token punctuation">,</span> read_student<span class="token punctuation">.</span>name<span class="token punctuation">,</span> read_student<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指针定位"><a href="#指针定位" class="headerlink" title="指针定位"></a>指针定位</h2><h3 id="fseek-自定义偏移"><a href="#fseek-自定义偏移" class="headerlink" title="fseek(自定义偏移)"></a>fseek(自定义偏移)</h3><p><code>int fseek(FILE *stream, long int offset, int whence)</code></p><p>该函数运行成功，返回零。否则回非零值。</p><ul><li><p><strong>stream</strong> – 这是指向 FILE 对象的指针，该 FILE 对象标识了流。</p></li><li><p><strong>offset</strong> – 这是相对 whence 的偏移量，以字节为单位。</p></li><li><p><strong>whence</strong> – 这是表示开始添加偏移 offset 的位置。它一般指定为下列常量之一：</p><table><thead><tr><th align="left">常量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">SEEK_SET</td><td align="left">文件的开头</td></tr><tr><td align="left">SEEK_CUR</td><td align="left">文件指针的当前位置</td></tr><tr><td align="left">SEEK_END</td><td align="left">文件的末尾</td></tr></tbody></table></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1. %c"</span><span class="token punctuation">,</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1. %c"</span><span class="token punctuation">,</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ftell-计算偏移量"><a href="#ftell-计算偏移量" class="headerlink" title="ftell(计算偏移量)"></a>ftell(计算偏移量)</h3><p><code>long int ftell(FILE *stream)</code></p><p>成功后，返回位置指示器的当前值。失败时，返回 -1L，并将 <a href="https://legacy.cplusplus.com/errno">errno</a> 设置为系统特定的正值。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;设置偏移量fseek(pf, 0, SEEK_END);&#x2F;&#x2F;计算偏移量printf(&quot;%d&quot;, ftell(pf));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rewind-返回开头"><a href="#rewind-返回开头" class="headerlink" title="rewind(返回开头)"></a>rewind(返回开头)</h3><p>  该函数可以将所传入的文件指针设置指向文件初始位置。</p><h3 id="文件缓冲区"><a href="#文件缓冲区" class="headerlink" title="文件缓冲区"></a>文件缓冲区</h3><pre class="line-numbers language-none"><code class="language-none">int main()&#123;&#x2F;&#x2F;打开FILE* pf &#x3D; fopen(&quot;text.txt&quot;, &quot;wb&quot;);if (pf &#x3D;&#x3D; NULL)&#123;perror(&quot;fopen&quot;);return 1;&#125;&#x2F;&#x2F;存入int a &#x3D; 10000;fwrite(&amp;a, sizeof(int), 1, pf);printf(&quot;此20秒数据在文件缓冲区内，打开文件是没有数据的\n&quot;);Sleep(20000);&#x2F;&#x2F;睡眠10秒fflush(pf);&#x2F;&#x2F;此函数可以刷新缓冲区中的数据，使其存入硬盘文件中printf(&quot;此20秒数据从文件缓冲区内读入到文件中，打开文件是有数据的\n&quot;);Sleep(20000);&#x2F;&#x2F;关闭fclose(pf);pf &#x3D; NULL;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为有缓冲区的存在，C语言在操作文件的时候，需要做刷新缓冲区或者在文件操作结束的时候关闭文件。<br>如果不做，可能导致读写文件的问题。</p><p>这也就是说，如果我们不用fflush，如果我们在一个fopen里面写入、然后读取是会失败的。</p>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 文件操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习 第2期</title>
      <link href="/2025/07/11/cstudy1/"/>
      <url>/2025/07/11/cstudy1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="表示"><a href="#表示" class="headerlink" title="表示"></a>表示</h2><p>指针表示字符串，一般是无法修改的，所以得声明为如下。或者采用隐式定义等等</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pt <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span> pr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"af"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> pr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"af"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> pra<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"af"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><h3 id="ctype-h-处理单个字符"><a href="#ctype-h-处理单个字符" class="headerlink" title="ctype.h(处理单个字符)"></a>ctype.h(处理单个字符)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">有  <span class="token function">isblank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">//是否为空格、tab。注意，如果为真，则返回一个非0值！！！！，所以如果写if(isblank(a) == TRUE) 是不可取的</span><span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数字</span>等等等等。<span class="token function">tolower</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token comment">// 返回小写字母</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="memset-快速初始化"><a href="#memset-快速初始化" class="headerlink" title="memset(快速初始化)"></a>memset(快速初始化)</h3><p><code>void *memset(void *str, int c, size_t n)</code></p><ul><li><p><strong>str</strong> – 指向要填充的内存区域的指针。</p></li><li><p><strong>c</strong> – 要设置的值，通常是一个无符号字符。</p></li><li><p><strong>n</strong> – 要被设置为该值的字节数。</p></li></ul><p>该函数一般仅用于char型的快速初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span> <span class="token comment">// 引入 string.h 头文件以使用 memset</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 将 buffer 数组的前5个字节设置为字符 'A'</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">// 添加字符串终止符</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Buffer after memset: %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将 buffer 全部初始化，使用 '\0' 替代 </span>    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用'\0'确保一致性及可读性</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Buffer after memset: %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="perror-显示报错"><a href="#perror-显示报错" class="headerlink" title="perror(显示报错)"></a>perror(显示报错)</h3><p>C 库函数 <code>void perror(const char *str)</code> 把一个描述性错误消息输出到标准错误 stderr。首先输出字符串 <strong>str</strong>，后跟一个冒号，然后是一个空格。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;FILE* fp;&#x2F;* 首先重命名文件 *&#x2F;rename(&quot;file.txt&quot;, &quot;newfile.txt&quot;);&#x2F;* 现在让我们尝试打开相同的文件 *&#x2F;fp &#x3D; fopen(&quot;file.txt&quot;, &quot;r&quot;);if (fp &#x3D;&#x3D; NULL) &#123;perror(&quot;Error&quot;);return(-1);&#125;fclose(fp);return(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strchr-字符查找"><a href="#strchr-字符查找" class="headerlink" title="strchr(字符查找)"></a>strchr(字符查找)</h3><p>返回该字符在字符串中第一次出现的位置(字符指针)。</p><p>实例如下，通过该函数查找ret_val中的换行符，找到则替换为空，否则说明输入过多需要清除后续输入。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">s_gets</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> ret_val<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> find<span class="token punctuation">;</span>ret_val <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret_val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>find <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token operator">*</span>find <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ret_val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strrchr-字符查找"><a href="#strrchr-字符查找" class="headerlink" title="strrchr(字符查找)"></a>strrchr(字符查找)</h3><p>返回字符最后出现的位置</p><h3 id="strspn-字符匹配"><a href="#strspn-字符匹配" class="headerlink" title="strspn(字符匹配)"></a>strspn(字符匹配)</h3><p>检索字符串 <strong>str1</strong> 中第一个不在字符串 <strong>str2</strong> 中出现的字符下标。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> len<span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ABCDEFG019874"</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ABCD"</span><span class="token punctuation">;</span>   len <span class="token operator">=</span> <span class="token function">strspn</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始段匹配长度 %d\n"</span><span class="token punctuation">,</span> len <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strcspn-字符匹配"><a href="#strcspn-字符匹配" class="headerlink" title="strcspn(字符匹配)"></a>strcspn(字符匹配)</h3><p>检索字符串 <strong>str1</strong> 开头连续有几个字符都不含字符串 <strong>str2</strong> 中的字符。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> len<span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ABCDEF4960910"</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"013"</span><span class="token punctuation">;</span>   len <span class="token operator">=</span> <span class="token function">strcspn</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第一个匹配的字符是在 %d\n"</span><span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><h3 id="strtol-转换L"><a href="#strtol-转换L" class="headerlink" title="strtol(转换L)"></a>strtol(转换L)</h3><p>定义在<code>stdlib.h</code></p><p><code>long int strtol (const char* str, char** endptr, int base);</code></p><p><code>str</code>为要转化的字符串；<code>base</code>为转化的进制数，为0时默认10进制，0x采用16进制，0采用8进制；<code>endstr</code>为第一个不能转换的字符指针(就是会指向第一个不能转换为long类型的字符)，为NULL时表示不用这个参数。根据这个可以作连续转换 。</p><p><code>strtol()</code> 会扫描参数 str 字符串，<strong>跳过前面的空白字符</strong>（例如空格，tab缩进等，可以通过 isspace() 函数来检测），直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时(’\0’)结束转换，并将结果返回。<strong>如果不能转换或者 <code>str</code> 为空字符串，那么返回 <code>0(0L)</code>；</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> li<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> nm<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"202 22 2 1 3"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p_end<span class="token punctuation">;</span>    p_end <span class="token operator">=</span> nm<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        li<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtol</span><span class="token punctuation">(</span>p_end<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p_end<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld\n"</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strtok-切割字符串"><a href="#strtok-切割字符串" class="headerlink" title="strtok(切割字符串)"></a>strtok(切割字符串)</h3><p>定义在<code>string.h</code>中</p><p><code>char *strtok(char *str, const char *delim);</code></p><p><code>str</code>：要分割的字符串，第一次调用时传入需要分割的字符串，<strong>之后传入 NULL</strong>。NULL表示：函数将在同⼀个字符串中被保存的位置开始，查找下⼀个标记。（如果字符串中不存在更多的标记，则返回 NULL 指针）</p><p><code>delim</code>：分隔符字符串，用于指定分隔字符串的<strong>分隔符集合</strong>。</p><p><code>strtok</code>函数找到<code>str</code>中的下⼀个标记，并将其⽤ \0 结尾，返回⼀个指向这个标记的指针。</p><p>（注：strtok函数会改变被操作的字符串，所以在使⽤strtok函数切分的字符串⼀般都是临时拷贝的内容并且可修改。）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"High-Earphone@qq.com.666@.gaoerji"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> deli<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-@."</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>output<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">strtok</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> deli<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> deli<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fgets-字符输入"><a href="#fgets-字符输入" class="headerlink" title="fgets(字符输入)"></a>fgets(字符输入)</h3><p>定义在<code>stdio.h</code>中</p><p><code>char *fgets(char *str, int n, FILE *stream)</code> </p><p>fgets会储存换行符（当然，如果你输入超过n，换行符会没地方储存），最大读取为n-1个字符，达到最大值第n个字符会赋空字符；返回值为指向str的指针，若读取到文件结尾，返回NULL</p><p>第三个参数为<strong>读取</strong>的文件，这里用stdin从键盘读取，后续会在文件操作中介绍</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\n'</span> <span class="token operator">&amp;&amp;</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>  <span class="token comment">// 如果先遇到换行符，换成空字符； 先遇到空字符，else便丢弃多的字符</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>   <span class="token comment">//这个操作就是说，一直getchar，知道传入的是‘\n’</span><span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">//清除缓冲区</span><span class="token function">puts</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 上面一番操作使得str一定没有换行符</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fputs-字符输出"><a href="#fputs-字符输出" class="headerlink" title="fputs(字符输出)"></a>fputs(字符输出)</h3><p><code>int fputs(const char *str, FILE *stream)</code></p><p>fputs不会在输入末尾添加换行符，puts会。第二个为要<strong>写入</strong>数据的文件（把str puts 到 FILE中），在屏幕上用stdout。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"nihao"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自定义s-gets输入函数"><a href="#自定义s-gets输入函数" class="headerlink" title="自定义s_gets输入函数"></a>自定义s_gets输入函数</h3><p>这个函数读取整行输入并用空字符代替换行符。读取n-1个字符，并丢弃剩下的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">s_gets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span> ret_val<span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ret_val <span class="token operator">=</span> <span class="token function">fgets</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ret_val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\n'</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>   st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>       <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">return</span> ret_val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sprintf-字符合成"><a href="#sprintf-字符合成" class="headerlink" title="sprintf(字符合成)"></a>sprintf(字符合成)</h3><p><code>int sprintf(char *str, const char *format, ...)</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//用法： sprinf(str, "%s, %d, %c", stri, 2, c);</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> output <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>output<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span><span class="token string">"%c, %s,%d,%ld, %f"</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5L</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里的output溢出了，</span>    <span class="token comment">//注意，双引号里面的 逗号 空格 均被加入进了output中</span><span class="token function">fputs</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放内存</span><span class="token punctuation">&#125;</span><span class="token comment">//可以发现这里产生了内存溢出，output[9]='空格';</span><span class="token comment">//下面是一种动态计算空间方法：</span>    <span class="token comment">// 计算所需空间</span>    <span class="token keyword">int</span> needed <span class="token operator">=</span> <span class="token function">snprintf</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"%c, %s,%d,%ld, %f"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> stri<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5L</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> output <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>needed <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// +1 为终止符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>output<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token string">"%c, %s,%d,%ld, %.1f"</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> stri<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5L</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>snprintf中的第2个参数表示，最多写入size-1个字符。</p><h3 id="sscanf-字符转换"><a href="#sscanf-字符转换" class="headerlink" title="sscanf(字符转换)"></a>sscanf(字符转换)</h3><p>对于sprintf函数它可以将各种数据以各种格式（如%d，%s，%c等等）转换为字符串类型输入到char*类型的str参数中。    </p><p> 对于sscanf函数它可以将字符串类型的str参数的数据以各种格式（如%d，%s，%c等等）输出到各变量中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">float</span> point<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> l <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">15</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">88.9f</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> j <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//将各类型数据转换为字符串</span><span class="token function">sprintf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">"%d %s %.1f"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>age<span class="token punctuation">,</span> l<span class="token punctuation">.</span>name<span class="token punctuation">,</span> l<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串数据转换为各种类型</span><span class="token function">sscanf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">"%d %s %f"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %s %.1f"</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span>age<span class="token punctuation">,</span> j<span class="token punctuation">.</span>name<span class="token punctuation">,</span> j<span class="token punctuation">.</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strncat-字符拼接"><a href="#strncat-字符拼接" class="headerlink" title="strncat(字符拼接)"></a>strncat(字符拼接)</h3><p><code>char *strncat(char *dest, const char *src, size_t n)</code></p><ul><li><strong>dest</strong> – 指向目标数组，该数组包含了一个 C 字符串，且足够容纳追加后的字符串，包括额外的空字符。</li><li><strong>src</strong> – 要追加的字符串。</li><li><strong>n</strong> – 要追加的最大字符数。（注意这里并减1）</li></ul><p>简单的形式为strcat，但是可能溢出内存。拼接后的str1为<code>&quot;ab12345\0&quot;</code>，也就是说，会自带空字符在末尾。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">snprintf</span><span class="token punctuation">(</span>str0<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"123456780"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncat</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str0<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="strncpy-字符复制"><a href="#strncpy-字符复制" class="headerlink" title="strncpy(字符复制)"></a>strncpy(字符复制)</h3><p><code>char *strncpy(char *dest, const char *src, size_t n)</code></p><ul><li><strong>dest</strong> – 指向用于存储复制内容的目标数组。</li><li><strong>src</strong> – 要复制的字符串。</li><li><strong>n</strong> – 要从源中复制的字符数。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">   <span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token function">memset</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strcpy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">"This is runoob.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">strncpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//desk 最终的目标字符串： This is ru </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strncmp-字符比较"><a href="#strncmp-字符比较" class="headerlink" title="strncmp(字符比较)"></a>strncmp(字符比较)</h3><p><code>int strncmp(const char *str1, const char *str2, size_t n)</code></p><p>比较前n个字符有么有相同的。</p><ul><li>如果返回值 &lt; 0，则表示 str1 小于 str2。</li><li>如果返回值 &gt; 0，则表示 str1 大于 str2。</li><li>如果返回值 &#x3D; 0，则表示 str1 等于 str2。</li></ul><p>原始为<code>strcmp</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token string">"ac"</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> b <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> out <span class="token operator">=</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">fmin</span><span class="token punctuation">(</span><span class="token function">strlen</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strlen-字符长度"><a href="#strlen-字符长度" class="headerlink" title="strlen(字符长度)"></a>strlen(字符长度)</h3><p>返回字符串的长度，但不计算空字符‘\0’ </p><h3 id="strstr-字符串查找"><a href="#strstr-字符串查找" class="headerlink" title="strstr(字符串查找)"></a>strstr(字符串查找)</h3><p>返回字符串第一次出现的位置</p>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 字符函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习 第1期</title>
      <link href="/2025/07/10/cstudy0/"/>
      <url>/2025/07/10/cstudy0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="char与int之间的关系"><a href="#char与int之间的关系" class="headerlink" title="char与int之间的关系"></a>char与int之间的关系</h2><p>char就是int。如何理解、分辨字符和整型之间的区别？ASCII码把int和char联系到了一起。char型就是ASCII码的十进制。简单来说，可以用int表示char。</p><p>字符：如 ‘a’, ‘1’ 等，都可以看作十进制的整型（具体值对应ASCII码中）。 </p><pre class="line-numbers language-none"><code class="language-none">int str &#x3D; &#39;\10&#39;; &#x2F;&#x2F; 这里就的\10 就是八进制的解码，所以对应十进制的8；int str &#x3D; &#39;a&#39; &#x2F;&#x2F;那么 str储存的就是a对应的int。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>总而言之，字符就是int。</p><h2 id="typedef的另类使用"><a href="#typedef的另类使用" class="headerlink" title="typedef的另类使用"></a>typedef的另类使用</h2><p>参考链接：<a href="https://blog.csdn.net/Andrewniu/article/details/80566324">C&#x2F;C++ typedef用法详解（真的很详细）-CSDN博客</a> |</p><p><strong>typedef中声明的类型在变量名的位置出现！！于是可以理解函数指针中的定义</strong></p><p><code>typedef</code> 是 C 语言中一个非常有用的关键字，它的主要作用是为现有的数据类型定义一个新的别名。通过 <code>typedef</code>，可以让代码更具可读性、简洁性和可维护性。以下是 <code>typedef</code> 在 C 语言中的常见运用场景及其详细说明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> Integer<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">float</span> Real<span class="token punctuation">;</span>Integer age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>       <span class="token comment">// 等价于 int age = 25;</span>Real salary <span class="token operator">=</span> <span class="token number">5000.50</span><span class="token punctuation">;</span>  <span class="token comment">// 等价于 float salary = 5000.50;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token operator">*</span> IntPtr<span class="token punctuation">;</span>IntPtr p1<span class="token punctuation">,</span> p2<span class="token punctuation">;</span>  <span class="token comment">// 等价于 int *p1, *p2;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> Vector<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 定义一个包含 10 个 int 元素的数组类型</span>Vector v<span class="token punctuation">;</span>  <span class="token comment">// 等价于 int v[10];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 定义结构体并为其定义别名</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Point<span class="token punctuation">;</span>Point p1<span class="token punctuation">;</span>  <span class="token comment">// 等价于 struct &#123; int x; int y; &#125; p1;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>MathFunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 定义一个函数指针类型</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MathFunc func <span class="token operator">=</span> add<span class="token punctuation">;</span>  <span class="token comment">// 使用别名声明函数指针</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Result: %d\n"</span><span class="token punctuation">,</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 5</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> RED<span class="token punctuation">,</span> GREEN<span class="token punctuation">,</span> BLUE <span class="token punctuation">&#125;</span> Color<span class="token punctuation">;</span>Color c <span class="token operator">=</span> RED<span class="token punctuation">;</span>  <span class="token comment">// 等价于 enum &#123; RED, GREEN, BLUE &#125; c = RED;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> year<span class="token punctuation">;</span>    <span class="token keyword">int</span> month<span class="token punctuation">;</span>    <span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Date<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Date birthday<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Person<span class="token punctuation">;</span>Person p1<span class="token punctuation">;</span>  <span class="token comment">// 使用别名声明复杂结构体变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*do something*/</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    fp f1 <span class="token operator">=</span> test<span class="token punctuation">;</span> <span class="token comment">//表达式1</span>    fp f2 <span class="token operator">=</span> <span class="token operator">&amp;</span>test<span class="token punctuation">;</span><span class="token comment">//表达式2</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，声明了返回类型为int，接受两个int类型参数的函数指针f1和f2，分别给它们进行了赋值。表达式1和表达式2在作用上并没有什么区别。因为函数名在被使用时总是由编译器把它转换为函数指针，而前面加上&amp;不过显式的说明了这一点罢了。</p><hr><h2 id="动态内存分配malloc的再探索与形参实参的研究"><a href="#动态内存分配malloc的再探索与形参实参的研究" class="headerlink" title="动态内存分配malloc的再探索与形参实参的研究"></a>动态内存分配malloc的再探索与形参实参的研究</h2><p>参考链接：<a href="https://blog.csdn.net/Dontla/article/details/117886318">C语言visual studio警告：取消对NULL指针“p”的引用_取消对null指针的引用怎么解决-CSDN博客</a> |<a href="https://blog.csdn.net/weixin_40162095/article/details/113992025">看完这篇文章一定弄懂C语言数组作为函数参数的用法_使用可变长度的数组作为函数参数-CSDN博客</a></p><h3 id="形参和实参：malloc为例"><a href="#形参和实参：malloc为例" class="headerlink" title="形参和实参：malloc为例"></a>形参和实参：malloc为例</h3><p><strong>tip:  free指针后最好重置指针。</strong></p><p>中午突然不明白C语言中的形参和实参在函数中的传递规律，由于free()的使用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">clear_p</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>     p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 倘若 没有这一句，我们会发现</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span><span class="token number">2</span>；    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">fun</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">clear_p</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>经过上面的代码分析，我们可以发现，main 中return 1； printf的两个数分别为1 和 * ；这说明在clear_p中，free改变了传入的参数，而p &#x3D; NULL并未影响传入的参数。这是为什么呢？？</strong> </p><p>首先，要明确C语言中的参数传递是值传递。当调用clear_p(p)时，传**递的是指针p的值，也就是内存地址的副本。**在函数内部，这个副本被free释放，但main中的p本身并没有被修改，仍然指向原来的地址，此时这个指针变成了悬垂指针（野指针），因为它指向的内存已经被释放。</p><p>但是，free操作本身是成功的，因为它释放的是指针所指向的内存块，而不管是通过原始指针还是副本指针。即使传递的是指针的副本，free函数会根据传入的地址来释放对应的内存。因此，main中的p所指向的内存确实被正确释放了。</p><p>不过，main中的p变量本身的值（即存储的地址）并没有改变，仍然指向已经被释放的内存区域。这就是为什么在之后检查p !&#x3D; NULL时，条件成立，返回1的原因，因为clear_p函数中的p &#x3D; NULL只是修改了函数内部的副本，不影响main中的p。</p><p>自此，我也了解了函数中形参传递了</p><p>那，为何<code>fun(int *p)</code>也能改变p？？，因为我们在调用fun时，传入的参数p实际上是&amp;p[0]，也就是地址。也就是说，形参拷贝了一份p[0]地址的副本，形参确实不会改变实参的值（即 p所指向的地址），但我们对其解引用（*p）时，还是对同一个地址操作，那自然会改变实参。</p><h3 id="函数介绍：realloc"><a href="#函数介绍：realloc" class="headerlink" title="函数介绍：realloc"></a><strong>函数介绍：realloc</strong></h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token function">realloc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的realloc为重新分配内存，一般会比原来分配的要大。成功返回新地址，失败返回NULL。</p><p>注意，realloc会自动释放原有内存。所以不用free</p><h2 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h2><p>其原型void *calloc(size_t n, size_t size)；<br>其比malloc函数多一个参数，并不需要人为的计算空间的大小，比如如果他要申请20个int类型空间，会int *p &#x3D; (int *)calloc(20, sizeof(int)）,这样就省去了人为空间计算的麻烦。但这并不是他们之间最重要的区别，malloc申请后空间的值是随机的，并没有进行初始化，而calloc却在申请后，对空间逐一进行初始化，并设置值为0;</p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p><strong>定义</strong>，这里定义了pf为一个指针，它指向一个返回类型为void，传入参数为char *的函数。</p><pre class="line-numbers language-none"><code class="language-none">void (*pf) (char *)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>简单使用</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">rount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> fun1<span class="token punctuation">;</span> <span class="token comment">//正确pf = rount; // 错误</span><span class="token comment">//下面调用</span><span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span>mis<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  等价于: fun1(mis)</span><span class="token function">pf</span><span class="token punctuation">(</span>mis<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>把函数指针作为函数参数</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span>fun1<span class="token punctuation">,</span> mis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> mis<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>else</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">show</span><span class="token punctuation">(</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>意思是传入sqrt的返回值。<span class="token function">show</span><span class="token punctuation">(</span>sqrt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传入函数地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>使用示例</strong></p><pre class="line-numbers language-none"><code class="language-none">typedef int (*func)(ElemType, ElemType);int f_compare(ElemType input, ElemType judge);void LocateElem(func man);int main()&#123;    ...   func f1 &#x3D; f_compare;   LocateElem(f1);  ...return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归，无疑是非常难以理解和抽象的东西，尤其是在数据结构中的三种遍历方法中。并且其占用的内存很多，使程序运行变慢。下面让我门来理解递归的内在。</p><p>下面是一个简单的递归求阶层</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//递归求阶乘</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">fac</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，其一般有两种返回值，一种调用自己，为递归；另一种为停止条件，就是递归结束的条件。这样看，上面的代码也就很容易理解了。</p><p>或者更精妙一点，引入一个参数，消除返回值中的乘积项。这样就减少了一半的递归，称作尾递归方法。(虽然我个人感觉理论速度没有区别)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//acc为阶乘的值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//递归求阶乘</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> acc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> acc<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">fac</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">*</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻流社的优化日志</title>
      <link href="/2025/07/09/diary-web/"/>
      <url>/2025/07/09/diary-web/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="优化日志（更新于20250826"><a href="#优化日志（更新于20250826" class="headerlink" title="优化日志（更新于20250826"></a>优化日志（更新于20250826</h1><h2 id="2025-08-26"><a href="#2025-08-26" class="headerlink" title="2025-08-26"></a>2025-08-26</h2><p>bing成功收录网站，可以通过bing检索到本站的某些页面。（因为目前不知道如何优化SEO，毕竟博客的标题、描述是不可控的）</p><h2 id="2025-07-09"><a href="#2025-07-09" class="headerlink" title="2025-07-09"></a>2025-07-09</h2><p>将主题由Next7.8.0更换为Matery。重新修改所有文章的内容等等。删除部分过时文章，待重新优化部分长篇文章。删除新增的vip音乐（以前加的音乐好多都成vip了），添加新音乐（全是星铁的）</p><h2 id="2025-06-16"><a href="#2025-06-16" class="headerlink" title="2025-06-16"></a>2025-06-16</h2><p>添加规则，增强了网站安全性。删除部分过时无用文章。修改所有文章显示布局，使其布局显示更好。</p><h2 id="2024-10-09"><a href="#2024-10-09" class="headerlink" title="2024-10-09"></a>2024-10-09</h2><p>删除部分文章，优化了部分文章的图片大小（文件大小）。</p><h2 id="2024-08-28"><a href="#2024-08-28" class="headerlink" title="2024-08-28"></a>2024-08-28</h2><p>抽空把所有的文字加粗了一下，便于看的更清楚。</p><h2 id="2024-08-16"><a href="#2024-08-16" class="headerlink" title="2024-08-16"></a>2024-08-16</h2><p>删除了部分错乱歌曲和大部分纯音乐。</p><p>删除了半数以上的文章</p><h2 id="2024-08-14"><a href="#2024-08-14" class="headerlink" title="2024-08-14"></a>2024-08-14</h2><p>将DNS解析从阿里云换成了Cloudflare，使得网站更加流畅，加载不那么卡顿。</p><h2 id="2024-08-13"><a href="#2024-08-13" class="headerlink" title="2024-08-13"></a>2024-08-13</h2><p>删除了音乐插件中部分只能试听和错乱的歌曲</p>]]></content>
      
      
      <categories>
          
          <category> 优化日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Matery主题的一些设置（持续更新</title>
      <link href="/2025/07/08/20250708/"/>
      <url>/2025/07/08/20250708/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：个人关于Matery主题的一些设置<span id="more"></span>。</p><h2 id="该主题的一些问题（本文未解决"><a href="#该主题的一些问题（本文未解决" class="headerlink" title="该主题的一些问题（本文未解决"></a>该主题的一些问题（本文未解决</h2><ol><li>音乐插件无法全局播放，每次刷新切换等都会重新加载播放器，十分不连贯。目前暂未找到简单、好的解决方法。（听说有类似pjax的方法，待日后学习研究）</li><li>首页文章卡片高度不一致，可以发现，如果文章的标签、标题、分类、摘要预览不一致（比如字数相差过大），会产生卡片高度不一致，无法对齐，十分不美观</li><li>还有很多其他方面不是很友好，相关修改下面会提及。</li><li>文章设置摘要可以通过插入 <code>&lt;!-- more --&gt;</code> 来实现，但是，如果设置了cover: true，即设置了首页轮播，那么就得设置summary。因为此时上面的方法失效。</li></ol><h2 id="设置文章密码"><a href="#设置文章密码" class="headerlink" title="设置文章密码"></a>设置文章密码</h2><p>主题自带的密码保护并不好用，有泄漏文章摘要、可以跳过密码看到部分文章内容等问题。所以这里采用hexo-blog-encrypt插件。先把主题配置文件（_config.yml）的这个功能改为false。然后通过npm安装插件（具体可自行搜索，一大堆教程）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">verifyPassword</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment">#由于其主题自带的不是很好用，很容易被泄密。所以推荐使用hexo-blog-encrypt插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后在博客配置文件中添加。只要添加前两行就可以了，当然还可以添加其他设置，需要参考原项目的使用说明。</p><pre class="line-numbers language-none"><code class="language-none"># Security## 密码encrypt:   enable: true    abstract: 这是一篇加密文章。  #这两个可以不要，有默认的  message: 请输入密码或者邮件联系.  #<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于使用，有很多独特的方法。这里就介绍常用的（其他感觉用不太上）。直接写文章时，在title那个界面，加一个”password: 你的密码“就可以了（没有引号）。密码直接正常输，无需加密。</p><p>最后，需要注意一些bug。倘若你设置了cover: true，并且summary为空，那么首页轮播中，文章摘要便会显示该篇文章密码的某种加密格式(类似asdfjsdgfsg…)，正规解决方法未找到。所以，要主动设置summary的内容。</p><h2 id="跳转指定界面"><a href="#跳转指定界面" class="headerlink" title="跳转指定界面"></a>跳转指定界面</h2><p>引用链接<a href="https://github.com/blinkfox/hexo-theme-matery/issues/935">关于文章过多时跳转指定页面 </a></p><p>将 layout_partial\paging.ejs文件代码修改如下，即可得到跳转指定页效果。可以自定义部分内容</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container paging<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col s6 m4 l4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>prev_link<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span>               <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left btn-floating btn-large waves-effect waves-light bg-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-angle-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left btn-floating btn-large disabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-angle-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-info col m4 l4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center-align page-nav-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">                 <span class="token keyword">let</span> showPages <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 显示的页码数量</span>                <span class="token keyword">let</span> currentPage <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> totalPages <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> start <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> currentPage <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>showPages<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>totalPages<span class="token punctuation">,</span> start <span class="token operator">+</span> showPages <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> showPages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    start <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> end <span class="token operator">-</span> showPages <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                </span><span class="token delimiter punctuation">%></span></span>                                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-num waves-effect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-dots<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> currentPage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-num active bg-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> i </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>base <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> <span class="token string">'/page/'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span>                            <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-num waves-effect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> i </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> totalPages <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-dots<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> totalPages<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>base <span class="token operator">+</span> <span class="token string">'/page/'</span> <span class="token operator">+</span> totalPages <span class="token operator">+</span> <span class="token string">'/'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span>                        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-num waves-effect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> totalPages </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col s6 m4 l4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>next_link<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span>               <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right btn-floating btn-large waves-effect waves-light bg-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-angle-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right btn-floating btn-large disabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-angle-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.page-nav-wrapper</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>    <span class="token property">gap</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.page-num</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">min-width</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 6px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #555<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all 0.3s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.page-num:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.page-num.active</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.page-dots</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #999<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 0 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 601px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">.page-nav-wrapper</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设定文章模板"><a href="#设定文章模板" class="headerlink" title="设定文章模板"></a>设定文章模板</h2><p>在博客根目录的scaffolds–post.md中，即可编辑自己的模板。选择根文件打开<code>post_asset_folder: true</code> （当然，如果采用一些其他图片引用方法可以不用）</p><p>这样通过hexo new 文章名字。便可以自动在source – _post文件夹下生成文档和文件夹（后者用于存放文章内部引用的图片）</p><h2 id="代码块高亮显示"><a href="#代码块高亮显示" class="headerlink" title="代码块高亮显示"></a>代码块高亮显示</h2><p>根目录配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">syntax_highlighter</span><span class="token punctuation">:</span> prismjs   <span class="token comment">#代码块高亮，prismjs为主题支持。</span><span class="token comment">#highlight:</span> <span class="token comment"># enable: false</span>  <span class="token comment">#line_number: true</span> <span class="token comment"># auto_detect: false</span> <span class="token comment"># tab_replace: ''</span>  <span class="token comment">#wrap: true</span> <span class="token comment"># hljs: false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题配置如下</p><pre class="line-numbers language-none"><code class="language-none"># 代码块相关code:  lang: true # 代码块是否显示名称  copy: true # 代码块是否可复制  shrink: true # 代码块是否可以收缩  break: false # 代码是否折行，就是类似自动换行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再于my.css中添加以下代码，以显示行号问题。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 这里是行号显示*/</span><span class="token selector">.line-numbers-rows</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-right-width</span><span class="token punctuation">:</span> 0px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.line-numbers</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1.5rem 1.5rem 1.5rem 3.5rem <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 1rem 0 <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #272822<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 0.35rem<span class="token punctuation">;</span>    <span class="token property">tab-size</span><span class="token punctuation">:</span> 4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，发现鼠标拖拉选中会出现文本选择的高亮范围和实际的行高不一致的问题。解决方法为于\themes\matery\source\libs\prism中的prism.css</p><p>修改（具体原理不知）引用链接<a href="https://github.com/blinkfox/hexo-theme-matery/issues/928">代码块显示问题</a></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">pre[class*=language-].line-numbers>code</span> <span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> 这里要改！！<span class="token property">white-space</span><span class="token punctuation">:</span> inherit<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">pre[class*=language-].line-numbers>code</span> <span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span> sticky<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span> inherit<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章设置成hide-true-不生效。（有bug！"><a href="#文章设置成hide-true-不生效。（有bug！" class="headerlink" title="文章设置成hide: true 不生效。（有bug！"></a>文章设置成<code>hide: true</code> 不生效。（有bug！</h2><h3 id="最新bug"><a href="#最新bug" class="headerlink" title="最新bug"></a>最新bug</h3><p>采用下面的方法会导致网站主页文章排版bug！！！（隐藏文章导致本页末尾留空，下一页的文章不会填充进本页</p><p>找到<code>E:\blog_matery\themes\matery\layout\index.ejs</code>该配置文件，</p><p>将下面这部分（注意，复原时这里的注释不能留！，它仍然会解析代码，因为注释不是ejs的注释语法（vscode的锅</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!-- 所有文章卡片 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articles<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container articles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row article-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> page<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">post</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>         <span class="token comment">&lt;!-- <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>hide <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article col s12 m6 l4<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>path<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>img<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>img<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>responsive-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> post<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">                                <span class="token keyword">var</span> featureimg <span class="token operator">=</span> <span class="token string">'/medias/featureimages/0.jpg'</span><span class="token punctuation">;</span>                                <span class="token keyword">var</span> featureImages <span class="token operator">=</span> theme<span class="token punctuation">.</span>featureImages<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>featureImages <span class="token operator">||</span> featureImages<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">return</span> featureimg<span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                                featureimg <span class="token operator">=</span> featureImages<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token operator">%</span> featureImages<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>                            </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>featureimg<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>responsive-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> post<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> post<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content article-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>summary block-with-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>summary <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> post<span class="token punctuation">.</span>summary </span><span class="token delimiter punctuation">%></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>excerpt <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>excerpt<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">strip_html</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>excerpt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>content <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>content<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">strip_html</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>far fa-clock fa-fw icon-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>date<span class="token punctuation">,</span> config<span class="token punctuation">.</span>date_format<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>categories <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-bookmark fa-fw icon-category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">category</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span>path<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> category<span class="token punctuation">.</span>name </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>author <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>author<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-user fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> post<span class="token punctuation">.</span>author </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-user fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> config<span class="token punctuation">.</span>author </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>tags <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-action article-tags<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> post<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">tag</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>path<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chip bg-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> tag<span class="token punctuation">.</span>name </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token comment">&lt;!-- <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span> --></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改为下面即可——本质就是添加了上面注释的一个简单的if条件</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articles<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container articles<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row article-row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> page<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">post</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>hide <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article col s12 m6 l4<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>path<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-image<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>img<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>img<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>responsive-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> post<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">                                <span class="token keyword">var</span> featureimg <span class="token operator">=</span> <span class="token string">'/medias/featureimages/0.jpg'</span><span class="token punctuation">;</span>                                <span class="token keyword">var</span> featureImages <span class="token operator">=</span> theme<span class="token punctuation">.</span>featureImages<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>featureImages <span class="token operator">||</span> featureImages<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token keyword">return</span> featureimg<span class="token punctuation">;</span>                                <span class="token punctuation">&#125;</span>                                featureimg <span class="token operator">=</span> featureImages<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token operator">%</span> featureImages<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>                            </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>featureimg<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>responsive-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> post<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> post<span class="token punctuation">.</span>title </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content article-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>summary block-with-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>summary <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>summary<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> post<span class="token punctuation">.</span>summary </span><span class="token delimiter punctuation">%></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>excerpt <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>excerpt<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">strip_html</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>excerpt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>content <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>content<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">strip_html</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>far fa-clock fa-fw icon-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>date<span class="token punctuation">,</span> config<span class="token punctuation">.</span>date_format<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>publish-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>categories <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-bookmark fa-fw icon-category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> post<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">category</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span>path<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-category<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> category<span class="token punctuation">.</span>name </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>author <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>author<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-user fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> post<span class="token punctuation">.</span>author </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fas fa-user fa-fw<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> config<span class="token punctuation">.</span>author </span><span class="token delimiter punctuation">%></span></span>                            <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>tags <span class="token operator">&amp;&amp;</span> post<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-action article-tags<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> post<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">tag</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>path<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chip bg-color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> tag<span class="token punctuation">.</span>name </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>             <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token delimiter punctuation">%></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Matery主题引入Pjax（失败！！！发现重大bug"><a href="#Matery主题引入Pjax（失败！！！发现重大bug" class="headerlink" title="Matery主题引入Pjax（失败！！！发现重大bug"></a>Matery主题引入Pjax（失败！！！发现重大bug</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>参考链接：<a href="https://cloud.tencent.com/developer/article/1938971">Matery主题添加Pjax-腾讯云开发者社区-腾讯云</a></p><p>好处有很多，比如音乐全局播放，界面加载更快。然而，也带来了居多问题，因为很多地方的代码都需要修改。下面分享我的引入方法——目前暂未发现什么很大的bug</p><ol><li><code>E:\blog_matery\themes\matery\layout\_widget</code> 处新建 <code>pjax.ejs</code>文件，输入：</li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>pjax<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></span><span class="token delimiter punctuation">%></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"https://cdn.jsdelivr.net/npm/pjax/pjax.min.js"</span><span class="token punctuation">,</span>loadPjax<span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">loadPjax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> pjax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pjax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">selectors</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"head title"</span><span class="token punctuation">,</span>                    <span class="token string">'head meta[name="keywords"]'</span><span class="token punctuation">,</span>                    <span class="token string">'head meta[name="description"]'</span><span class="token punctuation">,</span>                    <span class="token string">"main#main_wrap"</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">cacheBust</span><span class="token operator">:</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Pjax请求错误时，跳转到404页面</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pjax:error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>request<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                pjax<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">'/404.html'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"><span class="token punctuation">&#125;</span></span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>E:\blog_matery\themes\matery\layout\layout.ejs </code>处，将 原来单个的body ，添加main头尾。</li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main_wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> body </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在底部添加一行代码</li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs">    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>instantpage<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>instantpage<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/pjax'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>  <span class="token comment">&lt;!--添加的代码！！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>最后在主题配置文件，随便找个地方（比如底部）添加</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">pjax</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><p>正如参考链接所给出的一样，我们需要修改_widget下的ejs文件。因为本站没有用到说说、谷歌统计、评论。所以仅仅更改了</p><ol><li>标签页面（tags）的词云（tag-wordcloud.ejs）</li><li>分类页面（categories）雷达图(category-radar.ejs)</li><li>归档页面(archives)统计图(post-calendar.ejs)</li><li>关于页面（about）的统计图(post-charts.ejs)</li></ol><p>post-detail-toc.ejs<strong>并未修改</strong>，因为没有发现有什么问题。下面的修改均是借助的deepseek（目前看起来没有什么bug</p><ol><li><strong>tag-wordcloud.ejs</strong></li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>css<span class="token punctuation">.</span>jqcloud<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#tag-wordcloud</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 添加这个样式确保容器正确重置 */</span>    <span class="token selector">#tag-wordcloud-wrapper</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 添加一个包装容器 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag-wordcloud-wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tag-wordcloud<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 封装标签云初始化函数</span>    <span class="token keyword">function</span> <span class="token function">initTagCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 确保jQCloud加载完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>jQCloud <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>jqcloud<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">loadTagCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">loadTagCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">loadTagCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 完全重建DOM结构 - 这是关键修复</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#tag-wordcloud-wrapper'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;div id="tag-wordcloud" class="card-content">&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 准备标签数据</span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">        <span class="token keyword">let</span> tagWordArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        site<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tagWordArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'text'</span><span class="token operator">:</span> tag<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-property property">'weight'</span><span class="token operator">:</span> tag<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string-property property">'link'</span><span class="token operator">:</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token function">url_for</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> tagWords <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tagWordArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token delimiter punctuation">%></span></span>        <span class="token comment">// 初始化标签云</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#tag-wordcloud'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jQCloud</span><span class="token punctuation">(</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> tagWords </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">autoResize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token literal-property property">removeOverflowing</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token function-variable function">afterCloudRender</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Tag cloud rendered successfully'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 窗口大小变化时重新渲染</span>        <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'resize.tagcloud'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'resize.tagcloud'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#tag-wordcloud'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jQCloud</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始加载</span>    <span class="token function">initTagCloud</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Pjax重载处理</span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pjax:complete'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 添加延迟确保完全卸载</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>initTagCloud<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>category-radar.ejs</strong></li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#category-radar</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 360px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>category-radar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 封装雷达图初始化函数</span>    <span class="token keyword">function</span> <span class="token function">initRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 确保echarts加载完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> echarts <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>echarts<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">loadRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">loadRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">loadRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 销毁旧实例（如果存在）</span>        <span class="token keyword">let</span> radarDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'category-radar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>radarDom <span class="token operator">&amp;&amp;</span> echarts<span class="token punctuation">.</span><span class="token function">getInstanceByDom</span><span class="token punctuation">(</span>radarDom<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            echarts<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span>radarDom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">let</span> radarChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>radarDom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">            <span class="token keyword">var</span> categories <span class="token operator">=</span> site<span class="token punctuation">.</span>categories<span class="token punctuation">;</span>            <span class="token keyword">var</span> radarValueArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            categories<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">category</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                radarValueArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> radarValueArr<span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> radarValueArr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> indicatorArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            categories<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">category</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                indicatorArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'name'</span><span class="token operator">:</span> category<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-property property">'max'</span><span class="token operator">:</span> max<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> indicatorData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>indicatorArr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> radarValueData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>radarValueArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token delimiter punctuation">%></span></span>        <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"categoryRadarTitle"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>                    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">22</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">radar</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#3C4858'</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">indicator</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> indicatorData </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>                <span class="token literal-property property">nameGap</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>                <span class="token literal-property property">center</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'50%'</span><span class="token punctuation">,</span><span class="token string">'55%'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token string">'66%'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'radar'</span><span class="token punctuation">,</span>                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#3ecf8e'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">areaStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'default'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span> <span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">value</span> <span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> radarValueData </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>                        <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"categoryNumber"</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>'</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        radarChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 响应式调整</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            radarChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始加载</span>    <span class="token function">initRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Pjax重载处理</span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pjax:complete'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">initRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>post-calendar.ejs</strong></li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container archive-calendar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-calendar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 封装日历热力图初始化函数</span>    <span class="token keyword">function</span> <span class="token function">initPostCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 确保echarts加载完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> echarts <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>echarts<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">loadPostCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">loadPostCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">loadPostCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 销毁旧实例（如果存在）</span>        <span class="token keyword">let</span> calendarDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'post-calendar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>calendarDom <span class="token operator">&amp;&amp;</span> echarts<span class="token punctuation">.</span><span class="token function">getInstanceByDom</span><span class="token punctuation">(</span>calendarDom<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            echarts<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span>calendarDom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">let</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>calendarDom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">        <span class="token keyword">var</span> nameMap <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>language<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'zh'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'cn'</span> <span class="token operator">:</span> <span class="token string">'en'</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> titleText <span class="token operator">=</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>language<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'zh'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'文章日历'</span> <span class="token operator">:</span> <span class="token string">'Post Calendar'</span><span class="token punctuation">;</span>        <span class="token comment">// calculate range.</span>        <span class="token keyword">var</span> startDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'years'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> endDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> rangeArr <span class="token operator">=</span> <span class="token string">'["'</span> <span class="token operator">+</span> startDate<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'", "'</span> <span class="token operator">+</span> endDate<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'"]'</span><span class="token punctuation">;</span>        <span class="token comment">// post and count map.</span>        <span class="token keyword">var</span> dateMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        site<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> date <span class="token operator">=</span> post<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> count <span class="token operator">=</span> dateMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            dateMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> count <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> count <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// loop the data for the current year, generating the number of post per day</span>        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> datePosts <span class="token operator">=</span> <span class="token string">'['</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> dayTime <span class="token operator">=</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> time <span class="token operator">=</span> startDate<span class="token punctuation">;</span> time <span class="token operator">&lt;=</span> endDate<span class="token punctuation">;</span> time <span class="token operator">+=</span> dayTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            datePosts <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> datePosts <span class="token operator">+</span> <span class="token string">'["'</span> <span class="token operator">:</span> datePosts <span class="token operator">+</span> <span class="token string">', ["'</span><span class="token punctuation">)</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">'", '</span>                    <span class="token operator">+</span> <span class="token punctuation">(</span>dateMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">?</span> dateMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        datePosts <span class="token operator">+=</span> <span class="token string">']'</span><span class="token punctuation">;</span>        </span><span class="token delimiter punctuation">%></span></span>        <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> titleText </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>                <span class="token literal-property property">textStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#3C4858'</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>                <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'#555'</span><span class="token punctuation">,</span>                <span class="token literal-property property">borderColor</span><span class="token operator">:</span> <span class="token string">'#777'</span><span class="token punctuation">,</span>                <span class="token literal-property property">borderWidth</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token function-variable function">formatter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">var</span> value <span class="token operator">=</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token string">'&lt;div style="font-size: 14px;">'</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'：'</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;/div>'</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">visualMap</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">showLabel</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">categories</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">calculable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token literal-property property">inRange</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">symbol</span><span class="token operator">:</span> <span class="token string">'rect'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#ebedf0'</span><span class="token punctuation">,</span> <span class="token string">'#c6e48b'</span><span class="token punctuation">,</span> <span class="token string">'#7bc96f'</span><span class="token punctuation">,</span> <span class="token string">'#239a3b'</span><span class="token punctuation">,</span> <span class="token string">'#196127'</span><span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">itemWidth</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                <span class="token literal-property property">itemHeight</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                <span class="token literal-property property">orient</span><span class="token operator">:</span> <span class="token string">'horizontal'</span><span class="token punctuation">,</span>                <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>                <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token number">0</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">calendar</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>                <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> rangeArr </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>                <span class="token literal-property property">cellSize</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">splitLine</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#196127'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">borderColor</span><span class="token operator">:</span> <span class="token string">'#fff'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">borderWidth</span><span class="token operator">:</span> <span class="token number">2</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">yearLabel</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">monthLabel</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">nameMap</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> nameMap </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">11</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">dayLabel</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">formatter</span><span class="token operator">:</span> <span class="token string">'&#123;start&#125;  1st'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">nameMap</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> nameMap </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">11</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'heatmap'</span><span class="token punctuation">,</span>                <span class="token literal-property property">coordinateSystem</span><span class="token operator">:</span> <span class="token string">'calendar'</span><span class="token punctuation">,</span>                <span class="token literal-property property">calendarIndex</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> datePosts </span><span class="token delimiter punctuation">%></span></span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 响应式调整</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            myChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始加载</span>    <span class="token function">initPostCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Pjax重载处理</span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pjax:complete'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">initPostCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>post-charts.ejs</strong></li></ol><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">#posts-chart,    #categories-chart,    #tags-chart</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0.5rem auto<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0.5rem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>postCharts<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-charts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>far fa-bar-chart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'postCharts'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart col s12 m6 l4<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>posts-chart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart col s12 m6 l4<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categories-chart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart col s12 m6 l4<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags-chart<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 封装图表初始化函数</span>    <span class="token keyword">function</span> <span class="token function">initPostCharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 确保echarts加载完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> echarts <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">"<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>js<span class="token punctuation">.</span>echarts<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">loadAllCharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">loadAllCharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">loadAllCharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 销毁旧实例（如果存在）</span>        <span class="token punctuation">[</span><span class="token string">'posts-chart'</span><span class="token punctuation">,</span> <span class="token string">'categories-chart'</span><span class="token punctuation">,</span> <span class="token string">'tags-chart'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> chartDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>chartDom <span class="token operator">&amp;&amp;</span> echarts<span class="token punctuation">.</span><span class="token function">getInstanceByDom</span><span class="token punctuation">(</span>chartDom<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                echarts<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span>chartDom<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化三个图表</span>        <span class="token keyword">let</span> postsChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'posts-chart'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> categoriesChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'categories-chart'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> tagsChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'tags-chart'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript">        <span class="token comment">/* ========== 文章发布折线图数据 ========== */</span>        <span class="token keyword">var</span> startDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'years'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> endDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">'month'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> monthMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> dayTime <span class="token operator">=</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> time <span class="token operator">=</span> startDate<span class="token punctuation">;</span> time <span class="token operator">&lt;=</span> endDate<span class="token punctuation">;</span> time <span class="token operator">+=</span> dayTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>monthMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                monthMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>month<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        site<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> month <span class="token operator">=</span> post<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>monthMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                monthMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>month<span class="token punctuation">,</span> monthMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> monthArr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>monthMap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> monthValueArr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>monthMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* ========== 分类饼图数据 ========== */</span>        <span class="token keyword">var</span> categoryArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        site<span class="token punctuation">.</span>categories<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">category</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            categoryArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'name'</span><span class="token operator">:</span> category<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-property property">'value'</span><span class="token operator">:</span> category<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> categoryArrJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>categoryArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* ========== 标签柱状图数据 ========== */</span>        <span class="token keyword">var</span> tagArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        site<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tagArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'name'</span><span class="token operator">:</span> tag<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string-property property">'value'</span><span class="token operator">:</span> tag<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tagArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> b<span class="token punctuation">.</span>value <span class="token operator">-</span> a<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> tagNameArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> tagCountArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>tagArr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tagNameArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tagArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            tagCountArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tagArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> tagNameArrJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tagNameArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> tagCountArrJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tagCountArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span><span class="token delimiter punctuation">%></span></span>        <span class="token comment">// 文章发布折线图配置</span>        <span class="token keyword">let</span> postsOption <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"postPublishChart"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>                <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">'center'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'axis'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">xAxis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> monthArr </span><span class="token delimiter punctuation">%></span></span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">yAxis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'value'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"postsNumberName"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'line'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#6772e5'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> monthValueArr </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>                    <span class="token literal-property property">markPoint</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">symbolSize</span><span class="token operator">:</span> <span class="token number">45</span><span class="token punctuation">,</span>                        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#fa755a'</span><span class="token punctuation">,</span><span class="token string">'#3ecf8e'</span><span class="token punctuation">,</span><span class="token string">'#82d3f4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'max'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#3ecf8e'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"maximum"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'min'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#fa755a'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"minimum"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token literal-property property">markLine</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#ab47bc'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span>                            <span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'average'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"average"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">&#125;</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 分类饼图配置</span>        <span class="token keyword">let</span> categoriesOption <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"categoriesChart"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>                <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">'center'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">trigger</span><span class="token operator">:</span> <span class="token string">'item'</span><span class="token punctuation">,</span>                <span class="token literal-property property">formatter</span><span class="token operator">:</span> <span class="token string">"&#123;a&#125; &lt;br/>&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"categories"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'pie'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">radius</span><span class="token operator">:</span> <span class="token string">'50%'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#6772e5'</span><span class="token punctuation">,</span> <span class="token string">'#ff9e0f'</span><span class="token punctuation">,</span> <span class="token string">'#fa755a'</span><span class="token punctuation">,</span> <span class="token string">'#3ecf8e'</span><span class="token punctuation">,</span> <span class="token string">'#82d3f4'</span><span class="token punctuation">,</span> <span class="token string">'#ab47bc'</span><span class="token punctuation">,</span> <span class="token string">'#525f7f'</span><span class="token punctuation">,</span> <span class="token string">'#f51c47'</span><span class="token punctuation">,</span> <span class="token string">'#26A69A'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> categoryArrJson </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>                    <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">emphasis</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            <span class="token literal-property property">shadowBlur</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>                            <span class="token literal-property property">shadowOffsetX</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                            <span class="token literal-property property">shadowColor</span><span class="token operator">:</span> <span class="token string">'rgba(0, 0, 0, 0.5)'</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 标签柱状图配置</span>        <span class="token keyword">let</span> tagsOption <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"top10TagsChart"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">,</span>                <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>                <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token string">'center'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">tooltip</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">xAxis</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> tagNameArrJson </span><span class="token delimiter punctuation">%></span></span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">yAxis</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'value'</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">series</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#82d3f4'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token literal-property property">barWidth</span> <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>                    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> tagCountArrJson </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>                    <span class="token literal-property property">markPoint</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">symbolSize</span><span class="token operator">:</span> <span class="token number">45</span><span class="token punctuation">,</span>                        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'max'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#3ecf8e'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"maximum"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'min'</span><span class="token punctuation">,</span>                            <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#fa755a'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"minimum"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token literal-property property">markLine</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">itemStyle</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'#ab47bc'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span>                            <span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'average'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"average"</span><span class="token punctuation">)</span>  </span><span class="token delimiter punctuation">%></span></span>'</span><span class="token punctuation">&#125;</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 渲染图表</span>        postsChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>postsOption<span class="token punctuation">)</span><span class="token punctuation">;</span>        categoriesChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>categoriesOption<span class="token punctuation">)</span><span class="token punctuation">;</span>        tagsChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>tagsOption<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 响应式调整</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            postsChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            categoriesChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tagsChart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始加载</span>    <span class="token function">initPostCharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Pjax重载处理</span>    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'pjax:complete'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">initPostCharts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转载提示bug"><a href="#转载提示bug" class="headerlink" title="转载提示bug"></a>转载提示bug</h3><p>配置完上面的之后，突然发现代码复制的地方，点击一次会弹出多个转载提示（和你进入该界面的次数一样）——如果你在主题配置文件设置了<code>reprint:  enable: true</code> 的话。</p><p><img src="/2025/07/08/20250708/image-20250729140422797.png"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a><strong>解决方法</strong></h4><p>找到<code>E:\blog_matery\themes\matery\layout\_partial\reprint-statement.ejs</code> 该配置文件。修改下面代码：（询问deepseek得）</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"copy"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> toastHTML <span class="token operator">=</span> <span class="token string">'&lt;span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'pleaseFollowReprintPolicy'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>&lt;/span>&lt;button class="btn-flat toast-action" onclick="navToReprintStatement()" style="font-size: smaller"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'checkPolicy'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>&lt;/a>'</span><span class="token punctuation">;</span>    <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">toast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">html</span><span class="token operator">:</span> toastHTML<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">navToReprintStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"html, body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">scrollTop</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#reprint-statement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">-</span> <span class="token number">80</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为：（直接替换这部分代码即可。也可以注释上面的备份）</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">const</span> oldCopyListeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>copyEventListeners<span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">listener</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleCopyEvent</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> toastHTML <span class="token operator">=</span> <span class="token string">'&lt;span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'pleaseFollowReprintPolicy'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>&lt;/span>&lt;button class="btn-flat toast-action" onclick="navToReprintStatement()" style="font-size: smaller"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'checkPolicy'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>&lt;/button>'</span><span class="token punctuation">;</span>    <span class="token constant">M</span><span class="token punctuation">.</span><span class="token function">toast</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">html</span><span class="token operator">:</span> toastHTML<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  window<span class="token punctuation">.</span><span class="token function-variable function">navToReprintStatement</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"html, body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">scrollTop</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#reprint-statement"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">-</span> <span class="token number">80</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>document<span class="token punctuation">.</span>copyEventListeners<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    document<span class="token punctuation">.</span>copyEventListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  document<span class="token punctuation">.</span>copyEventListeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>handleCopyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"copy"</span><span class="token punctuation">,</span> handleCopyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="未解决bug"><a href="#未解决bug" class="headerlink" title="未解决bug"></a>未解决bug</h3><p>第一次进入网站，打开的第一篇文章，其目录无法正确显示和隐藏。重进、刷新会恢复正常</p><h3 id="重大bug"><a href="#重大bug" class="headerlink" title="重大bug"></a>重大bug</h3><p>首页banner从其他界面跳转 就无法再显示了。目前难以找到解决方法（在本地部署正常显示，但网页上无法显示，十分奇特）</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他设置均可以参照官方发布的文档进行操作。总的来说相较于Next主题还是简便许多的，因为后者没有官方配置说明，需要懂这方面的知识，而且由于版本更新，网上大量的适配版本都很老了（你敢相信，我24年配置的next主题竟然是20年发布的7.8.0版本，而那时早已发布了8.版本了）。由此可以教程滞后性有多大。如果想更新版本，需要从头到尾的重新配置——而事实是早已忘记了当初找的哪些文章（网上教程很多都是随意转载的，很多根本无用）。这也就是为何自从配置好，我就没再配置过，因为改动一点，就发现跑不动了，直到这次更换主题。</p>]]></content>
      
      
      <categories>
          
          <category> 博客优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中的插入图片问题解决</title>
      <link href="/2025/07/05/20250705/"/>
      <url>/2025/07/05/20250705/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：深入探讨了写文章时插入图片<span id="more"></span>的语法。</p><p><strong>preface:  上互联网搜寻了很多资料，都发现引用方式<code>！[](*.jpg)</code>总是莫名失败，经过审查界面元素、对Html代码分析，终于找到了问题所在。</strong></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有两种插入图片方式，分别为：</p><p><code>&#123;% asset_img *.png 这是一张图片%&#125;</code></p><p><code>！[图片描述](*.jpg)</code></p><p>他们的能否使用，取决于下图中relative_link是否启用。启用了，则使用第二种方可；为false，则是用第一种形式。目前未发现这种东西对其他有任何影响。比如下载文件的语法不会有改变：<code>[描述](/download/*.7z)</code></p><p>目前还未搞懂具体原因，但是两种方法都无法在编辑器中显示图片，就比如我用的typora，要在编辑器中显示（改了就不能在网页中显示）得改成 <code>！[图片描述](./这篇文章的名字/*.jpg)</code>，因为图片是放在同名文件夹下的，推荐第二种方式，可参见下篇关于Matery主题的文章。（解决方式倒是看见过一篇文章，但是感觉太麻烦了）</p><p><img src="/2025/07/05/20250705/image-20250706215449624.png"></p><p><a href="/download/1.jpg">测试下载</a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>现在提供一种解决方案，由于启用<code>relative_link: true</code> 会带来一些意想不到的问题，比如版权声明中文章链接的错误显示。所以，经过检索，有了下面一种完美的解决方案。注意，我这里是结合下面的链接所尝试出来的一种可行的方法，与下面的链接中方法有不同之处！</p><p>参考链接：<a href="https://shmily101.github.io/post/hexo/003-hexo-img">优雅地在 hexo 博客中插入图片 | 小野</a>|<a href="https://zhuanlan.zhihu.com/p/696630232">(17 封私信 &#x2F; 80 条消息) hexo 博客插入本地图片时遇到的坑 - 知乎</a>|<a href="https://moeci.com/posts/hexo-typora/">Hexo + Typora + 开发Hexo插件 解决图片路径不一致 | yiyun’s Blog</a></p><p>首先，在根目录的配置文件下，添加下面代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">relative_link<span class="token operator">:</span> false#下面是新添加的marked<span class="token operator">:</span>  prependRoot<span class="token operator">:</span> true  postAsset<span class="token operator">:</span> true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能在<code>relative_link: false</code>的情况下使用 <code>![](image.png)</code>来显示图片，但是我们发现，使用md编辑器却无法实时显示，于是我们用到了下面的插件：</p><p>在根目录下输入 <code>npm install hexo-asset-img --save</code> 安装此插件。如果有<code>hexo-asset-image</code>插件，需要在 <code>node_modules</code> 目录下把其删除，或者输入  <code>npm uninstall hexo-asset-image</code>(命令可能是这样)卸载插件。</p><p>这样，使用 <code>![](**/image.png)</code> 就可以实现md编辑器实时预览图片，而且网页上也能看到，并且通过对Typora的设置，能够实现编写md时直接复制粘贴图片，方便快捷。（当然，似乎 原方式<code>![](image.png)</code>也支持，也就是上面三种方式均可在网页端显示图片</p><p>插件bug如下：（注意，前面的为md文件名，这里不得已打了空格以便显示）</p><pre class="line-numbers language-none"><code class="language-none">![](20250705  &#x2F;image.png) 在以代码模式显示时，会显示为![](image.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我估计是该插件的实现原理就是网页端会替换上面的东西，所以造成了这种问题</p><p><img src="/2025/07/05/20250705/image-20250721195351088.png" alt="image-20250721195351088"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>如果使用的是Typora，采用以下设置方法，这样将图片复制粘贴时，会自动生成一个同名文件夹和图片。</p><p><img src="/2025/07/05/20250705/image-20250721195637379.png"></p>]]></content>
      
      
      <categories>
          
          <category> 博客优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 插入图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语报 第1期</title>
      <link href="/2025/07/03/20250703/"/>
      <url>/2025/07/03/20250703/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：第一期。<span id="more"></span></p><p><strong>preface:  为了真正学习英语，包括：听力、口语、阅读等等。（其实是不精通英语导致看外网太难受）</strong></p><p><img src="/2025/07/03/20250703/1.jpg"></p><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><p>decode  解码</p><p>streamline  简化</p><p>grassroots  基层、基层的</p><p>propel  推动</p><p>firsthand 亲自</p><p>candid sincere 坦率的、直言不讳的。 </p><p>sincerity</p><p>robust</p><p>underpin  支持、支撑</p><p>bolster</p><p>ample 充裕的、充足的</p><h2 id="短句"><a href="#短句" class="headerlink" title="短句"></a>短句</h2><p>work ethics</p><p>set to 将要开始</p><p>Like spring rain</p><p><strong>bringing an end of the era of</strong> tedious form-filling</p><p><strong>unveil</strong> the profound impact of</p><p>Through <strong>embracing</strong> self-reform</p><p><strong>fancy</strong> myself a expert 自诩为…</p><p><strong>soak up</strong> its local charm</p><p>with remarkable ease</p><p>couldn’t help but feel</p><p><strong>allocate</strong> time <strong>to</strong> other tasks</p><p><strong>not just a passing breeze</strong></p><p>its night glow <strong>enchanting</strong> every wanderer</p><p>in the second half of the year</p>]]></content>
      
      
      <categories>
          
          <category> 英语学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓手机隐藏图片等</title>
      <link href="/2025/07/02/20250702/"/>
      <url>/2025/07/02/20250702/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：介绍了在安卓手机中<span id="more"></span>，隐藏某一文件夹下相册对媒体文件的扫描。</p><p><strong>preface:  安卓手机的相册总是很乱，因为基本上很多个人存放在某些位置的图片、视频等，无论是下载的小游戏等等，总是会被扫描显示出来。所以下面介绍一种方法，避免其出现在相册等中。</strong></p><p>参考链接：<a href="https://cn.apkjam.com/tricks/nomedia.html">.nomedia 文件的作用</a></p><p>具体原理可以参见上面的链接。</p><p>在需要隐藏图片或者视频等等的文件夹下，新建一个.nomedia的文件（no media的意思）然后重启手机就可以了。这样手机中的相册等就无法检索到这些文件了。我们可以发现qq、微信等应用下载的各种文件通常也同样无法通过文件管理找到，其应该也是用了类似的原理。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>月亮与六便士（持续更新中）</title>
      <link href="/2025/07/01/con-book1/"/>
      <url>/2025/07/01/con-book1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：本文为评鉴一本书<span id="more"></span>《月亮与六便士》。</p><p><strong>preface: 读书，从小读到现在，却几乎没有真正读过书。于是乎，趁暑假良机，来消灭前几学期买来全新的存货。本文介绍的书为王晋华翻译的、英国毛姆的作品：月亮与六便士，中国文联出版社出品。下面是个人的品鉴。</strong></p><h2 id="读书准则"><a href="#读书准则" class="headerlink" title="读书准则"></a>读书准则</h2><p>&emsp;看一本书的时候，我们往往会把自己代入进书中的主人公，于是便很容易被各种因素左右而失去了分析。所以，本书品鉴中，我会保持客观理性的分析，而非代入所谓多样的道德伦理。当然，也并不会因为已知它是名著，所以潜意识的朝着赞美而解读——虽然这是很普遍的现象。其次，品鉴书，不因为作者而带有偏激，也就是说将作品和作者分割开来。</p><h2 id="读书的本质"><a href="#读书的本质" class="headerlink" title="读书的本质"></a>读书的本质</h2><p>&emsp;读书是为了什么？（当然，这里的读书是指阅读文学作品）很多人评判书好坏、是否想看的标准，在于是否能找到认同感、或者说是否符合自己的想法等等。显然，这是不合理的。在现在信息大爆炸的时代，每个人都能成为作家，各种作品大爆炸。而经典之所以能成为经典，必然是有什么理由的。读书，便是为了陶冶情操、是自己与自己的思考、辩驳、重塑。当然，如果你本就是喜欢世俗，那确实不适合阅读任何经典。</p><h2 id="正文（共五十八）"><a href="#正文（共五十八）" class="headerlink" title="正文（共五十八）"></a>正文（共五十八）</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>1 - 2</p><p>前两节为引子部分，引出了故事的讲述者“我”。其中简要的表达了作者本人对一些事物的看法，属于作者的个人牢骚。</p><p>3 - 7</p><p>这部分陈述了“我”接触到男主人一家所发生的故事，尽管“我”只见过主人公思特里克兰德一次（为方便、后文简称克兰德）。在“我”看来，这一家是一个传统、普通的家庭，如果不出意外，会像无数对其他家庭有一样，平平淡淡、幸福安然的度过。这看起来有序、平静、幸福，正是我们所向往、所追求的。在“我”看来，男主人和其太太，也是和谐恩爱的，总之就是印象还不错。然而，不出意外的出意外了。</p><p>8 - 10</p><p>克兰德留下一封冷淡的信，毫无征兆地突然离开前往巴黎，主流营造的原因是和其他人跑了，带走了很多钱、住在花天酒地的旅馆。由于特殊情况，“我”在其太太的恳求下，接受了前往巴黎面见克兰德，请求其回来差事。“我”也是逐渐发现了这份差事的背后：太太之所以还想着只要克兰德鞥回来便当无事发生，在于流言蜚语与闲言碎语。</p><p>11 - 14</p><p>“我”动身前往巴黎，在破烂的楼房找到了克兰德。在执行嘱托的过程中，“我”得知了克兰德离开的原因：他要画画，为此抛弃了一切。这里让我们分析一下。</p><p>“我不知道当一个人意识到他的亲朋好友都在反对他时，他是否还能过得心安理得。你能肯定你的内心就不会感到不安吗？每个人都有良心和自尊，你迟早会受到你良心的谴责。假如你的妻子死了，难道你不会受悔恨的折磨吗？” ，面对我的质问，他选择了沉默，却仍然不屑一顾。这里我们可以看出，此时克兰德并不能完全的放弃一切（内心仍无法完全放下规则下的人），但他内心对画画的渴望，驱使他义无反顾地去做这件事。</p><p>“我告诉你了，我必须得画画。我控制不了我自己。当一个人掉进水里，他游的好，还是游得不好，并不重要：重要的是他必须从水里出来，否则的话，他就得被淹死。”&emsp; “只有诗人和圣贤才相信在沥青路面上辛勤浇灌，会有百合发展出来，对他们的劳动给予回报”</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apk无法安装的一种解决方法。</title>
      <link href="/2025/07/01/20250701/"/>
      <url>/2025/07/01/20250701/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：apk游戏无法安装<span id="more"></span>（比如涉及签名等）。</p><p>&emsp;有时下载gal的apk，突然发现涉及到奇奇怪怪的问题。一种可能解决方式为：用mt管理器解压apk，再用joi模拟器打开assets文件夹下的index.html或者game.exe（仅供参考）。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> joi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub入门（持续更新）</title>
      <link href="/2025/06/30/con-github/"/>
      <url>/2025/06/30/con-github/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：主要介绍GitHub的<span id="more"></span>使用。</p><p><strong>preface: 大一的时候就接触到了GitHub这么一个平台，奈何因为网络问题，所以很少登录。加之全英文看得头痛的界面，所以虽然认为其很有用，但也迟迟没有深入了解。那么，现在就趁暑假，学会使用GitHub这一藏宝地。</strong></p><p>参考链接：<a href="https://www.bilibili.com/video/BV1e541137Tc/?spm_id_from=333.337.search-card.all.click&vd_source=b7320a11239509eb1a422f34c9f477a3">Github 新手够用指南 | 全程演示&amp;个人找项目技巧放送_哔哩哔哩_bilibili</a>|<a href="https://zhuanlan.zhihu.com/p/664195515">(17 封私信 &#x2F; 80 条消息) 【小白向】最新最详细的GitHub全站使用指南 - 知乎</a></p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>简单来说就是一个项目提交的应用。</p><p><code>git clone https://...</code> 下载仓库，区别于下载zip（前者直接是仓库，后者是纯粹文件夹）</p><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>&emsp;可以搜索github中文插件，便能找到一个github上的以 油猴脚本方式运行的中文脚本，虽然目前存在部分翻译不恰当的问题，但对于英文水平不高的大多数人，还是很可以的。（全英文界面看起来太难受了）</p><p>一些检索技巧：</p><p>特殊的查找资源小技巧-常用前缀后缀<br>• 找百科大全 awesome xxx<br>• 找例子 xxx sample<br>• 找空项目架子 xxx starter &#x2F; xxx boilerplate<br>• 找教程 xxx tutorial</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禁止粘贴？禁用JavaScript</title>
      <link href="/2025/06/17/20250617/"/>
      <url>/2025/06/17/20250617/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  摘要：介绍部分网站禁止粘贴<span id="more"></span>如何解决。</p><p><strong>preface:转载至</strong>：<a href="https://blog.csdn.net/weixin_43691058/article/details/105777194">网课作业禁止粘贴?禁用JavaScript了解一下!-CSDN博客</a> </p><p>简单来说就是禁用浏览器的javascript。具体方法根据浏览器的不同有不同的设置方式。有时候还需要注意自己安装软件的快捷键冲突问题。本文这里不多叙述，根据所用浏览器自行查阅。</p><p><img src="/2025/06/17/20250617/1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从中学举报被打事件开始</title>
      <link href="/2025/06/02/20250602/"/>
      <url>/2025/06/02/20250602/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：从近期事件分析人际交往<span id="more"></span>理念。</p><p><strong>preface: 最近刷视频，偶然发现一个很有意思的事件，评论区也是一如既往的充斥着戾气和不对付的偏激。下面就来简单了解一下事件的全貌，当然，我们无法真实了解事件的真实情况，所以我们就假定就是发生了这样的事，原因等等就是报道传播的那样。</strong></p><p>参考链接：<a href="https://www.163.com/dy/article/K0P176FP0514C1JT.html">一中学生举报同学带平板被打伤！法院：鼓励互相检举的学校应担责三成_网易订阅</a>|<a href="https://www.sohu.com/a/899657157_122177654">中学生举报同学带平板被打！法院判学校担责 30%，举报者自担 20%_管理_湖南法院_判决</a>|<a href="https://www.thepaper.cn/newsDetail_forward_30894068">马上评丨学校鼓励举报同学，为何法院不支持？_澎湃评论_澎湃新闻-The Paper</a></p><p><img src="/2025/06/02/20250602/1.png"></p><p>我们就以下面的一则说明为准。</p><p>5月28日，湖南高院召开未成年人权益司法保护工作新闻发布会，通报了这起案例：未成年人宋可（文中人物均为化名）所在的中学严禁学生携带手机等电子设备来校，并鼓励学生举报违规情况。宋可发现同学周劲玩手机，向老师举报，并从其书包里搜出平板电脑交给老师，老师为此奖励了宋可一瓶牛奶。事后，不满16周岁的周劲将举报者打伤。在这起民事案件当中，法院判决由打人者周劲承担50%的民事赔偿责任，学校承担30%的责任，宋可自行承担20%的责任。</p><p>好那么好，我们先来看看一些唐氏言论</p><ul><li>偷的，没锁屏密码玩不了，害怕被发现，上交给老师</li><li>奖励一瓶牛奶也太搞笑了</li><li>傻孩子，挨了这顿打，以后就长记性了</li><li>是这样的，带平板的话就要做好被举报的准备，举报人就要做好被被举报人报复的准备，社会就是这样的，让年轻人学学挺好</li><li>情商太低，我小学也有很多这种上语文课写数学作业被举报，后来考上市重点高中就没有这种人了，有的人就是剑</li></ul><p>相信是个正常人看到这些评论已经开始笑了。那也懒得再作过多分析，可以参考有关互联网的blog。</p><p>好那么好，现在让我们开始进行正常人的分析。为了方便，我们称举报人为张三，被举报人为李四。李四在违反普遍承认的校规下，带电子设备来学校，不幸被张三发现。于是张三向老师举报，并且搜出平板给老师，并得到老师奖励。李四知道后，大怒，打伤了张三。法院怎么做的我们懒得管。</p><p>我们发现，这段描述十分的含糊，张三搜出平板是先于举报还是后于？是当着老师的面？是老师授意还是主动？张三举报的真实动机是什么？是受到李四玩电子设备的干扰？还是为了举报得到的奖励？还是单纯因为发现其违规？ 所以，这件事情是完全无法讨论的。</p><p>那么，我们就以小见大，探讨一下举报的本身。随便搜搜这件事情，就可以找到许多类似的视频下面的许许多多的评论。大都都表达了对告密者的反对。先提出一点，在目前普遍素质低下、利益至上的社会大环境下，所谓的人情世故就是趋利避害、原始生物人性。从这点来考量，我们都是成年人，对于一些规矩有自己的想法，有时并不愿意遵循。有时候是因为这种规矩其本身的不合理，有时候是因为不遵守的人多了。在这个时候，本来你就不愿意遵守这些束缚，却偏偏有个人举报揭发了你，迫使你做自己不喜欢的事情或者其他，那么你看到类似的事件发生，痛骂举报者的心理就很好理解了。</p><p>比如大学水课翘课，班委揭发你，导致受惩罚。从被举报人的角度来看，即使是我碰到这种事，也是肯定会大怒痛骂举报人的，因为一翘课不会影响到任何人，二我有自己打算，并不像浪费自己的生命（这种事就如同强制要求大学生必须认真听课一样可怕），因为这种制度本身就不合理，就不适用于所有人。从举报人的角度来看，虽然有可能主观上是为了让你好好学习建设班级风气，但是正如我前面所说的那样，每个人都有自己的考量，别人翘课也一样，不能强加自己的想法：必须好好听课，于别人之上。这才是真正的理解方式。而不是如同大多数人的：反正不关我事，没侵扰到我，我举报他干嘛，或者这个人就是傻，得罪别人的事谁敢干。这种典型的保身言论永远无法改变任何，只能使得原本烂掉的社会更加烂和绝望。每个人都是独立的个体，都应该有独立的思想和独立的规划，而不是想着：为什么没有人来指导指引我（这是典型的高中思维）？我们需要为自己的选择和行动负责，世界是属于自己的。所以这样来看，只要别人不是做了恶劣的事情，或者侵犯到别人，就不用管了，毕竟都长大了，需要为自己负责。比如高中的早恋、日常考试作弊什么的，我看到都一概无视的。而对于学校和班主任而言，这些就牵扯到他们的利益了：要使得学生考高分。</p><p>所以现在来看，老师和学校这种鼓励举报的做法确实很不合理，抓学生本来是他们自己的事情，和其他普通学生大多数情况下本来就毫无关系（除一些特殊情况），他们却以举报有奖，让学生举报学生的不合理行为，这样无疑会带偏很多未成年、被困在囚笼里的学生。于是就有了上面的这件事。</p><p>好吧，就如此吧</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人际交往 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级搜索指令</title>
      <link href="/2025/05/28/20250528/"/>
      <url>/2025/05/28/20250528/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：高级搜索选项<span id="more"></span>。</p><p><strong>preface:  参考链接：<a href="https://cloud.tencent.com/developer/article/1464793">99%的人都不知道的，高级搜索技巧！精度提升 10 倍！-腾讯云开发者社区-腾讯云</a></strong></p><p>最近检索一些信息时，发现来来回回总是知乎、百度、CSDN等等的一些垃圾，根本无法寻找到优质内容，这也许和搜索策略与选取的搜索引擎相关，于是本文便介绍一下搜索引擎中的高级搜索选项。这里以edge为例。</p><ul><li><strong>site指令</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">你好 site<span class="token operator">:</span>baidu<span class="token punctuation">.</span>com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定搜索的网站，可以更加细化。</p><ul><li><strong>filetype</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">百年孤独 filetype:pdf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索指定文件类型，一般用于查找电子书、ppt等等。感觉一般用不到</p><ul><li><p><strong>3、逻辑词</strong></p><table><thead><tr><th align="left">符号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">查找包含所有字词的网页，这些术语前面带有 + 符号。 还允许包含通常被忽略的术语。（即停用词）</td></tr><tr><td align="left">“ “</td><td align="left">查找短语中的确切字词。</td></tr><tr><td align="left">()</td><td align="left">查找或排除包含一组字词的网页。</td></tr><tr><td align="left">AND 或 &amp;</td><td align="left">查找包含所有术语或短语的网页。</td></tr><tr><td align="left">NOT 或 –</td><td align="left">排除包含术语或短语的网页。</td></tr><tr><td align="left">OR 或 |</td><td align="left">查找包含任一术语或短语的网页。</td></tr></tbody></table></li></ul><p>注意，上面的停用词是为了便于索引而建立的，有很多。可以自行查阅（比如各种数字和哈哈等常见意义不大的词）</p><p>使用示例：</p><pre class="line-numbers language-none"><code class="language-none">+在 +巴黎 -希尔顿<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&ensp;</p><p>目前就总结到这里吧，还有其他的比如language等等，但实测并没有用，也许是格式问题，日后有空再补充。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息化下面对陌生人的一种态度</title>
      <link href="/2025/05/20/20250520/"/>
      <url>/2025/05/20/20250520/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：社交媒体下的人际交往<span id="more"></span>。</p><p><strong>preface:  这天刷Bilibli时，偶然翻阅评论区，看到一条这样的评论，感到十分的可笑。于是乎，便思索当下信息化时代，基于互联网的人际交往方式，该如何应对？</strong></p><p>参考链接：<a href="https://www.huxiu.com/article/2973594.html">社交媒体让我们的关系更亲密了吗？-虎嗅网</a> |<a href="http://guoqing.china.com.cn/2024-05/28/content_117218462.htm">数字时代的人际关系：社交媒体对人与人之间连接的影响_中国国情_中国网</a></p><p>&emsp; 大学、或者说日后成年人的时代，我们可以预料到，几乎绝大多数的聊天、交流都是基于互联网平台的。尤其是和陌生人的交流。不同于以往的面对面交流，基于互联网的交流基本是文字图片互动形的，是远程的。那么我们可以体会到文字的博大精深和文字的单薄无力。当我们发信息的时候，可能不得不思索自己表达的东西是否会引起他人误会，当我们接收信息的时候，又可能因为某个词而过度解读等等。即使现在有了所谓的表情和表情包，人们也总是能开发出很多很多的偏离原本单纯的设定，于是乎我们不得不花费大量精力和时间去了解学习所谓的梗和其他。同时，网络上的交流比如qq微信，都基本是浅层的交流，除非你和对方本来关系就好常常联系，不然你会发现好友列表基本都是尸体、偶然有兴致发的空间也从来只有寥寥敷衍的点赞，甚至背地里还要被世俗嘲讽。长此以往，我就感觉人际交流越来越累的，越来越扰人心智了。在社交媒体上，每个人都有了伪装，所以不同于现实，他可以随心所欲的发表各种意见，肆无忌惮的传播各种言论。而当今社会显然不知所措，于是我们可以发现，社交媒体充斥着乱七八槽的陈年垃圾无人清理。初逃离单调高中监狱的我们，自然大都一开始会陷入互联网人际交流的可怕陷阱中，浑然而不自知。同时，我们也极易过度的感性，为完全不知的何种生物投入过多，以致于信念崩塌（从下面一段言论中可以看出</p><p><img src="/2025/05/20/20250520/2.png"></p><p>&emsp; 总而言之，从上文来看，我们可以发现社交媒体下的交流是无力的，难以建立起牢固的人际关系，这就是为什么越大越感觉没朋友，因为你连和别人真实的交流的机会都基本没有。那么，在目前不得已使用的大趋势下，该怎么应对而不至于迷失惆怅呢？简单来说就是把握边界感，清楚的认识到互联网下若有若无的关系和倾泻的垃圾场地位，不要融入现实生活中。还有一点，要充分考察对方的品性等等。正如前几篇blog中所写的一样，考察信息的真实性等等。下面我们来看前言中提到的，我认为很可笑的评论</p><p><img src="/2025/05/20/20250520/1.png"></p><p>为什么我会说可笑呢？让我感觉可笑的是下面的加油评论。并没有任何嘲讽的意味。下面来分析一下：</p><p>从楼主的发言来看，他是一个怎样的人呢？我不多做评价。我第一眼是很不舒服的，这并不是因为我歧视现有的保研制度，而是因为其本身发言的可笑，仿佛他保研本就是应该的。他加权高，想保研，没问题；但一个学期之后，因为专业课而破防，然后发个言论把原因归咎于专业课本身上（或许有老师、学校），但大概率没有其自身。那么，他发表这个评论的目的何在？无非是向互联网倾泻自己的情绪罢了。</p><p>那么，现在来看，下面的加油加油，看似鼓励和暖心的回答现在看来是不是就很可笑了？楼主本身就不是想找安慰而发言的，而且楼主本人就不值得。所以，假如你是一个真挚的人，就应该看破事物的表面现象。正如九品芝麻官中所说：贪官要奸，清官要更奸。否则，便如同以前一样，最终只会陷入惆怅或者被旁人骗和利用得团团转。从一个陌生人的角度来看，你想保研没保到，还到网上肆意宣撒负面情绪，我还来安慰你？你保上研的同时，不意味着另一个想保的人的梦也被打碎了？难不成他也和你一样，来喷？细细想来，我们何必安慰鼓励他呢？这样能给人类带来何种的好处吗？我窃以为只能加大贫富和社会割裂罢了。所以，当我看到这样的评论时，第一反应是可笑的，而不是如可能的大多数，开始抨击或者同情。</p><p>那本文就到这里吧</p><hr>]]></content>
      
      
      <categories>
          
          <category> Life Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人际交往 </tag>
            
            <tag> 网络 </tag>
            
            <tag> 陌生人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不被表面言论裹挟</title>
      <link href="/2025/05/07/20250507/"/>
      <url>/2025/05/07/20250507/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：做一个有主见的人。<span id="more"></span></p><p><strong>preface:  在网络上，常常能够见到许多评论和高见。也常常被这些言论所裹挟，仿佛他们说的很有道理、就是正确和应该被听从似的，然后开始了自责、焦虑或者自认为自己又懂了……到头来，一切未曾改变，而自己从来没有过坚定的主见。</strong></p><p>&emsp;心灵鸡汤、所谓大佬言论……网上的不知名生物发表的评论真的可信吗？看似真挚的言论难道就应该被奉为圭臬吗？点赞看似很多、主流的评论就是对的吗？我看大多都是谬论。</p><p>毛主席说没有调查，就没有发言权。细细思考，发现，在当今网络世界，有多少人在网上的评论可信度很高？难道没有片面、偏见、扭曲？我们难道宁可相信自己所接收到了部分言论，而不相信自己生活周围所实地接触到的？互联网是很恐怖的，因为我们往往难以意识到互联网中信息的片面虚假和沉默的大多数。</p><p>在当今这种鱼龙混杂的环境下，我们所偶然刷到的视频中，看似用心良苦的、侃侃而谈的所谓的人生大道理，可信吗？扪心自问，有多少人在网上宣传自己的秘诀？自己的真实思考知识？发表这些言论的人自己有实地经历、考察过吗？难道不大都只是意淫或者以偏概全吗？他们凭什么这么的热心肠？在没有任何好处的情况下，向无数人分享自己真正的成功秘诀？（假定他们真的成功了）明明在现实生活中，他们对待周围的人不这样。</p><p>我并不是说，网上所看到的言论都是不可信的，而是说，大部分的言论都是可笑片面的，即使可能有几百的点赞。但如果考虑到从来不点赞的自己，想想那些点赞的人，这些点赞也是不值一提的了。</p><p>所以，要做一个有主见的人，这样当我们偶然扫到 一些评论，也不至于被其扰乱了心思，被不知名的生物牵着鼻子走。坚定的走自己的路，这样才能不内耗和焦虑，毕竟在当下还不至于饿死。</p>]]></content>
      
      
      <categories>
          
          <category> Life Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 胡言乱语 </tag>
            
            <tag> 思考 </tag>
            
            <tag> 主见 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>口香糖的一生</title>
      <link href="/2025/04/30/20250430/"/>
      <url>/2025/04/30/20250430/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：口香糖去处。<span id="more"></span></p><p><strong>preface:  小时候曾尝过口香糖，被提醒不能吞下去。这种一般而言，带有薄荷味或者甜味的东西，为什么能够一直咀嚼？被吐掉之后，它又何去了呢？</strong></p><p>&emsp;<strong>口香糖到底是什么？</strong>&emsp;</p><p>口香糖的主要成分是胶基，由橡胶（目前一般为石油生产的聚合物）、树脂等制作，混合有香料（薄荷、水果味香料）、甜味剂。</p><p>&emsp;<strong>误吞口香糖会如何？</strong></p><p>一边咀嚼一边说话，尤其是在咀嚼了一段时间后突然说话时，可能会咬伤舌头、嘴唇或口腔。但误吞一般不会引起不良后果。因为胶基不溶于胃液且不能被消化吸收，几天内会被身体排泄出来。此外，由于人体消化道内壁细胞更新速度很快，所以所谓的口香糖会造成肠壁或胃壁粘连的情况并不存在。</p><p>&emsp; <strong>为什么我嚼口香糖总是吹不出泡泡？</strong></p><p>我个人认为，这种和人体构造和后天学习相关。有些人的舌头可能天生适合，然后误打误撞就学会了吹泡泡，于是人脑自动记忆，所以他能够做到十分自然的吹出。就好比那些似乎天生就能够吹口哨的人。普通人需要通过一定的学习、理解，成功一次之后，就也能自动的学会了，而这些基本都是难以用语言形容，只可自己尝试的。就比如简单的用羽毛球拍捡球，新手没有听经验分享，基本无法成功。但是，如果找到了成功的特殊点，那么成功一次之后便能够愈加熟练。</p><p>&emsp; <strong>被吐掉的口香糖最终去哪了？</strong></p><p>这部分的资料很少，一般可能是被掩埋了，毕竟是橡胶类制品。或者被回收利用，制作成塑料制品。</p><hr><p>参考链接：维基百科（需自行检索）</p>]]></content>
      
      
      <categories>
          
          <category> Chase Cat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 口香糖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常一次性电池的型号简析</title>
      <link href="/2025/04/10/20250410/"/>
      <url>/2025/04/10/20250410/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：简单介绍电池型号<span id="more"></span>简写。</p><p><strong>preface: 参考链接：</strong><a href="https://www.bilibili.com/opus/487858566294151952">电池研究院：电池分类与命名大全 - 哔哩哔哩</a>| <a href="https://baijiahao.baidu.com/s?id=1781244143466908663">1～7号电池怎么区分？看看这些简单的方法！一看就会！</a></p><p>AAA是几号电池？——电池的型号分类</p><p>&emsp;<strong>简单来说，有如下</strong></p><ul><li><p>1号电池：直径32.3±0.2mm，高度59.0±0.5mm</p></li><li><p>2号电池：直径25.3±0.2mm，高度49.5±0.5mm</p></li><li><p>3号电池：直径16.8±0.2mm，高度49.0±0.5mm</p></li><li><p>5号电池：直径14.0±0.2mm，高度49.0±0.5mm</p></li><li><p>7号电池：直径10.5±0.2mm，高度44.0±0.5mm</p><pre class="line-numbers language-none"><code class="language-none">1号电池：D2号电池：C3号电池：A5号电池：AA7号电池：AAA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>一般而言，闹钟用的是5号电池，遥控器等等用的是7号电池。</p><p>我们看电池上的标签发现AAA便是7号电池的意思，也可以测量其直径。</p>]]></content>
      
      
      <categories>
          
          <category> Chase Cat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
            <tag> 电池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从国外博主看网络中的爱国</title>
      <link href="/2025/04/06/20250406/"/>
      <url>/2025/04/06/20250406/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ce6edc19e42bbad407dc3ec8db92e2301802806fca3b1e5e1fc5b705891acdd5">f842161a9e5a07c6aecdb110fb678cdd53f602b4eed381a9d45d4c3707fd6fd598413d4f81d64cd8af9c88d7640912da1fbc2a0a9a694b113efe44f5b8f01c2d4e956dfc1a3e5773bc30a798edaf166fd6d5f8bf0815d69fa98984aea05d83f29e28eeb1f728d8c1ed0fff831da2d87c34a9bc57bf4d45dbbd2099033f0be541e8b3b865fb12f2304a076074263da1d87217cb11907dc683b1f38a72694a9f3c38156206b25579097901cf35c52929dfeff8fdaf93817b1124f7b470cd9be4b2341ac47f0119e95d5b82aff967f1ba5ee4d5e2a6681bc52d7d556e05840768cef93bdab31b38331432d012e7ffa97e0b78b504acf7da22e1aae56f82f687d949ee445517e91ec782dfb4659db91b532dc1bf889043cc24947a2a1326ee32f237c21e621b9093eef79fa98ae375b7491a591fb4ebb6b58bc8026833d6a6b39edb6516de1fb186adfc7482aa3dcf1f2b149e2ba5b27c85716b7e97e264b1249a4fc09f2691c5192110e53f4f8de63c9422e8964ffa8a60a5955e3deb85d2c56978f53a5570bcc8f87ab4dd4fda690cbed7baafa0f1b30444ca8423ad556ad9ffbed58166504949cf58c995a9192db599252d1a0c6fb2b799ec813f5631efc54c2450a0f147e0756d8887473c8685eb9204b4b853325982e85bae051dbf70d487354c5bfef6af63e2851920928430369a9826971e4e3ac9d6dcc7269359129d990864bfd919c87822f52b876bcbaa13571830e1da397ac485af16afa315d30b6bb37ef74520a7eedf7be0725fdde4d05ca2bd960593a2ddade902505805954d8e5f556521be72b67eb1a45dd11ff91aef5fa6c2c7487fbaa672a63db2395a42345a7e420d548a87f3993251450cad7762b7ff31fba190d39af7f9da3278f56a6810a3ac0f918840c19341beb3eb31eeac9374a7f0d2221ea557d999362f1961864fcfa78aaceac45da885fe88401e39831b3edaeecf955ec22fbed456c936aed07b85b2a57e9d3e614f04c1ad7885eaf81143a1d319ec871e6132b9cd10c9333b604bd65284cd0dc07ad39340f4515776f921ad5351d5532eb82718564460b58ed24ba648a6c2bfc9b8aa2dab016857ccc2349be0e4ef582c2a7b3c51cc1df23658471d10043166eb251f9578028b408900164503ca2f5c0a5638249c47bcd16cc0df65f17b4e11d98b91c6653e782f123c34e5bac3725c16eccecede9f4da18c2c709cc27c66f96db5146135a3ea08142d014df648afa979c4d86c7863663e31a2a5f9f42844f4f0120df8138f8c2ddbd6ab29dbbe6f53ad3e7bd997669e9287429311670005568505b319f8b1d344067622c0b846d8aa4b8f1b79511ebb17d74a5f59dc080889348ea86b4887feba095ea45b80dd1b3b6b3b570add242ed32ec8c10e335a29aa72ff271c9d72cff68a4b6fe88505f5e20b1a097a473060bb0c48a76136b474f10be480d4fe99366370bf3efdf45459e769baa1ce0b459671546b9e84e5ac835065aadd87a46f078810e1a8ba3821ea110aed2dc3ccb9ab66bf2ac939228b706319f8772fc7c3e27a378801496534e5f35417c8cf52854dd6bc785c39767b5029424b33338a5ab89691e4c4b4663c963e5cb1200c98bfb6d6079bd1fe7a6887f60569ef8be172d92dccfc301d9a79cf89a53d0decc2a46e3aee7b4eb52592e49adaf5fcac8f94e8f87d97deb9456e9c1ae9f443cf82867568c902969ad11dee2e2e1f84f88f22c3e7e4f74f22d255b9473f70c6b58ca23a1a3c99d03398657c71c55dcfb12e1b7d32b32c26c0148895689474fa1c9038b1156d244e04aeba0a0482c5610e0ccaa891cbf2db0197d249848da785abb44870161f2f929dd93f8b969a0de9a343014c6acb725b81e707e10be6c9ca9c62094e5556a93b7187616c767e6a225dbf3e327b659304671caffff725bda5014600ac17541ad4c0983f9eba5e8eede7b4c38063dd6d2bd518118f20db94c6aa38738b857538a99c7845790516fe3c0d39a9a28e6b8a3c76058c187c8d47a1db723739a9ffbe3902de82e7f875d248bb02698f4c4f2d7e00ff6029c5736d64f5d87794c6a530eaf06c4b2a84a6f4c24bf779dd5428aefb940562138d58d9e1185b076e7ccea1a8fa5dd42a3da80e7bd18e74902fbbbb113d8831de2a08577894a4b6ca57b5c407901d108884fa36d0f3894018b94ca4c51ece13d9cf80e73486527a61f3be1ba23cbc8de51686e7b491034aef7276970b2ce2d58416dac3226a62c911bc62f94b122d32e7160e28431cdbf6bf34a6fe3d9eaf38f08f49b9c33fca6bead34c0d1bab82c531dacca9ec9c6866f6c10a3dce7138349acd6c88b49e2859dd80b97126a09e86ba989971293dd92dfc4c0d0167ccaa08cb5ae2c14310958ce378a68a8ad4c735d0c637607e177349643ccf076f60c6bac4855ce6ba2f611937327eb63211bd8ee00b592bdaef62006b16460a87f74c666f547f8f14dba07030c59f50fc9d65645f9e68102015ab87c9ff18a573661f35c3916ab8b2f13cbc7e1ede6c82624c8992a58d5cb18975d1024482e87283a15d4c1d8fcb459a3d4de1ec85380e47b0975fae59678a4c4b545673b68466182245b431d90ac8dc6d7ba66eb235a11eb181a7959f7439002144e885a771e5f9c7240e3bea050a0429c355db19dcbc33a476dac296582cf99b3bd40058e6763f7ba3ec3671ee8327aa69a896ec28224e794db0fe0b5ae16867827addb23775bebbc363063e4f904fb0b823b0f04ee5d007163d6ecbd5d10782435a28efc66752b87e9811b6f3a2a9a8627b83e5c9e2d9a7908c14df36a0237f2bcc677dd009c5ab819d64f337d0dc687eb978913ae4eb607072d7a8444b77afb70ce269dc3671a41d42ac0e825a2825f363851b2851f35aa15f6a31d00de15c8439742b8de5b45dee72cf0e894d8e3299b7a2d60f4a997fbf12f1129ff8f21c9fcb6599c59f819ac2ea346215cd12b9c20482b671a6ce66e4d4b860626e26278de1309037033cb449bb24bf399e684c8ebc78e573aa0b7c7cd2ef3cab1d49cd34fc2f4c7dcdfef952ed2c61bbfe73f41ef8273c3e02385de4703df51e4b9214eb928f12bf7a09ba32ca7419c1ace8ab758af699d50a33b0cc3ba94546d36c1c41985d6d3365110988302c5cbb628e1852b8e9df042b18fefb20f9f361d6aa18ccb3f4a6a3596e85daace051eb8250fe6a10ee6b0b6c02117b494bb75f96763c7e3b8cb027035f5a1ea36cc11de6b49387aaff37662b99f5e92298491eab97288d05bbbb0eee0a1a9dab0c0f8f831cff71ce9dc969a0391a6145eb0c91a2697f89fcfc041f6862378e4c0d8efdf20c27edf9d9202151624f6196ee09c5b4a8eb19fa0cb7e19f5f8da4e580c393c284359759b5dcdbfb03d0d2ddcc82b2e6c06a39185f9c8a3ab1cd7aba26eef1b267cbe1cd831d39aee8e52dca336fb17680f7b69502217af6ff52246e26873d8ec6e4bacdc74ee3b8c8e738aa63c055649e36507f7706e78ad79636c34f27c9c654b63b17afb4cf17ba846d95aabfc7b9acb7f1c6367b623166510403991a6096d6d8ab5b8f6b49b0aaf1e9f8294a9f6718ff7bb969deafabac02a073e3eed7a8e4187affe0433ab8796de7100f87f9b43ea17e4cb111fe654d7099a181b9bfd3f4fcbaf6eaf5112422b51f99f0a38f78100d7a0f0776d4a575744f6167865706e1042e45fb3fc815c6142695c22dc3a1658aadb7076dfa1beba49aa72b43cd080f52ad1c4345029640d1f5417fc9dae714505466d2ae579903e8cfdda4f69d7fbaee9bbf6c54958f993afa194736854ba0e471523c34ae9809aa9ab6b2a0e0aeae6fd40fc816c5bd478caa43d15a6434fc00d96698e1c1c5b34accfc24ae69f9897722b90e955b66fae239c3a389f82102a432c6711e931d722468741cae26092f009a60d10bd0d8a7fcad9f00b2dd8e866fa1c8240e329fb8a75694c8e024842e01514b1da5b6e7fb850daf6a45eea76b24fbe1061412d788a720d23aedcd8ab29436d79980df9147c7cf3530ae3e5d71fb6ff9bf4cf187adda024cd44f2a85bc2f2c106ac3a03b45a77323c45223b441b5bd352f3305922fb3b96b4b53c36d7375d809ccb2f0b05cbedced6629413913ced7dbb8f1eca454bc3de565f47cb04b44e8957dc9ea0445c7eedeff464a7b1d38ba2ad20f189c49780317db432a85bfdcce5b2860668406fe9025a645253678b2d49437d6629b7f4afdcf0dc78ab22b5cfb7842156d4c730826c3abcc70a8639ef450b02b37e8c9bf1f80517467289b2dafb9ccb1a055e4a24644b914fcd5066440cd877289e0ec74b186c60410c8edc51fa779a2b6486d54a9862645752e006c76ee16e29d72cf20021d4f5b609f184e5fb5364230ec85e0dbfeee79c4434f60c86b4d9f99babb01d25cfd5f45eff0411256a48557e0511b01b31a27cdd69e996533db2e0bd0156b7cd47b03621e8bca9bac5585f7a6a7a730257b699e860d160d4a7859e2efb537fc9a6fc01560ce173f8ade914fe23b3337f0346abb819f627456d44d5eda6acab3d3e1dd8ab0bf779284027ae3177ef3d6359a9e85aeba7d571f83724aea7d35fb2ee22f3c9577266b63ea2ebd911c3a61159447c89b68189323576b72f3e06763f0d1c0015c8db6e30ccf42e8574a09ce143702543caa415f9c0b086a2872136b0ffb575a1834ff151b10d979cbd073514bee64a3321a86953b31a5818b4c0df85ff34470d99b0077fd6adb1cbd8479840d178ed9e9b75cbe5149d02aa305a16316b26ffe66c280b9481a01a8dc669ebc620f55da0d13859ad7c5cbde71478e30325365077462048377807ef841b161aa79a908f54e71a209a87006ca76fb5efa290d6702ae2c877acb71ce367b06fac80456ee702944bfec56521517688d49943e911c53b708782dd37cbbed5282ab7d495720f15fa5078d1d42b6e141846affc07e376a785a604803eac1a49bd133f1483f41fc5a350f9dfcff360f6346837ccbac45827445c7527aa9faa3f0afd824a0ac6b3ad018b49d7e168693ef7919a7b8da043502cec4ea61386794ddefc7622a6afe25f2c8924764e44c6ed86aa4c8f83a5f55cff7c468aa060e990dcbf53efdf0d4cdc62599f0b4181817a650a66200dae72bd3e43d081eaac3361604d1cbdbd33d79a9e8a4134dca6998f1bb57265a7289237e5a28cf9860e8d7a33c5003d801142507b0dd116094464cae26d5463369fc0d85e3ed5e1df7d87ba14f2e0b04d00a47b2649f0a03056dfa15156058bb64ef20ba27c6a35f6ed941a95980ea595ae1240ca678d7c059d1e0300569b1f4e7c4030bbf39d5dd523164f7c32fec9d3a14e6c1047456f6b98cc60b585e4095338bbb0f69abdbbb1b987e832b61b0aab6e04b2c40272866035d70e6efd0d1fa80c76ef6e5d26a9958f787454e54dcc06141b63153392d47c9e6a71e03fbacf149a4a9a117a78cbaed9cc9f2c446b774c7616be8fcc13019e829dbaa004476135bf827b63546c8b348a43dff75d5c03ee450a3bee5b78a899cfdf1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码或者邮件联系.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 胡言乱语 </tag>
            
            <tag> 外国 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言中的路径问题</title>
      <link href="/2025/03/13/20250313/"/>
      <url>/2025/03/13/20250313/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：简单介绍了路径问题<span id="more"></span>，当然适用于很多地方。</p><p><strong>preface:参考链接： <a href="https://blog.csdn.net/csdndg/article/details/89708048">关于文件路径中&#x2F; \ &#x2F;&#x2F; \的使用以及绝对相对路径的问题_路径哪里加转义字符-CSDN博客</a>  |</strong></p><p>综下所述，文件路径中直接用正斜杠 <code>/</code>能兼容更多地方。反斜杠的特性是windows带来的。</p><p>&emsp;<strong>路径分为两种：绝对路径、相对路径</strong></p><p>绝对路径：就是E:\test\file\data。&#96;&#96;</p><p>在C语言中，<code>\\</code>代表<code>\</code> 故有</p><pre class="line-numbers language-none"><code class="language-none"> FILE *fp; fp &#x3D; fopen(&quot;C:\\Users\\Administrator.USER0160\\Desktop\\data.txt&quot;,&quot;r&quot;);  &#x2F;&#x2F; 路径名称要正确 FILE * fp;fp &#x3D; fopen(&quot;E:&#x2F;test&#x2F;file&#x2F;data&#x2F;d.txt&quot;,&quot;r&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相对路径<br>电脑硬盘E盘下，建文件夹“test”，”test”下建立子文件夹“file”，”file”下建子文件夹“data”, 电脑资源管理器显示目录 E:\test\file\data 当前路径 E:\test\file</p><p>相对路径 ，用正斜杠 &#x2F;</p><p>向上一级目录指向<br>，&#x2F; 表示当前路径，相当于E:\test\file<br>，， 表示当前路径的上一级路径，相当于E:\test<br>，，&#x2F;，，&#x2F; 表示当前路径上上一级路径，相当于E:</p><p>向下一级目录指向<br>.&#x2F;data 表示当前路径下一级路径，相当于E:\test\file\data<br>.&#x2F;data&#x2F;xxx 表示当前路径的下下一级路径，相当于 E:\test\file\data\xxx</p><p>，，&#x2F; 代表上一级目录</p><p>，，&#x2F;，，&#x2F; 代表上两级目录</p><p>&#x2F;，， 代表下级目录</p><p>&#x2F;，，&#x2F;，，代表下两级目录<br>（其实后面两个有点抽象了，毕竟我怎么知道下两级目录是哪个文件夹的打开？？）</p>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把主动提问当作常态</title>
      <link href="/2025/02/22/20250222/"/>
      <url>/2025/02/22/20250222/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="55d3d9748e7f04d2cd2bcc1a5fc7329a57708e5e27e063cf53c7eef2ffd4df65"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码或者邮件联系.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 勇气 </tag>
            
            <tag> 主动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS下的编码问题</title>
      <link href="/2025/02/14/20250214/"/>
      <url>/2025/02/14/20250214/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：本文主要介绍编码问题。<span id="more"></span></p><p><strong>preface:   参考文章：<a href="https://blog.csdn.net/no_say_you_know/article/details/121146469">VS2019 编码问题，如何完美改为UTF-8_vs utf-8-CSDN博客</a>  |  <a href="https://blog.csdn.net/no_say_you_know/article/details/126695461">探究Visual Studio中的乱码问题_visual studio 英文乱码-CSDN博客</a></strong></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>&emsp;关于字符的编码，有ANSI(也可以认为就是GBK，中国汉字用的编码)，ASCII（仅支持2^8个字符），utf-8（全球统一编码）。不懂的可自行查阅：<a href="https://www.bilibili.com/video/BV1BT421a7N6/?spm_id_from=333.1387.favlist.content.click">锟斤拷烫烫烫�ַ��ͨ？文字乱码频发 你该如何避免？带你探索乱码编码解码的前世今生_哔哩哔哩_bilibili</a>|  &emsp;</p><p>在VS中文版，默认的字符编码格式就是GBK，当我们通过特殊的方法改成通用的utf-8时，却发生了匪夷所思的一幕。</p><p>&#x2F;&#x2F;文件存储的编码格式是 utf-8。</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;windows.h&gt;int main() &#123;&#x2F;&#x2F; 设置控制台输出编码为 UTF-8SetConsoleOutputCP(65001);&#x2F;&#x2F;意思就是按照utf-8的密码表，解密得到输出。&#x2F;&#x2F; 输出 UTF-8 编码的字符串printf(&quot;完整汉字\n&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果却是匪夷所思的 乱码。为什么会这样？</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;int main() &#123;char m[] &#x3D; &#123; &quot;加咖啡&quot; &#125;;&#x2F;&#x2F;printf(&quot;%s&quot;, m);return 0;&#125; &#x2F;&#x2F;文件编码是 GBK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的程序运行的结果竟然是正常的？</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>VS插件<code>FileEncoding</code></p><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><h4 id="VS中的三个字符集概念："><a href="#VS中的三个字符集概念：" class="headerlink" title="VS中的三个字符集概念："></a>VS中的三个字符集概念：</h4><p><strong>1.源码字符集</strong></p><p>即源代码文本文件的字符集，NodePad++、记事本、VS Code这样类似的文本编辑器，可以打开源文件看一下你的字符集（文件编码）。</p><p>源代码文本文件是以二进制的形式存在硬盘里的，无论中文英文都一样，当你输入一个汉字后保存关闭，这个汉字就会按照你指定的字符集转换成二进制编码保存下去的，当你在以这个格式打开文件时候，就再按照你指定的字符集把二进制转回来。如果两次使用不同的字符集，也就会出现乱码了。<br><strong>2.执行字符集</strong></p><p>执行字符集决定了这行代码在编译器进行编译的时候，str存储的字节到底是什么，你可能会说源码字符集不是已经决定了这个”我”的二进制表示了么？没错，但是这个执行字符集就是让你在这里对它再解释一次。比如我源码字符集可能是UTF8的，但是我可以通过执行字符集来让最终str存储的是GBK的字节编码。<br><strong>3.解析字符集</strong></p><p>最终要还原显示这些二进制字节编码的时候，就需要用到它。比如通过<code>printf()</code>把前面的<code>str</code>显示到控制台时，这个<code>printf()</code>就会按照解析字符集来解析这些字节编码，找到指定字符显示出来。比如下面的控制台输出编码。</p><p>简而言之，对于执行字符集，Visual Studio默认根据系统的Locale来决定执行字符集，一般大家都是Windows中文系统，Locale是中国，那么就是GBK编码。对于解析字符集，如果没有手动更改的话，Visual Studio的标准输入输出(printf,cout)到命令行也是根据系统Locael决定的，也就是GBK。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>由此，我们可以知道<code>printf</code>中的汉字，实际上编译的时候用的是GBK方式，所以设定控制台输出为utf-8后 就无法正常显示了。</p><p>解决方法，一是添加下面的命令<code>#pragma execution_character_set(&quot;utf-8&quot;)</code>；二是在前面添加<code>u8</code>前缀；三是利用函数 <code>setlocale</code>函数，具体深层原因可自行询问AI。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;#pragma execution_character_set(&quot;utf-8&quot;)#include &lt;stdio.h&gt;#include &lt;windows.h&gt;int main() &#123;&#x2F;&#x2F; 设置控制台输出编码为 UTF-8SetConsoleOutputCP(65001);&#x2F;&#x2F; 输出 UTF-8 编码的字符串printf(u8&quot;完整汉字\n&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;windows.h&gt;#include &lt;locale.h&gt;int main() &#123;&#x2F;&#x2F; 设置控制台输出编码为 UTF-8SetConsoleOutputCP(65001);&#x2F;&#x2F;意思就是按照utf-8的密码表，解密得到输出。setlocale(LC_ALL, &quot;&quot;); &#x2F;&#x2F;此函数的意思就是设置各种环境为系统环境变量默认。&#x2F;&#x2F; 输出 UTF-8 编码的字符串printf(&quot;完整汉字\n&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&ensp;</p><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>char是一个字符，用的是ASCII码，那它为何能够储存中文呢？或者说，按道理在gbk的编码格式下，char根本无法正常使用才对啊。</p><p>实际上，gbk和utf-8都兼容 ASCII码，也就是说，假如0在ASCII码中编译为0000，那再gbk中也是0000。所以英文能正常使用。那中文嘞？</p><p>我们深刻理解编码、解码原理。<code>加咖啡</code>，占6字节，假设再gbk编码下为000….，那么char的作用，就是储存一个字节而已。然后，系统按照gbk的表，解码，从而正常显示。</p><p>所以，当我们把汉字、英文看作 一串二进制的数时，一切便合理起来。</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;int main() &#123;char m[] &#x3D; &#123; &quot;加咖啡&quot; &#125;;&#x2F;&#x2F;printf(&quot;%s&quot;, m);return 0;&#125; &#x2F;&#x2F;文件编码是 GBK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有，tchar，wchar_t，LPCSTR(long, *p, const, string)。</p>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>steam——从入门到精通</title>
      <link href="/2024/12/18/20241218/"/>
      <url>/2024/12/18/20241218/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：有关steam的使用。<span id="more"></span></p><p><strong>preface: 因为突然发现自己对steam了解的也是很少，于是专门找时间研究了一下。</strong></p><h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><p>&emsp; 打开浏览器，搜索：steam download，下面的网址即为正确，要注意辨别。一般用bing搜索比较靠谱（别用百度什么的）。<a href="https://store.steampowered.com/">https://store.steampowered.com/</a></p><p>下载完后，自己点击安装即可，可以安到D盘。</p><h2 id="注册与登录"><a href="#注册与登录" class="headerlink" title="注册与登录"></a>注册与登录</h2><p>这里仅介绍国区（外区有风险，比较麻烦，区别在于价格没必要（毕竟实在不行直接盗版，日后再研究一下搭建服务器、内网穿透等）</p><p><strong>国区</strong></p><p>不挂加速器，打开steam，输入邮箱（这里推荐使用微软邮箱，国内即可注册，非常方便，相比qq据说更安全）然后通过验证后，你的邮箱会收到验证地址。这时，用浏览器搜outlook，登录你的邮箱，挂上加速器（我测试时用的是steam++，用其他可能不行），点击链接加载成功后即可返回steam。</p><p>这时候要求输入账户、密码。这里的账户密码都需记录（你登录不是用邮箱）。建议密码搞复杂，账户名称唯一且不可修改，大号的话要想个号账户名。然后登录就可以了（挂加速器登录</p><p><strong>转港区（一般是为了-加入家庭-共享游戏</strong></p><p>首先注册小号</p><p><strong>1.不共享给国区大号</strong> 找到一个便宜（3r的）的游戏加入购物车，查看购物车，右边有个中国（￥），可改成香港（要开加速器的香港节点，我用的是外星人加速器），然后跳转至支付。一定要付完钱。（这个小号也不用绑定steam令牌。所以不要投入过多钱</p><p><strong>2.共享给国区大号</strong> 因为steam账号不花到5$就一直是等级0（见steam等级以及家庭、组）所以这里直接找到一个想入手的游戏如wallpaper，等等。按照方式1同样的操作修改并支付，凑够升级所需的5$。这样避免了买那个3r的垃圾游戏。</p><p>因为港区游戏一般定价高、折扣小，为高价区，而且港币和人民币有汇率，所以港区买游戏一般都很贵，甚至翻倍。转港区一般为突破锁国区，非必要不建议搞，当个小号玩玩即可。</p><h2 id="基本设置与美化"><a href="#基本设置与美化" class="headerlink" title="基本设置与美化"></a>基本设置与美化</h2><p>点击右上角的管理账户，编辑个人资料-设置个人资料。</p><p>可以改下昵称、头像等等（关于个人资料背景等涉及到steam点数，见后面）。隐私设置修改。（大号可以对好友或者直接开放。小号为了安全还是全对好友吧。）</p><p>后面就是左上角-steam图标-设置。这里自己看着改就行，大部分不用。</p><p>添加好友，直接点上方的好友-添加好友。输入对方的好友代码，发送等待即可。注意，steam用户等级为0是加不了的，只能通过下面的快速邀请</p><h2 id="加速器"><a href="#加速器" class="headerlink" title="加速器"></a>加速器</h2><p>加速器与代理并不同，目前本人亦不太了解，所以不作解释。</p><p>目前有steam++，外星人加速器，UU加速器，雷神加速器等等。加速器一般用于加速steam界面，和需要联机的游戏。steam++可以加速网页端steam，无法加速游戏。UU加速器免费加速steam（但效果并不好，加速游戏或者更好的要付费。外星人加速器均免费，网页端不可。在手机上，UU和外星人加速器可用。（注：现在免费加速器又变了，但是一般而言加速器都能够免费加速steam商店，对于联机游戏无法成功的，比如双人成行，那么就得考虑下是不是得挂对应的加速器了</p><p>除此之外付费比如：雷神加速器等等。</p><p>下载教程：直接搜索即可，注意辨别官网。对于steam++（现名Watt Toolkit）可以到官网上下，或者上github上下各种以往版本（githb点右端的release，然后点Assets里的适配你电脑的即可，一般是win_x64）。</p><p>附直达链接<a href="https://www.et001.com/">外星人加速器 - 探索游戏宇宙一切可能【官方网站】</a></p><p><a href="https://steampp.net/">瓦特工具箱(Steam++官网) - Watt Toolkit</a></p><p><a href="https://github.com/BeyondDimension/SteamTools">BeyondDimension&#x2F;SteamTools: 🛠「Watt Toolkit」是一个开源跨平台的多功能 Steam 工具箱。</a></p><h2 id="steam等级与点数"><a href="#steam等级与点数" class="headerlink" title="steam等级与点数"></a>steam等级与点数</h2><p>刚注册的账号steam等级为0。只有当花费5$及以上时，会开通steam等级提升。这时你应该会提升为等级1。</p><p>等级的提升主要来源于徽章合成所带来的经验值。其他的途径为steam不定时是活动如年度回顾，特卖等（不用管，比较少）。</p><p>徽章合成：通过收集一套卡牌合成，卡牌通过游玩付费购买的游戏掉落（依据游玩时间），或者在市场上购买。所以，想要合成徽章，先买游戏，然后玩一会收集到几张卡牌，之后花钱在市场上买缺的卡牌（不玩直接买也可，或者找好友交换卡牌）。一般到steam钱包充值个30r，买卡牌升级就能到steam等级15左右了。注意，一个游戏的勋章最大等级为5级，不要买多了卡牌，除此之外还有没大用的闪卡（感兴趣自行了解）。</p><p>steam等级用处：0级限制好友添加、评论等等。之后升级添加好友位、展柜等等。</p><p>steam点数：在steam上消费所得，不可交易。可用于打赏（想必正常人不会这样）、购置贴纸、背景等用于个人资料、聊天。具体可见商店-点数商店。个人建议想买可以等秋促、冬促，这个时候一般会有特别的好看的个人资料套装（点击精选主页，有个如2024年秋季特卖 物品，直接购买个人游戏资料捆绑包）这里面很多品味奇特的定价都很不合理，建议思量、探索谨慎后决定。——据说steam点数可以在淘宝等购买，以打赏方式。（其实正常买游戏的点数都够，买的话可能有风险，用处不大</p><h2 id="家庭与组"><a href="#家庭与组" class="headerlink" title="家庭与组"></a>家庭与组</h2><p>组相当于群聊。家庭是白嫖党必备，其政策变化很大，具体可自行研究。家庭共享最多6人，免费游戏不共享，部分游戏不共享（如wallpaper，双人成行），大部分游戏支持共享游玩（不知道现在能不能多人同时游玩同一部游戏，还没试过。需要注意的是，加入家庭共享请谨慎，因为只能加一个，而且退出后1年不能再加了（包括自己创建）。可以用小号搞搞</p><h2 id="steam安全"><a href="#steam安全" class="headerlink" title="steam安全"></a>steam安全</h2><p>非常重要！！！请记住以下，否则将面临盗号、封号风险</p><ul><li>社区和评论区看到的一些链接和部分言论，不要点赞等等。</li><li>对于大号，绑定手机令牌。具体教程可在B站或者steam官方自寻</li><li>不要去网吧</li><li>wallpaper一些壁纸不要订阅（其是带有病毒的应用程序，具体b站可搜。建议订阅壁纸看其作者的可行度等等（有些作者b站有号</li><li>慎言，防止被恶心人举报封号</li><li>不要留存steam钱包余额，盗号的人就是要你的钱。</li><li>定时改改密码，复杂度要高，密码不要随便的保存到网页。</li><li>不贪小便宜，买到假入库然后封号。（便宜不了多少，想便宜直接盗版，或者白嫖单机游戏大法后面会讲）</li><li>当然前面提到的，用outlook邮箱，别用国内的qq</li><li>别乱加好友，一定要注意，还要防止好友的号被盗。</li><li>以上针对大号，小号之类的只要和大号无关联，影响不大（设备也不能一样，还是老实点好</li></ul><h2 id="常见术语"><a href="#常见术语" class="headerlink" title="常见术语"></a>常见术语</h2><p>每一个圈子都喜欢搞一套自己的行业黑话，学科也是。</p><h3 id="红信黄信"><a href="#红信黄信" class="headerlink" title="红信黄信"></a>红信黄信</h3><p>就是steam客服给你发的警告类通知，涉及封号、惩罚之类</p><h3 id="锁国区"><a href="#锁国区" class="headerlink" title="锁国区"></a>锁国区</h3><p>就是在国内一些游戏是无法搜到的</p><h3 id="倒余额"><a href="#倒余额" class="headerlink" title="倒余额"></a>倒余额</h3><p>简单来说就是，到第三方平台低价购入卡牌，然后在steam市场高价卖出。这样steam钱包余额就会盈利，用于相对低价买游戏（就是实际充值30r，通过上述操作使得steam钱包余额变多了）。比较麻烦，耗时耗力。不建议因为一些小钱浪费生命。</p><p><a href="https://www.bilibili.com/video/BV18q4y1P738/?spm_id_from=333.999.0.0&vd_source=b7320a11239509eb1a422f34c9f477a3">【Steam入坑指南】挂刀教程、窗口化、成就解锁工具| 帐号安全与伪正版</a></p><h3 id="假入库"><a href="#假入库" class="headerlink" title="假入库"></a>假入库</h3><p>淘宝等平台，购买sdk激活码礼物等，会出现的一些骗局。或者其他。风险大，有封号可能。建议：别贪这点小便宜。史低又不是等不起。</p><p><a href="https://www.bilibili.com/video/BV1fb411K7vT/?spm_id_from=333.337.search-card.all.click&vd_source=b7320a11239509eb1a422f34c9f477a3">steam淘宝国区礼物代购的真相和导致steam封号的原因_哔哩哔哩_bilibili</a></p><h3 id="钱包充值码（即充值卡"><a href="#钱包充值码（即充值卡" class="headerlink" title="钱包充值码（即充值卡"></a>钱包充值码（即充值卡</h3><p>会产生差价，从而实现低价买游戏。但是，你买的充值卡来源很可能不是正规的。淘宝上卖的充值卡来源有的不明、或者是其他方式优惠得来。总之，没大必要涉及过深。里面存在黑卡等风险。</p><p><a href="https://www.bilibili.com/video/BV1cS4y1n79q/?spm_id_from=333.337.search-card.all.click&vd_source=b7320a11239509eb1a422f34c9f477a3">1块钱领200元Steam充值卡，真相竟是给无良商家打工？【雪鸡观察局109】_哔哩哔哩_bilibili</a></p><p>[<a href="https://www.bilibili.com/video/BV1sx411R7wA/?spm_id_from=333.337.search-card.all.click&vd_source=b7320a11239509eb1a422f34c9f477a3">王大薯]真相！关于Steam低价充值卡和游戏代购 我能告诉你的一切_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1fE411P764/?spm_id_from=333.788.comment.all.click&vd_source=b7320a11239509eb1a422f34c9f477a3">【Steam百科】从货源到流程，详解淘宝6折充值卡_哔哩哔哩_bilibili</a></p><p>总结：于购买者而言，就是贪小便宜（所谓的薅羊毛）罢了</p><h2 id="游戏补丁"><a href="#游戏补丁" class="headerlink" title="游戏补丁"></a>游戏补丁</h2><p>一般是指一些模组、中文补丁、人物优化补丁等等。有些游戏会开放创意工坊（基本全英文，很难懂，有些可能有病毒），还有些需要到对应的地方自行下载。对于普通玩家，直接上b站或者可信来源搜教程就行了。订阅的模组，一般也看看别人的推荐。（不是相关业内人士，对模组什么的其实不懂，日后有时间会去研究模组与补丁具体是啥玩意）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>弄懂这些，你已经是一个合格的stem玩家了（超过了全国99%的大学生）。作为普通玩家，只需要守好自己的账号，别贪那点小便宜（真不如多学点东西，感觉学不完，如我上面提到的做模组补丁）即可。</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剖析生活中的纸</title>
      <link href="/2024/11/24/20241124/"/>
      <url>/2024/11/24/20241124/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：常见不同纸张的分类。<span id="more"></span></p><p><strong>preface:花点时间彻底了解一下纸。</strong></p><p><img src="/2024/11/24/20241124/1.jpg"></p><h4 id="普通打印纸"><a href="#普通打印纸" class="headerlink" title="普通打印纸"></a><strong>普通打印纸</strong></h4><p>经常打印东西的同学应该十分熟悉了，可惜在小地方，大部分人连这样的东西都要被收以巨额费用。其厚度较日常用的草稿纸较厚，大约是0.104mm（国际规定，实际不知道了）。按照大小，分A3（8k），A4（16k即16开），A5（32k），A6（64k）……  就作这么多了解是了。</p><h4 id="复写纸"><a href="#复写纸" class="headerlink" title="复写纸"></a>复写纸</h4><p>有蛮多类型的，我目前见过的就是工厂等里会用的蓝印纸。想必大家应该也见过：就说你手写了一份，下面那张纸就有蓝色的印痕（可能不准确，应该这方面的资料几乎没有正规来源，只有国内的laji百度，如果是找国外的，奈何现在英文基本不愿意学了。日后再补充）</p><h4 id="卫生纸"><a href="#卫生纸" class="headerlink" title="卫生纸"></a>卫生纸</h4><p>其实就是厕纸，专门用来如厕用的！虽然但是，很多人都分不清，用它来擦拭面部，鼻涕等等。据要求，还是不能用卫生纸，应该其对安全性的要求并不高（虽然便宜就是了）。卫生纸则一般不允许具有湿韧性，以防止在使用后纸张不易分解而堵塞卫生化粪池。就是说，卫生纸吸水性不强，吸水后就会破碎化了。——这种纸一般就是圆柱状，想必不用多讲。</p><h4 id="面巾纸"><a href="#面巾纸" class="headerlink" title="面巾纸"></a>面巾纸</h4><p>面巾纸一般具有湿韧强度（一种代表纸张在完全润湿状态下的韧性指标），这也不用多说了罢。</p><h4 id="厨房用纸"><a href="#厨房用纸" class="headerlink" title="厨房用纸"></a>厨房用纸</h4><p>这种没用过。据介绍是吸油性比较好。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><strong>1、包装用纸</strong></p><p>牛皮纸、板纸、防油、防潮纸、商标、标签纸、卡纸、其他包装用纸、瓦楞原纸、纸袋纸、杯纸</p><p><strong>2、生活用纸</strong></p><p>卫生纸、卫生巾、纸巾、湿巾、其他生活用纸</p><p><strong>3、文化、印刷用纸</strong></p><p>艺术纸、铜版纸、其他文化、印刷用纸、新闻纸、胶版纸、书刊纸、字典纸、水印纸</p><p><strong>4、办公用纸</strong></p><p>打印、复印纸、书写纸、其他办公用纸、复写纸、描图、绘图纸、收银纸、彩喷纸、传真纸</p>]]></content>
      
      
      <categories>
          
          <category> Chase Cat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
            <tag> 纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅的舀起蜂蜜</title>
      <link href="/2024/11/23/20241123/"/>
      <url>/2024/11/23/20241123/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：舀起蜂蜜的小技巧。<span id="more"></span></p><p><strong>preface:有幸听说过蜂蜜的小伙伴或许不知道，但有幸正打算尝试一杯蜂蜜兑水的（我们还是把它称为蜂蜜水罢，似乎也没查到官方的称谓）小伙伴一定知道，想要优雅的用勺子舀起蜂蜜并不是一件很容易的事。结果常常是要擦拭桌面或者舔舐杯子壁缘。于是乎，便有了本次的探讨。</strong></p><h2 id="品尝蜂蜜那些事"><a href="#品尝蜂蜜那些事" class="headerlink" title="品尝蜂蜜那些事"></a>品尝蜂蜜那些事</h2><p>&emsp;具体现象一般如下图</p><p><img src="/2024/11/23/20241123/1.jpg"></p><p>在舀起蜂蜜时，总是会出现黏连现象，蜂蜜久久的在勺子底部，拉成细细的丝缓慢滴落，就像藕断丝连一样，就就不能断绝。下面直接介绍方面。</p><ul><li>等待其自然滴落：十分的漫长，扰乱心情（等不急la</li><li>舀前用热水浸泡几秒勺子（注意，要是铁勺），加热之后舀起，这时会发现蜂蜜会很快的滴落，没有长丝下落。原理暂不知，本人亲测有效。</li><li>如下图：一般我们是移动勺子，但这样总会有些许落在桌上，我们直接移动杯子就行了。<img src="/2024/11/23/20241123/2.jpg"></li><li>使用两个勺子，相信这就不用多讲啦</li></ul><p>&ensp;&emsp; 下面来谈谈其他的。</p><p>关于勺子，有人称不能用金属制勺子，而要用木制或者蜂蜜棒舀蜂蜜。这点经过查阅，认为：无所谓，金属勺子亦可以使用，嫌麻烦直接用就完事。毕竟勺子太多看着也烦。</p><p>关于水温：确实不建议用开水（7、80℃上），原因为破坏维生素和一些抗氧化物质。但更为致命的是，用开水喝太烫了，而且不甜，有损口感。</p><p>总而言之，没有必要担心什么营养流失什么的，开心就好。你每周多喝几次蜂蜜不就全补回来了？哪在乎这点流失？（况且还要算上转化效率） 关于如何优雅的舀起蜂蜜就说这么多了。</p><p>plus：蜂蜜兑热牛奶也很好喝（甜甜</p><p><img src="/2024/11/23/20241123/3.jpeg"></p><p><strong>——11.23</strong></p>]]></content>
      
      
      <categories>
          
          <category> Chase Cat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 探讨 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 蜂蜜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当今的优秀——跨越阶级的代名</title>
      <link href="/2024/11/14/20241114/"/>
      <url>/2024/11/14/20241114/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ea751c9093ea8913d8bd6b255a5e4766f2a11a796f4133f57a8f954f93a30ec7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码或者邮件联系.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 胡言乱语 </tag>
            
            <tag> 阶级 </tag>
            
            <tag> 人性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔是怎样炼成的</title>
      <link href="/2024/11/10/20241110/"/>
      <url>/2024/11/10/20241110/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：有关笔、笔芯分类等。<span id="more"></span></p><p><strong>preface: 笔，从小到大一直在用，却鲜有人能够分清、了解一点东西。</strong></p><h2 id="笔、笔芯等的分类"><a href="#笔、笔芯等的分类" class="headerlink" title="笔、笔芯等的分类"></a>笔、笔芯等的分类</h2><ol><li><p><strong>毛 笔</strong></p><p><strong><img src="https://image.maigoo.com/upload/images/20180128/23040991114_400x180.png" alt="毛笔"></strong></p><p>当今用毛笔的人已经很少见了，这里也不做过多的简析。</p></li><li><p><strong>铅 笔</strong></p><p><strong><img src="https://image.maigoo.com/upload/images/20190909/09585065768_400x180.png" alt="铅笔"></strong></p><p>小学里面一般都是用这种木制的铅笔，有一定的安全因素考虑。之后都是使用自动铅笔了（除制图等）</p><p>自动铅笔分粗细，一般分0.5mm，0.7mm，这也就决定了笔迹的粗细。</p><p>按笔芯分类一般有HB，2B。</p><p>H：Hardness（硬度），B：Blackness（黑度）。石墨含量越高，铅笔芯越软，颜色越深；粘土含量越高，铅笔芯越硬，颜色越浅。按照国家标准GB&#x2F;T 26704，铅笔笔芯一共有17种，分别是：6B、5B、4B、3B、2B、B、HB、F、H、2H、3H、4H、5H、6H、7H、8H、9H。</p><p>所以显而易见，2B相较HB，更软（也就是更容易断，不耐磨），颜色深。填涂答题卡用2B而不用HB，就是因为2B的黑色深度更高（具体可自行搜索。</p></li><li><p><strong>钢 笔</strong></p><p><strong><img src="https://image.maigoo.com/upload/images/20160916/10254429186_400x180.png" alt="钢笔"></strong></p><p>目前也鲜少见过有人使用。也不做过多分析，感兴趣可自行搜索。</p></li><li><p><strong>圆 珠 笔</strong></p><p><strong><img src="https://image.maigoo.com/upload/images/20160916/10370622749_400x180.png" alt="圆珠笔"></strong></p><p><strong><img src="https://image.maigoo.com/upload/images/20160916/10425585011_400x180.png" alt="中性笔"></strong></p><p>市场主流的一类笔。按油墨的性质，可以分为以下几类：</p><ol><li>油性圆珠笔：<ul><li>使用油性墨水，这种墨水主要由油性溶剂（如石蜡油、环己烷等）和颜料组成。油性圆珠笔的墨水流动性较好，书写顺滑，但墨水干燥速度相对较慢，且不易擦除。</li></ul></li><li>水性圆珠笔（也称为宝珠笔或走珠笔）：<ul><li>使用水性墨水，这种墨水主要由水和颜料组成，可能含有少量的溶剂。水性圆珠笔的墨水流动性好，颜色较淡，书写感觉清爽，干燥速度较快，且墨水容易擦除。</li></ul></li><li>中性圆珠笔（中性笔）：<ul><li>使用中性墨水，这种墨水的粘度介于油性和水性墨水之间。中性笔墨水的流动性和颜色饱和度都比较好，书写顺滑，干燥速度适中，且墨水不易渗透纸张。</li></ul></li></ol></li><li><p><strong>勾 线 笔（记号笔）</strong></p><p><strong><img src="https://image.maigoo.com/upload/images/20160916/10461713730_400x180.png" alt="勾线笔"></strong></p><p>可以书写在很多材质上，比如金属、光滑的木材表面、玻璃等等。</p></li><li><p><strong>蜡 笔</strong></p></li><li><p><strong>荧 光 笔</strong></p><p>透明的，一般用来标记，相当于给文字加底色</p></li><li><p><strong>水 彩 笔</strong></p></li><li><p><strong>白 板 笔</strong></p><p><strong><img src="https://image.maigoo.com/upload/images/20160916/14302092446_400x180.png" alt="白板笔"></strong></p><p><strong>一些学校里面可能还存在白板，用在这上面。容易被擦除。</strong></p></li><li><p><strong>签 字 笔</strong></p><p>可以认为就是圆珠笔。</p></li><li><p><strong>翻页笔</strong></p><p>用于方便展示ppt</p></li><li><p><strong>粉笔</strong></p></li><li><p><strong>银行柜台签字笔</strong></p><p>根本上可以认为是圆珠笔，只不过绑了线，防止你拿走。</p></li></ol><h2 id="笔写字的原理"><a href="#笔写字的原理" class="headerlink" title="笔写字的原理"></a>笔写字的原理</h2><p>这里介绍两种常见的，圆珠笔和钢笔，其他的无非就是摩擦力（粉笔、蜡笔）等等，或者类似于染色（水彩笔）比较容易理解</p><p>&emsp; 钢笔的工作原理主要依靠两个物理现象：重力和毛细作用。重力使墨水从储墨槽流向笔舌和笔尖，而毛细作用使墨水在笔尖中形成一个连续而稳定的液柱1。钢笔中间的缝实现了重力与墨水表面张力的平衡，使墨水可控地流出。当用力写字时，缝会张开，表面张力变小，墨水流出，写的字越粗。</p><p>&emsp; 圆珠笔书写工作原理：主要是利用球珠在书写时与纸面直接接触产生摩擦力，使球珠在球座内滚动，利用重力带出笔芯内的油墨或墨水，使圆珠笔油墨或墨水下渗到笔头，通过笔头球珠滚动形成图形文字。 后续油墨或墨水在大气压的作用下，不停地补充过来，以达到书写的目的。 早期的大多数球珠笔芯在靠近尾部的地方，都会钻一个小孔以保证空气流通。 圆珠笔球珠直径的大小，决定了字迹线条的粗细。</p><h2 id="那种形状利于笔墨流动？"><a href="#那种形状利于笔墨流动？" class="headerlink" title="那种形状利于笔墨流动？"></a>那种形状利于笔墨流动？</h2><p>突然发现买的直液式走珠笔笔芯，其为正立圆台式结构（顶部窄、底部宽），于是突然想，哪种结构利于水性油墨的流动呢？有圆柱形，倒立圆台形，正立圆台形。</p><p>于是这里便认为是正立圆台性更利于油墨流出了。因为大雾实在没学，所以也就直接问了gpt了。</p><p>从流体力学的角度，正立圆台形（顶部窄、底部宽）能够通过以下几方面促进水性油墨的流动：</p><ul><li>重力驱动下的压力梯度形成漏斗式流动路径，减少流动障碍。</li><li>底部大半径设计提高了流动稳定性，使流速平稳。</li><li>面积逐渐增大的结构降低了粘性阻力，确保油墨供给流畅。</li></ul><h2 id="笔芯探究"><a href="#笔芯探究" class="headerlink" title="笔芯探究"></a>笔芯探究</h2><p>笔芯，由一种塑料（应该）和里面的墨水组成，外面加上一个金属头和滚珠</p><h2 id="墨水组成（以中性笔的墨水为例）"><a href="#墨水组成（以中性笔的墨水为例）" class="headerlink" title="墨水组成（以中性笔的墨水为例）"></a>墨水组成（以中性笔的墨水为例）</h2><p>这里只介绍笔芯最上面附带的白色、黄色的透明液体。</p><p>随动密封剂（ink follower）：墨水的塞子。随动密封剂可以阻止墨水向后流动，还有一定防冲击作用，它可以让中性笔无论立着放、躺着放还是掉在地上时都不会漏墨。同时，它还能防止墨水中的水分蒸发它非常粘稠，但又可以在墨水使用减少时跟随墨水向前流动——这也就是“随动”的意思。这样可以避免密封的部分形成负压，影响正常使用。</p><p><strong>参考：</strong><a href="https://www.mrsilicone.co.in/2022/01/15/ink-follower-and-its-use-in-water-base-ballpoint-pen/">墨水跟随器及其在水基圆珠笔中的应用</a></p><h2 id="中性笔各种头区别"><a href="#中性笔各种头区别" class="headerlink" title="中性笔各种头区别"></a>中性笔各种头区别</h2><p>这些都是常见的笔头类型，每种笔头都有各自的特点和适用场景。以下是它们的简单介绍及优缺点：</p><ol><li><p><strong>子弹头</strong>  </p><ul><li><strong>特点</strong>：笔尖圆润，通常用于签字笔或圆珠笔。</li><li><strong>优点</strong>：出墨均匀，书写流畅，适合书写大字或快速书写，因笔头圆滑不易划伤纸张。</li><li><strong>缺点</strong>：对于细节要求较高的绘画或写小字时，精准度可能不足。</li></ul></li><li><p><strong>葫芦头</strong>  </p><ul><li><strong>特点</strong>：笔尖呈小葫芦形，类似子弹头但笔尖略微细化。</li><li><strong>优点</strong>：可以兼顾子弹头的顺滑性和一定的细腻度，适合细致书写，特别是硬笔书法中常用。</li><li><strong>缺点</strong>：相对子弹头易磨损，且可能不适合书写特别细小的字。</li></ul></li><li><p><strong>CS尖（Capillary Stylus）</strong>  </p><ul><li><strong>特点</strong>：主要用于绘图和高精度书写，墨水通过毛细管作用流出。</li><li><strong>优点</strong>：出墨稳定，适合精细绘图、标注和较小字体的书写。</li><li><strong>缺点</strong>：结构相对复杂，价格较高，出墨速度较慢，不适合快速书写。</li></ul></li><li><p><strong>全针管</strong>  </p><ul><li><strong>特点</strong>：笔尖类似于细针，适合精细描绘。</li><li><strong>优点</strong>：精准度高，适合细致的线条绘画或小字体书写，可以控制线条粗细。</li><li><strong>缺点</strong>：尖细的笔头容易损坏或断裂，长时间书写时可能感到疲劳，尤其在粗糙的纸面上使用时，笔头更易损伤。</li></ul></li><li><p><strong>半针管</strong>  </p><ul><li><strong>特点</strong>：介于全针管与子弹头之间，笔头较短而粗壮，带有一点针状设计。</li><li><strong>优点</strong>：比全针管更耐用，但依然能实现一定的细腻度，适合书写和标记。</li><li><strong>缺点</strong>：细节精度稍逊全针管，灵活性不如子弹头。</li></ul></li></ol><p><strong>总结</strong>：  </p><ul><li><strong>书写</strong>：子弹头和葫芦头适合日常书写和快速书写。</li><li><strong>精细描绘或绘图</strong>：全针管和CS尖更适合精细的绘画和标注。</li><li><strong>兼顾耐用和精细</strong>：半针管适合希望兼具耐用性和一定精细度的使用者。</li></ul><p>根据具体的使用需求选择合适的笔头类型，可以提升书写或绘画体验。</p><p>&emsp; 这里因为实在难以找到权威的资料、测评，<em><strong>于是就问了下gpt</strong></em>，具体情况到底如何，可以自己感兴趣分别购置多种笔芯，分别测评。我个人一般不用子弹头，因为很多垃圾货，中性笔也几乎不用，好的笔芯太难找了，推荐使用直液式走珠笔，不会出现断墨等搞心态现象（高中几乎三年都饱受垃圾笔芯的气）</p><h2 id="笔壳的组成"><a href="#笔壳的组成" class="headerlink" title="笔壳的组成"></a>笔壳的组成</h2><p><em>由于合适的资料实在难以找到，不知道是不是因为国内网络环境的原因，搜来搜去，要么是知乎，要么是百度知道，贴吧什么的。根本找不到权威信息，只有下面这张来源不明的图。</em></p><p>{<img src="/2024/11/10/20241110/2.webp"></p><p>&emsp; 关于笔，就说这么多罢，虽然并不是很深入权威，但还是可以吹嘘一下的。</p><p><img src="/2024/11/10/20241110/1.jpg"></p><p>——11.10</p>]]></content>
      
      
      <categories>
          
          <category> Chase Cat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
            <tag> 笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利益关系决定立场</title>
      <link href="/2024/11/09/20241109/"/>
      <url>/2024/11/09/20241109/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3705ba6e12a101e0c1800f4c64c6129bbfed645667c4dd3d81195890952e3e3b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码或者邮件联系.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 胡言乱语 </tag>
            
            <tag> 关系与利益 </tag>
            
            <tag> 立场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>讨论不是辩论——讨论应该是怎样的？</title>
      <link href="/2024/11/04/20241104/"/>
      <url>/2024/11/04/20241104/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="48d6f189c287c06f0738922ff6a99aac9e8a69284c3eec10d916f9ab57721183">f842161a9e5a07c6aecdb110fb678cdd53f602b4eed381a9d45d4c3707fd6fd598413d4f81d64cd8af9c88d7640912da1fbc2a0a9a694b113efe44f5b8f01c2d4e956dfc1a3e5773bc30a798edaf166fd6d5f8bf0815d69fa98984aea05d83f29e28eeb1f728d8c1ed0fff831da2d87c34a9bc57bf4d45dbbd2099033f0be541e8b3b865fb12f2304a076074263da1d87217cb11907dc683b1f38a72694a9f3c38156206b25579097901cf35c52929dfeff8fdaf93817b1124f7b470cd9be4b2341ac47f0119e95d5b82aff967f1ba5ee4d5e2a6681bc52d7d556e05840768cee0e6a4e9230f3397fe305d11f65b24d97938495eba6eca78981d191bcfedce7ea336455858eab46d239d31c1da5e9e5a0a6ce9c21a2b247281d830f5749f9655760af1be7aa3be5abec5fdd2d1c13673337e0e68db5426f3806132c6d731ea8350969cba95f6e765181d39bd586c54a4abc42c77c1b95f039efe1fe96f135e49beb08a33aab90123241440f8ce096043dd64cff134741671dd039215b215c141697148d9a53aaad90f627acd0a92dff61e8edbcc5fd0a2d6bd5f5bf8e34c80e1dc98c3e0fbe3ae78550f4c98a6665e5c8312956c426f2383db92d585df052fa8710d414bd1be8e1b943fef2fb57f7221c430a40a053c17969c15cf474a3a8f76c5022b54c579e142192ea1c0f1e9aca2749e592a1b6b87216198deb667c724830e68c4aa8fbb51983f3173657e1c0fa6d1be74fd25ebb323f726cc89866379733ffe65920867caab9bcdc7ac0d45db10109bef2bc55cb99f063a884704a2ffba18d8ed550ceb49f86c84eb2beb3cfc8874aca1e3ecf6a6d0a4ece74ae7857f2306bbd99acf2e71c30f5566d5dbc2fcfde60063fa85f67eedd64d847b30251fa420eb356e23f2f7c2943ede966cc54bc5b6f9eae8fd8e1744f0d5d1f615c32739915efa3e5c92ae8ee95075b77b46b2cb7f1f3f5b9db0061cd71eca8f7f40b97e59c5ff973cc3b56ae947ab15c65abb12dee298ed597778e8ab4088667852a73cad9b7d505d3f88a728be05864691e77379a512d9d995b414bac0f6749e155f902fa4bdcc343f62787bb68c763e24b3112543b725d86fcd2951022ed20742ee25a19100223a9276818752ea388e8ac81480ba406c9b1dfca3e2513521319d05f21b33b44693102fc9afd06fa9513b2311823f03c20db0fdc3085c57c7d1abfada9ee3f2af82d8055b79832d7ca9aef20b5be67389a62e1170c70fe8a0e546d160244316af07901291b7c20b777e10423a7d4d728bba891689746d63cf2d6c1d23a9ff840065b3908739679382b22d78fdac87649b5512e51f7fcd0e0f8358470c499e6e7c41aac10309b4813f1ca83c3a778a1cbfc0ff7741d8988bd527aa00fe548ff1dc6bcd6cfe6eb0035964a46a9aeb24a72ccabe280783aea5fdbd237c3aeb23f463079127fa7663a6e8e463128fbceb1095d0be7ddd2db96967092f962fb9339d0166d9609d09922443f4505f26b6c7c95a78750f47bd556e79168bd4c29074d9f989f3b7d90a1355eecbbad1d0d17e541290326dcea3fa11e523102786d22408d86e96e9543746dc78c86b0f2709dab3e6d3a95189f8b58a4dd5cc737dc9f76fefb36cdf2d02f2f5862e514b48e8a5817f44eb2caaa16f4ac5d3b43090ba2982c1ceacf2d989fa3ea516362cef0658b97b4e1c2dec388ff2cf864d1e4a33295b5245238e9fe16936fa23bf192389ecb400cf05509d15b5c9496edb4518b0689e8e2d5e8fc3e58909943f660c9adf88ffee3ee77d2b075c4a56539cc95f14850e22adb58ff1393f178564ce9607aba47068666d66cae93a1954218bc19ad3cd35b47a4da538ac3fc710892dd36e258f2fe4bf560f9803e8784f2b275805d54e896871f889c8f052e3e35f68e5c8aa48ede73cf362560fa2c133369f0ffc449bb3d2da4b51187a75978fe22afe1cd42bfa69662558b6f4b2d6ce7006705bc18697a09948dd2001cf31a120c2db17ec75784b9ab5ee36e6cb773a32cdb3e8d77e3156dceaabc1cd0401c63a3abeddc06a7cff109bc840a49d3269a6f7793f90e2fbfaffb590a7a520c3bcff8a464037a3e0bf1557bf190d63dc9a0ff7f361e906482c03e2f5cb01228f6632cb35516051ca7e74c804f30ac393228a78a924004903e36587ef30964415e19c3a006e700df01749e2efd2b65b3460c48f56674a03c9ab94dc353b6c3abd54ee3c9ef1a73dc1942ec64c0ac24a69e656099841f76de9574b110075868960d763238256438c4ceba6bbf2879358a2364f16b3f4fadc22cebecee44ef262e029370168b851508126064b535fa32a1d8fdbc2a460228182635b32c08ece30a4cee01cc596df118185b3e8813a8911886d1aaac0b3e704d420df0a9c285c220f65c638bc3eb966fcdfc379b08a274d5aac6e556e0ec6bd60ca9df1e69bb3ec1ca3b1bb247b0115409c4d61840c58eb689fe3fc4f262f2b01e81b657f75f03e196062dd8129cf22f131574cf17429da2c0bc4377acecdf22d40590e95600906fdf2d1f641b1c792bc7d9ad233f1715551b9d5fc9231dc3080e65915389e7fde8124a44cabb5f1b72cc61b2fbd78737ea4c369eb029535d3e73e4b4190dbd306e77191b6dcd87925112cb2ba447640d527df56171cc0a376ddbafc557631febfbbae55f791dc01513113043f98d7253d3cd15148d352a5723546927030bb24f7b10947006618ac783103ea5598c779d2c0e101ad62624a65c75d5a707b34558c8f727818b560eb15885f61e9b7dadd1652b658afa4959a82abaef7a178e09512b28220c0ea8a374e51776a5f7ab602a9eb4dcf43136df0cde9860e1003887e841f986a5a106b8b9ba278722cdb27db2851bc3d8a12d8c53e18ff98eda55ca334367ef78344cedee4d45aeb54e0a738496b2c5362a20447d13ee2609c19637d1ad03ed038943c2fbd8524ec455fbad600491706cb2c069e497f3c1b7e1188960d2b7bd0b365dde5ee9cbe5c24b061171ffe547b30e8865508be6544fc637b8f3d1c6ded5a23d4a7e46fc8e1b3424d62268774b6e849e173d72f0f5c72f564882ee8303775792b163e709f000036cae22b0bf32d5ef74af7006aae7dceb41259159e60bce2ca346c77f9e84c2c97683ed1bf2456a1dbd67304b38e1177365d963c8616c01cad93dc5598ae5c3610f75fdcd37363374e012b0996980b656e36c6b0cb466759909a8f83519f0f5de9c107f25304f68629e0e453efb25ef4bd41df060c841d257dce456b61d94a423364dd63d5e1d9767f3b63de6db784cf27043d3c6b02c9d6b044aeb4e0d371dfd799ba7fd8ae10e11a170fc702ab4bc999dc3e9b2c25dad747b92c06b4e2625ab8ff47646870381de3377202424512c96a66855bfcffa1a57674d8ddfee08f20fccf559bc02fe2c8616551efe32222d3b5d848e2ff110dea87dee83ccdcac7fab47f17046eda44ec7bbb410a2e199f55a75f648fa86c4df60f0f160c81735be0c6f7db2ae529e4684873bebcb95e4cf3afce3154096d1218b2e286eaae0dd4429111662eef59a8c4b024bb6c02937e9dda6427dbc1bfae80512dc989563dddcc23499aa6964e3ac825fa249cf8173aa19db9e3c93814d0d4ca87f3afea1e693e0df42c27c27facf77964886b0ed3337519b37b4737670a1e35585bd60e026c47e9bf79f077234a7ed5ace59d6344b35eeb270a01539a2f69537c571f86e38ff4d3e4e5b183eaa7f58b1a52b92f51693274ec5994124df85f4eb07b9fe548cea01ccbe18a923742822334ea649ffdb7b1db3aded7e8cc4a658015d042de70ecca9783d5efc483ee5b50b098b6ea2465a4099eafba8b23bdcd204486a74c7e5e7c6bbf8cbb025b49c555e9a45cbb342f09f6c3db5af5416cc390dd8125eb1aa7cefc5fc2836057d0ae6babbe509f65e71d9f3ceef7457f77e47bb0042f06950d620a3cfc576b1286c26bc8870192a68041a4724a5f696be3f26c20cbc91af45225099dc935ff8ddbf5aad869e981c521ea6a553138513ff9423b6f70360ca9feeae3e511dc49092c740d714689a2a379dbb8f80c3a3f85d434071ef950894e63cc237ca9303617b8f36025d401d2a1ad0cf1eb647c0a8e89cc547da9b4dd7e5dd25f33e7de094ea3a64392e0b023a1cca5ae07fa71ae4f8de9552884da6f726e88fd2d2d3661db7b30da736a30a978799e0659427bd82e1d4be634bc58926f7b6ffd1005956d8be18520457fe6963db75eb1297680d102b625feb205f6826e48b4f29bd4d2013da9045d511486aba514e31b805ce2cda5519ae2c1e84c4c2033df01b0ba991e9c48fce99015310fb747b09dd22c55bad4b530eefaa3f953b4e3d9d7bedc5aad85303335d146b74a3c0f77f8c9ecc7531ee879921f442d7da1fb5256111ef9b9647a49af01b01d23fcdc339fcfcd8823a613556b86acf2a1d8e74da74633735a86e9570919ead7c385928316613fc9b8a2154fb0ffc5c67faf2036552d823c1c184b898d59eee1b1a277bab3924f0aaabf295676976129213254bf57cd8e4be88c9250a8c36b4aa9e38c499fcbf7bfd312a91a0ccb517bcb0228588a4c7dd75ff8d3be1c90d8dbf04fd3b9d5bdfc9cc582f32e991aff3d60a3ec26f6568ee3d03975da3026e20c6f0944e23e4cc1981395be67ea6c08b5b8f08df1800bfdcd24f8c31f30df9bdf92828d94b32ed9a7b7c35c7143941fbd09e43f2ae0db6921de59cb58f9804a2d70cdb1494d7c47f448a1149876c188034134dfee50f7421a86469ef4f0d4d0b60cf6e179e0b2a126134faaf235d2e8b9458162c83445cce67a0ac403fb1fbb6c84bcf55ff793643c09d691516e2c65419e211690b6edef0faeff3e0656858481a80d971c2b0c8200459d988b1e4800a09ada6ac6963013742fdddcf603f9f85bb5adcea0f3dd681c08c0c1b7084c1fc8ab76f61ab7ad81d8753e1ca3e4b1b68f2745106f7628b22df061c71ce37a7805c2b8fbdfe9ebd7428a13e3784f2bfff096439060638673fb099df92bb58e84920a56b734389dc50c8605631757756fb3a35585eb90581b7018a95811f0cb424f7bde040cf82f5578291ffb9344ed48d44af5ce206cfafcaff5790aec4bc50639e9599aeb7c81b50295d2c51fa32dbfbcaf4c68ddc81afc559b9bd3fc299b523bb9c0b6a719ebeed93c7d27b620820a2380506cfdc159482934d8f392fcf25247348b03ac28530aa3d924148c8cb8cb4d98d267196ee29b986e842344abadc2839353b7846bb6fc136ee83665d6a6e54927ce9cd1cc1a6f52af889479510231afaff0c2a9d3d43c05ba40a76afcdaea75072b9d7e33e3bda28d5310c8a2bb97057dc6565dc0df5fde6e0d376b5b169ca0f2871a691881435373e80a0e6bc357279a20d2fe30343a43488a9d42a5df4fb6b86a32fa5066361dd9d356102eb8027be0124dfa30af3588f6c0af4f3e1738d219f820ae80a2c1b12b093ba54ceb6cd7f7d87c77088d4db506708c61bac4cd041dd1ff8a7c8015d263b7164933b310cdcece99ef314ff4c3df390a30a67b6f506c339d2db80350540538e799647d6ed1ad72de7398151c0228ec0d3130ee3ccc01e564c2de5bd7df1ca6d6359ae679c5faa5b258b2033eb40721c7b4553f896e227926f76d6087de72a0a12efe0f0035d99e1fe142453740af55189cc2c04771b58ba6892b3429fabbc3dcc2e11844903ad7d155e75c0b02042121cc92bd2dd9c1fbfb88b2f31457d624cb9b6e9d7de0b879533a334a1487634a55c5e16d748eee75cfd5a2f0d7f8ef11db22b69768240d36c8c799bc03ecd7140769201909112b72c20d2da9cff309df77e5b58777f711899ac8e7b1b7ebf867afcc347e712d20a4d41cd01d0c32eccdf3cf94f3361512ff1fc032a3d0d000dc1bd49f4a9985bd880df5181363e6a474bc803b2eee67a68db423bb55fb66c287b084a52e2241ab12686ac1c2a9b449147faded4dab39412b0ada3c18d37eb5bfd64c5a452c2a260f043b8c0ce02e3071a90ac4ea8cfe7692f8a32e843b23608fd0f83b14b25f05faec57c45e42b4693f253da91f7e90e634eaa74f4dcb26a119f3c0f4bfab328c2b5608da3c7ced00d681bd90bb4d280cddf444ee473f0f8c9085b2de776845b6860a1798c6e3596de6e6292f9f7651b11db43620611029e95f73af574ca940fc077beed03ef738af45739d8dfba1fbb3bedbfa1f49ddb89ac2a2b7243e6aa2686fd02c5b1ccfccf5c90a94c13cc929e5be730f868f3580b010413a93bc74a2f9f43a9fa1ce7164e13fbca6badd46b35f8bbfb18b2eddf0dae0720d0a43bac204c109d8672370f2d15a3da5d4f185ae82dee9c12dd8961068eb6ad53c6eff1e1aa5dfd53072d262dc786121900cfa0ed0c9692d0015602474c23d1b5882309a2a85c85a790c85abc68a14863074fe7f0ab7da2991f9db02a9d02e2930dd045f0c080fdfba15394f9922d8e640cb555fb4cf61d63a0242516f6c11fa973dc3d50e0d01f8632e48cc124c3d6ce96057e764fb8f979dd09bc83e1e82443459eeb130b4bc55234c4a99f620e740990197442b9186437661a90ea9c3e9ee9346e012d4cc40b7274c25b097059b4f30873c9bb7724e6447fbaf007e27f1d61a2833b0afe66cbe3a4fdf4b12d5f762b3b480df61fb4fe372dd6378b5b6a1996ee26a16a057481e3feca804b1b6db5cae42d863560d8cdcbf676bf604d254656b361d3a93b6bc67e191cda57d92a8788d35504620dacb18945b269367dace63406e21b34825999f7574921d2751bb55b4d544bfa90f3722a62e8caff8ea5fd20ed579d280f5e815e635dd7bdee6df27287e7c9f254bb2e5098fb57eae16c8497aa7d8bd4a93b8a269a2acdb021fe3e6a317abbcfc97f6191be82fba3ea6bc2c3a5507736bfa31c1938246be163595bb6e76d1818fca81644a1b6bebdf5824ec694071b81a84ec74610ac23acddfa7d4ce706b78253c26b9c17bd9f13a2f0bde87e757cb2999e93fd09115f4af2fa042b434727808f74a0dab126a06feb9cf207295640a55e5f1ddd40a8f24c76a302cee06f82d9d6d8736ffd5132d5f1878b28937b2bd5cdbd48bcc6a7e8b395feb4f4b8ee0b3afef6d57ccd968a2fd6f5563689b7a8cb85c06d3d5f250683b5eff9b3503ab584b7491360edf12eb7ebc55dab6096cfb4eec2e6277514bbe81220355634d4c246684fd92da4247dbac8ffdbd2a1ed7c04e6fe1935a1c19e3e62f853e301c5cce0e3fd04feb71e3c52d3cea867708ac9fdd94540df431b7ca697a33147e8e522782b7d1376abb325117239317f40aa31587f90b0ea7eb007a66eb935da797421dfa780f5760cddc7867bf7e93436e6381ab24c776275758aeecd351d3490dd9b8853df15f338f13cb4bb366290ea852cd802521e4a226664cd69ef61336c7e7c4a9b32112e17d3bc8abf11de77ea8a722180d288846b739d9de651ec2c235bf6e5da7917dfbb6524dc43ec9bd919c6454148a6d60e0f8f1df8d7732b9379590960c45f43cc8f634708e280e63f2a304dcb807ebdedd4495768d3f0e0f59d1c88c81675d50a8bf5eaeede093e742f6876908537138f94b6c634d5e3a74201da47fcd257c870675e0a45e1776056c7343a0acdecc5ca45f23183e935d4eb8ca001ac24e16560b858e53084f9e177128d09c6c8431e3e08e5149083f986e716b87dc484628a68d2060970e035f495ee78c6ac8012787b703b234a408e4a265c0f609cb20f4c34bfdf1757345de19374a75fbc1b10a2fb74f6bb947bca414ce13ec0053bf44670f8ec77f8f83e9014a7cef3e0bdcfc7859221d936d149cd4d0cc591df00a7d487919e3acfdb5417604e782f22b9cd8e8b36244eee57875f975ae024b2b7b1f67efd24f8ef9be9b4130734a7e4c375e47823a32762139b12345f9f0e434f79cca393d4c2b9e6d436293089c34e9627ac2fa29573e579b8fed62b0b7ddb38413585326806d28147d37f0488774b22f0263813e22e8abe06830def9379e78ae13fc8605dbf5d770c8e5e258c65983120c3472e131b59f347a0fd2cf711ef3aa5dcd5e8b7ff1c3fa2bbd6174c3f7bc4874804b2acc40fc3922c94a91e57c5d4ce631e95ee3dff799b54e455b66e116e66b5f2792259515bf27af49ebac6ad5786d3ad0d72655a45ca764f2d96314474790523e3ad0f7dc981c8ac721e22b74d3acf545651042a8ef7ca506cfbea56b520d07456e16db5517797fe2982a4d08e2bff18afefadfd899e8c63020b17a05244cc2f6e3d02552f6613a6b37</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码或者邮件联系.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 胡言乱语 </tag>
            
            <tag> 辩论与讨论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>听歌中的“首因效应”</title>
      <link href="/2024/10/28/20241028/"/>
      <url>/2024/10/28/20241028/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c91930de71e8ca81aa5abc8dd6b1f4dfa05f273af6acee4a0da3069c6e6d0db3">f842161a9e5a07c6aecdb110fb678cdd53f602b4eed381a9d45d4c3707fd6fd598413d4f81d64cd8af9c88d7640912da1fbc2a0a9a694b113efe44f5b8f01c2d4e956dfc1a3e5773bc30a798edaf166fd6d5f8bf0815d69fa98984aea05d83f29e28eeb1f728d8c1ed0fff831da2d87c34a9bc57bf4d45dbbd2099033f0be541e8b3b865fb12f2304a076074263da1d87217cb11907dc683b1f38a72694a9f3c38156206b25579097901cf35c52929dfeff8fdaf93817b1124f7b470cd9be4b2341ac47f0119e95d5b82aff967f1ba5ee4d5e2a6681bc52d7d556e05840768ce6d14ca220033096849384abe535df893da3b4475573ca43baffbcef7173c01f2b41801debe2c2c83654131d5713a0fb25e704fbf9393fc351bd7434eb69ade9bbb99e6f2f6e3809bc5a65da72317c93f6f5fdb24ddea9594c2165d8ddf3bd8ee2f136d7f7aa887f8727516d1186c10293a92cc4ea4d3de8e6b0bf7d6048ecbff13d02294a27e3b09c48a43f3d4b0c6664bc319136fd7898e9e0f59c1197c589705bd4e734987608c92fcabbbddcd11a2080622e519792a6d652bf7568f22d2f2dc2dab1e4c8bc508982b4ac4fffa618ffe3373a901053972fe09bfbc92f90435c774651a85b326f80551591e5ebf6388a8345e3d5c6b53005f8edb2f0e1a6fbc8ba5486c338bd661f89d0dd82a6f186bb1e29e7136ccf5a88f1a9b1148aa29e0d5f25dd6d0a202953744ee80c2c97d7493edb433539ab2c6812d6ffeec7c1d10c82e9449f14bf8d5de148b129b3fa5e653f119eead67a29b6d22104b540bf154a27cd307d22bad764a017583b88b2d7a8086b57151d56fb1602ccb69f261fea0f25da7dca29b7f8131d6349f3f69abfb3cb05709c7d40118c7a187cc98b30ef6bdb25af157072ef87232447e76e970e789eddcc049b08fe5ca85604286fca6b5cbce0548dc775af198389837c72f0fc684dd031b1a6df1de8623cf277297574fb91380af5c18a0ac577cc49a644ea81f3c082ce0eac51cee282c16376a45af37acb8708bc924a260768aa215f85d37d8f4ad458cbaa1769bb644140a8ec464fe1f182a316efb6ea6e8118bbe250ab93e67f721a5c8a0a19e07e1a4a983ee65031941d872a799d9cc060e8b3ef007d1f969e239452bcf8be4b3388c85526c0ebaf34f5d17b886e5973ddf7483ef47915da7e5718c46ac98f6b4cfd0f1fdeb5938199c444b43e00c684ed162a1753f6db4909c1e49ebe3b31004fe24d3dd6e5746a4bb9ce57fd71ccfc43553fb218335777880da10907a00ef46d7314e82c5c19cfef5ef2f3756367bec717458eb141ac1fed65be757640d270348ebd2ebc06e639fe48d33df225c3eb5e6e9b30f69e45702a1bece68b5ab798550b8750ec6e284b9d79f9f9982774d06c4df6544d6484407010b4672127598860290ebb8fd5a925ab5a5d5f7796eaef32b2f68c8f6c9450eb775200b7146ce2ac7570b0a5b72d261bca2135fd4b571ea922e9bfe4c3020c9d45047b56fe8a6e54a485d006b23506fd51f64b21be94411c8a42cf57e0838c0ba2b85fb3fd863571712b27ce81fcc5cdcedaaa2906607c1e5c3b5db54e891c70cfff51544c4085f4495e8fec8280fa738ac951634f1d30dfabc04ea9e5e95e85a25253608acc7447b7676af0e8930f66b863711cd8560dee49ba57c0783ae53f2bb99a1d1ee1cb727cda46351716179e8bc8f8c0368cc94f5efad3ec4ded3ea705390fbbc01f95614ea38a8c3e52640d72e080a908341dd81439efb9c76cc291e8ad4f3f457b5e5ad4cf96b19cbc96d0a2137b057da8fdb936f691e6becbf17c8a81dbf97bd107fc11f621dd2fc054ad2c822793f9e8d8ff5c1e49ef61b8448867d9e286d33c8fe219c5db79b7bd656d81b117957b23fc254a1de2224f8f69fb52e24f350e76003c396a8b752017a0ae57001b71691ef1da510097bd88e4fba4f368394e57324833ef6a22ed5163bcdf95c03a60196781d058fe89ad409ced23cba19faf5257d541e48839d6745c34b661858dcc2224222da103f8fda1ef1e961fbe51b3b9b9a630688339dc50ffb652434c1f4f9d3b558130cd368a612be11032f815b65b0a705100445c6a1c609a0aa443e24697df30e0aef0dbb0fe0a95ce053209725b5bf3cc643a380d2a71b63c2bd44af3ebb8325183248b682a9936615814d85b1086e09aeb43f7b944f2a30873fdc1212d7483789c0621dd780974eb9feafeb11a66be119f522d3d2de611aef9838574ff04ef98e6cfab6e192f73cfef8a4985742e7865e17bbddbdb3abdf32182b811ba4812ac10698b2a6f228dce8fdf074ec91c4078240399e1b9dabea8ab036bd55ca1cbda5529edfdb7a26817ef47dd7b006d29467e4d697789c8b37048b09f0e4076d34d9f0f62a6fe13ea2149f3d25287dda9664442645325487ea7bc10011f5cdd19d888b3b07563a57fdc0986f03bfe225795259d385a9ad4a1c2e984145bbd9db0755e5279ac203787accc3828e630771f344c516e5ab7a60559e44849802a0a4b6a89eda6b72f2fc8fa8609a135fb3d36597e07b91f89d4c7c49e90b9cddeb4645c312f1bd393521b1eedf746ab3869eb94ac4f29c65b6403267b1f0508189e968117c3b5e96c3088caa3178236b28eaf876ba31a3845be620479b03fa6985f6f9dd1935a07f919ce12fabc7ab7491a803b4a540aa184650c73d621fcaa165a0338ec73f74c977225a4838c58e1583f1f9d2c85985c3b62196141de8eb426750aafa4f7862d87a023f99f49cfac6248209c27450bbcf13f73a10bf335906c5e1f0442b58682f0a3d01b52e432d6bc90d71b9bc678ad76cfe583dd6465dc08ca97f31029e8a7ca439133adb5331370fa245ff9348e0901b47a94cdecd088e4177a921ae1bb6e18c06bd7081ed20bb6427ea92fcac8a30c21160455500ddf3e84b4864a0e16d42cd52dee7c035f8f75c3e1c76bb450775106c8fc5fef7ece2c728dfd5e749256aa757a8204de2beac88feaf93205307e83ddcb4157fa329796f8de46011578b1f5bd0c8182e704004fea94c585c98248c45629b7907b84b91c1ca6d7e12a2117454a506469c18e68d051a652028a5eeb0b9d1bf7387c8bf05f810517cd896466b437894b2f8ddea7680f03f22c0982a4a9d51ce4ccc5fc3421e75951b26865f07e22410a0e6beec9831bfc8501c90d9251f9da391e9ec75f96b57ee551e95b989981c4312e295a97cb70f433f6fceee3c0ac4b9b077e03dbb68f6ead32b5adf2fbfc0b4ae9fe49b02f071bf0a66efcb197837589fb11c5169c12303154085f44d8ffdde3e52173c3359a2837e0bd62e496389869fb9d60523da521533325948ab9c52978d8c5c2f540493aa2880a1f879182a67cfafc2f9045c29004d9b0bd2b5bf8e22aac76bdd1fcad8d01996050f1c011ae1136ebc3e91c37c5b51a91e5e14063d179b34980338a343d8b554c40e985c6417b5a0a45c5f7335967a410bfaca147d86dec674a653bcec05e439ee345801aa88b77f4643e67b4bdeb871b9efb5d200b2e336551e83b79dbbd06e1f79b1c71a04c213c5c7f9ad65256ebb4cc67cb86af38bfef0522969cfea88fc54aed56ba0cf3a7e00446aa0ffb30b2ba72d0e2aea337908af6ac726c22892c9059eb488c6cbab29c120ccc163e4a719d3207a598fe84c3ee7c1ca74dceccdb9bf97e7d91f2d5132caaff4fec3fbc1f27b3c2c17f0b8d81e1530bb7d4bc23b81bbc59954393c2e318264db16e58444c36f4a99c3c426e3969e147c3a4897cb0582a726bbf31a42a08ffc38543f69f9718ec621773c1bfa26724574c6bb952f4bb9af7f7b49822dea83560de04b1bb718d2c7218289f452c0703e48023252478d06311f5203ed113ee8940849dc0d77dadda026135e0e1f06bc21d2f4800ebda732dffacae603ca269b921612c75c3587dc626200b0522a4cb3c8df6c1e1b19fba889ce9c3ceb6a95bebc871947f3ef75bccc39debd74163d7263db86bd58faee1a747036e67a0b590be9be954dad22190e0ca71a9f9f3f2946e307b9425dd424280bc5875d0cda7102c5a794792fb64095cb615e36649dd49792122b68f429406d5e96260683ba872d2de13fe3a3bccc2abe768363c207d85bbeccd50ebf2609adc6e4ccfeaffb507c03893142aeac5ac1551ef9048372c495c27cc1b2b62fd60f5366442672ff8db940ffabd5ce1949b3945571bbc61e8aa80216a6f1ac0c357a7f29af0107f7f46913f60b2a396f52b1bcd054f8897dd221b4221bbf85d4d690f3ffb9ea3fc6286e7e59d2b53c974615296ad8e8b67796ca0a98d4d248c176474a50e7bad17a0c1928a0287bfb21012dd4d601633e8325002a768ddc61dff0d7420199f89f361aa3b67dd23e9b7a8c3feb85be0a7e7cc8e1ef69769ea2b8ba584b3e517f09df08030cfee1fa7491265b24b07a0286e4a780954bbc2594bc3392236443e30759d3bccf2a97cf9ad63751990285d46060d115d6bdb87835379ab324153518fac4ad8b9963a30471717794a8669dc260cd14ad5b799e11efbf619c950a65dc55d13031649ccdf2850287d1a8a35d15d652897d74471c45ad401ebcaa110f8d137574b55f2c50f7d911282e18c77e4334b2a1714282239e5888e6e969d3107149fa4c21c8b7d3a5b452d6268984d137edb346a2b5b082b953e14fbcc86e4c29b2d7504d4863cf51bc183d1c8ff9d5955c6d4cd08c972d1c3ba0576277a29f57a7b8a73fe4365eedbe65be379935a51681b86c9f91902e1e523e4fe355dd94c89615ca67421ea6991e39580b25a16f13ac957f37317828daeb600b491a8edab792f572768fc7dd6400100ed69f2fafff68df234bcb3a77ebb3a9806cecb1ff453183948ae732d5f588c52bf6967963444d71db82571cfe6d03629bfd6f64fdb0c760b31e00a4d212d833e7914b27ce694500a22f05131bc4e021b1a1ab6370b4bacdaa8d60e6d107a7ddfe0a98c4f0540a82cca31bc6512655cfcc8ce85a586f7c83ee345dc5fd59b6ed53614fea171ab48795cd6c27093eb612760f76eec0bdee9a86088f41588239ad59fd4ceca9d025a93f28a8590256a5d86fda7969d4ec7343d9c56a2b773c7911fe56e47896562c48c5f26aa22afa21a9124cedf7ab71bc550b2849497340881f8eb5d9ccfcf21f2e15b2f1409b7e2b65cc1380bd1ba2bb908eae45aa60ea298c41caef05ea2061d8002b02afd3534c8f3a98015588cfee0330108939cf6fd7320a0e8942fd554eb382f87b4b5cc64cea4af069d012a6343a64a459cf72a585b7cede481dbe272b880c981dd5b51ca61f001ef52e2f1feefcf7001329ca91bcb0db0fca988e6f40dcfed7e8108a9c6f269895bb87fda617f8f6684ef1a736b7f18c4e35e528868cda1b86350cd94d88b49e8927411d5144f61be009a9689a0b1ad1ca19dd6f31ca8642333edfe37b7ad27b15fa26de112f2279961f377e8c6b6e13f611f32a3dbbe99d938ea3c294b8acd73791298187313b36dc0411d9b5848428c84ffb8a1d867d5ba9cc6fa9e937f2bc4e16908474a0b9daaa8f94a1756f2be38867f89e8359a18e3428ad8ff122fbdbb63064cd7c38070ac003a3b0109e1b07118e3649ad1b25b5ddaaf7f4e06f21280d942688d5de8f5b1bc9f2b35d43f266c5493900e693649b67916838e8d3469b34a61fa53b21866c90a300dd282b24c8448eb5f5d2c4c673311e54ced4f98fc9398d95521c3e437266f44bd30534e3c2c4043d294adf6f0bf8420ea0077493d81ea33883bbf6550b509e16f010757e66d9c3a15f2b6c3d8333998d786861d2fa4e350134cf5489c2ba6a955f9a9595264a4b233b7a4ef85bff22ba9347461e523641547d05f21c214d8fe0cc63860c009299552fe852c5e5d1636ae57565fef86dc0da897f4862edd8a62cfd06e620a959d442ab414b6571396906afb5a731f17bba55f4c4ae1979930edcaad37a90120e08ad2e248a58a68792161844038d3f0fd9224ee72416b58260e0eef6cc6bf741e310cc0e4b594f0fcfc049e4b0cc54a3cccbe27537bcc89f1b45cee6fbc50ccaa14793106a086bf5712897b4094c6dccbb667a1f3737eeb7ee4a2a7f3bb7592d631f546ff823d630c301eecf67b7610461fa5f230ad0be969e092b7b7e6e2e8c520824f138a231ea912c6de64342834fbbb06fe1b78cd3030b6d0e1f0f93285f3707b342f7db489867ae7d448259ceeeb69f11aab53ba0724f01579c54d92c3a5a2f63eea5e65bbfcf9770957ee5e9c3212cff55599479089c4cf6f77549e2a2f50cc194f3ba62a5cf1556f2cf3a329650ba6476556b7aad3a0a3710b149f3c11877dc13e6dfe1abb7c76a8e15db0d9ab4c80b980bf6ab49905818e55b42ad25fdc6db9f40aecbcddb657d817af40ce5489aae0aa8960c8a1560568287c894c5bc414449955a97ecf52d3dea89f726936898b399a7e6fb4b34baf0822e1e18d4a1d3917cd25949c7739d493a0921b36afcac4e3c73964b87f4fa937618c962f0ee07fa0191a94055e1b73824965944d5d60c1c78f82210ced767440cf106e81f2eed47d43f627ed6664f5d17c9923466baf844e3197bb093e422095c586f2ed0eab64122228171d9534461dd0e4840c1169d29dffbd8bb248a2b17c6836eb37cbfb79332304eaf7b68a2cd0566bb625a21cca7e2caefd85dc996752bfcd4eb52859af8b61c8056e9148f3e71c164d339b2940afb35aa0c0fb5b619d04d9f772b54e9159aac83596bd1858396c0ef9293e1055ecff734029a505b148effcb9c428862f2868b8672201b6cca8564db5fb22784d5903c07e2547ebbcc1ed4d755beb7936451c49d39e82b5be3c46120836f1123b5c23cb7ea0ec27004c55286658dba8d3d98e02ba6b5806a1363bd9f37e40a1a2a643e7be3e5381018e5bd2a683af598abc506e32b2282aa70b9369f653a82e9d261801e7a372b4dbdc2f245d3a71c59635909f056a33c80e7d0922d987fd6ecc7b3ce2828448d25e8d0af4b772aa674fa9d4032aa2ff2ea57000260d79f2eebd117a918934ece014bf39f81cd09aff1950a778abd6140689e7fc0906dea44626aa405b062aed82c53e87a53aed62598e747d6aa6250d6936e4c391c4723c376b69e4fb544d7ab82a6c2d7c57ad9c5300c6da11788edbfbfadfb096839f15f36d88a32fc50e569a374f654504f4401dac70f9218ef7d840326c20100330d87d3190389cd1b7c8d82952e2fe1c65fe19643b55628fab17152baa862ab1f00d383fe0aabc8a864cf785829edeab62837a37302705002c8ebd1198a54e8dd04ef9bb851891e5fc711b7b0caa3ee9922002466b3e8664cb4c5bf3ee36b1455db4df1e41a7f97024e3fb9ae393ef37536c9dc2dd0a3c42ae7b934cdc7cda4734d3c4d8b15e03eae0270fb902a66f4e735041675fb868ea84e3f635f0d7684039fd966a8d87f690b3a08d822730e0d6b7aff9aa1f84f725e152c227a8817b51dfa691e23a2a6211066ac48afbd8d38a77a6a01a5d54551b672e4ef3e1541932d799f47ae15292930bfbef1ba460b71d7776113952f9c6c0e20278d5dd1720ad2c7614c562aebfde9ab2d307fbbd7f32794e4b664aeff35d8213be18534ffb55bdec60a73407b84dfa141aea8ece13179987575a56fd4d7aed821a0c25b7e01c645f60cda31098095d7ff42e8a46b4cd88a9cc0a417a1abcb6d1a1963337e9b8b4ae66192c5917ff1d5d6e867286dbdd1308a9cdd81c3249c6ef0faba88e31c7cdd8e907fd49025d2dfbd994a4a24798f3e087e2f06c8b9a1ef762b01cc0010dfc1f29d34a1f203351b72574b245c091cbf8d4d6ce6975b376dd4a87ecfde778c8a4e2ad7873ce2f5587920ec04545abaddff3d21b7e3646dfd73a7cc4b00241d2b1565fd012c0ad7d02aabdda59ceca40f37d7c0dfbc1313cdff35b09a4e8f654c8c6c7c62fa3b7fe4c720f6487a18ebc1c7b30c1c5f75fb66d201091a973eb16a1497ddfdc5542d4f6854cc49d9879703d57f58bb7a99578e0a0122fff7572ec06ba1af9ad60b1da526072ac94f7fa60e3a92c3dd73e8fc38e646c1c5ecba7fde010bc86c03fd2a7601936ac9c0bd3d36ad1ece25d5bbedad953545d614b108f15d6e1acd2b06c465f51c62f440562910d796a662a278dcc3e434692758e75b6ac8a78e587de4e5c795e5e51e108fa97207eefb02566a162fd1e0e53f6cdc7c1140e410480bc55b0fd9c75f10bce6349661f180c102d54da423e9cf9b1c43193564af16a8e1d133b1d5bd65b4c3d5ed03dff56cdf2615c435a168c14bf69c49ee50bd1f4a4ccd039601692bfa5e5659c8a405f1417ca30c467e66a51962e471c850670037b428106fb88daa92aa87707be9dab75e50848d8d223b3fcaa2c95f08a100d75cdef66e5e5c5855b677a5267654f2b17c801e9bb81063abd6b28df74f3eaa2066</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码或者邮件联系.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 胡言乱语 </tag>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公告（更新于2025-07-29</title>
      <link href="/2024/10/26/top/"/>
      <url>/2024/10/26/top/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>   最新摘要：尝试引入了pjax，以实现音乐全局播放，目前暂未发现什么bug</p><p>本站无商业用途，仅做个人学习、分享、唠嗑用。</p><p>目前屏蔽了国外ip，访问请于国内（因为发现来自国外的不明生物访问太多了</p><p><strong>一些小问题：</strong></p><ul><li><p><strong>关于音乐播放器无法全局播放的问题：由于更换了Matery主题，其刷新跳转时会重新加载音乐插件。比较好的解决方式目前暂未找到。这个问题还是等待学会相关知识再解决。</strong></p></li><li><p><strong>关于评论，目前感觉没有很大必要配置评论区，主要是风险小、好用的目前没有找到。日后再说。</strong></p></li><li><p><strong>关于域名。 目前是买了三年（2023），后面极大可能会更换域名，请注意到时候的文章（更换域名的时候也可能会重新搭建blog，文章到时候应该会全部搬迁，有可能会换用其他主题（比如butterfly等等</strong></p></li><li><p><strong>关于wx二维码，真实有效</strong></p></li><li><p><strong>关于音乐错乱。其为用网yy插件实现，有些vip歌曲实在没办法（有些歌莫名其妙就成了付费的了），而且会出现信息错乱等现象。还有一些是用的网友上传的。</strong></p></li><li><p><strong>联系方式：请通过邮件发送信息，要求来信请详细说清楚，发送到：<a href="mailto:&#x6c;&#97;&#111;&#x78;&#105;&#97;&#111;&#x6b;&#x65;&#x40;&#x7a;&#121;&#x77;&#105;&#102;&#101;&#x6c;&#x69;&#x75;&#121;&#105;&#110;&#103;&#46;&#x74;&#111;&#x70;">laoxiaoke@zywifeliuying.top</a></strong></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picture</title>
      <link href="/2024/10/25/20241025/"/>
      <url>/2024/10/25/20241025/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3ddb0f052db2c49cb205dc99e2dd86a5c91833960e0e368ea31f8550568b7472">f842161a9e5a07c6aecdb110fb678cdd53f602b4eed381a9d45d4c3707fd6fd598413d4f81d64cd8af9c88d7640912da1fbc2a0a9a694b113efe44f5b8f01c2d4e956dfc1a3e5773bc30a798edaf166fd6d5f8bf0815d69fa98984aea05d83f29e28eeb1f728d8c1ed0fff831da2d87c34a9bc57bf4d45dbbd2099033f0be541e8b3b865fb12f2304a076074263da1d87217cb11907dc683b1f38a72694a9f3c38156206b25579097901cf35c52929dfeff8fdaf93817b1124f7b470cd9be4b2341ac47f0119e95d5b82aff967f1ba5ee4d5e2a6681bc52d7d556e05840768cecc042598b0ac78a9375931da79e2f4e8c66be19c1bd47ca1767767c09a469237fb6a6cd5026d439ec30b8540dd3715a99adab03f9e25c0ced30d8945f750faa5c6ad8ad0b9010c8de0b8b67f64316a6be8bdeeb4b86c73c3c2b7c982bc32abf33e94227f047ce1155897c3e307ba2d161084c09bd742ee9253e259ba59c066dbb983b9a8c16cdb6fe275e67aac64695f9e5f7e73d67fad3270064ef72ba1b44f3ef6a0fc2bb194bc455481e321627b04fca988fabffa0b7af11e27e45b88e645c1d7c15d2f9679b893ef9ed68bbe10400574fda5abd462b05e5ac4a7e5b1c3beb05a47acd06754327309b0fb3291dba2a1bcc5eb77c00577c729a1583c8107d373967b94ab85f05607f8e8ba685b44f090942638df34094305c5bd6f77cc2f7da1d390d023bdab04b6a47ec9688d28642d19c871cf3eb8c4224ea4068c968084d2cb1c9d439f6d850f14858fb8fb368d987002d266a795237c1463b714db3e85559012ebecdeb5f15484c29ea103566c40fb815bb62a0e93867e3eec47f3a47599bf98e8c5847a88f47c8ed956c823003d9e51022316b878c54cd4c0e392846f6f6fe85025ee6a085e2e97ef4a32b40d9ceb5cc30742e408fa34dfe84a6b7e85331fd69ba8202daf485f9953137ee56419490c2af0d4b6c180f2491494d8a3d35569781646e352d051e605853cf2570fb6b8075c7758f87db9348486d3fbafad5ab2c2d349b66969a0c427c51d60b0805d6ca20bc68f1ecb18e5242d628dcd22131c3c8b57aa3c7c9e824ac7937e9e2d10183c9b04125fd5a344d59b8c416655f2ad3ddcf7771b5676a148dcbc18c398</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码或者邮件联系.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当下社会中的竞争与合作</title>
      <link href="/2024/10/21/20241021/"/>
      <url>/2024/10/21/20241021/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8b44b5d95bc20bb87f45e23f363b6fd7a80eae51ce3828ced1f77929b632678e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码或者邮件联系.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 胡言乱语 </tag>
            
            <tag> 合作与竞争 </tag>
            
            <tag> 辩证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈语言魅力——以一则新闻为例</title>
      <link href="/2024/08/28/20240828/"/>
      <url>/2024/08/28/20240828/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：探讨新闻学的魅力<span id="more"></span></p><p><strong>preface: 语言，尤其是中文，是很有深意的。同样的一件事情，用一种语言，可以表达出完全不一样的意思。这就是新闻学啊。类似于各种潜规则，语言也有潜在的意思。就让我们以一则新闻为例子。</strong></p><p><img src="/2024/08/28/20240828/1.jpg"></p><p>这里的第二大段：老人家属赶来后…… </p><p>我们可以分析，向家属解释相关情况，这里应该是怎样的。也不过就是说，我看到老人摔倒了，然后把他扶起来了。但是，这里却说，情绪激动的老人，推搡，掌锢，争执不下。那么我请问，老人家属赶来的时候，老人是什么状态？为何家属一来，老人就不醉了？还激动了起来??</p><p>于是，可以猜想，1.老人本身清醒的，等家属来了可以趁此敲诈。2.老人不清醒，误以为是被撞的。但我认为不太可能，首先老人不可能倒在地上很久，应该是跌倒后，小孟就看到了。否则这社会也太颠了。其次老人也不太可能连自己撞没被撞都不知道吧？如果是喝醉，为何家属没来时不发作？家属一到了就清醒了？</p><p><img src="/2024/08/28/20240828/2.jpg"></p><p>我们看这一段：老人家属则执意要求……</p><p>难道说老人家属就不知道时小孟好意扶起来的吗？我想家属也大概是心知肚明的，要赔偿也是肯定的，毕竟没有实质性的证据。</p><p><img src="/2024/08/28/20240828/3.jpg"></p><p>这里的“会不会真的” “民警心里也犯了嘀咕”，就很好笑了。一个还在读书的青年，还能怀疑到了？这里很明显的就是 出事有责 的现象。出了事情，必须不能闹大，要有人背锅。倘若没有监控，我想说，即使所有人都知道人家是主动去扶老人的，但还是会被罚。</p><p>这里还用到了见义勇为这个词语，未免隐射了 当代，连扶老人也成了一件有风险的事情。唉！人与人之间的信任的脆弱，可见一斑了。</p><p><img src="/2024/08/28/20240828/4.jpg"></p><p>这里的老人家属意识到了自己的错误，连连道歉..</p><p>更是可笑，大人也是经历过社会，有一定见识的人了，也懂人情世故。连连道歉难道是真心的吗？我想，大部分都是走个过场罢了。</p><p>最后这里说并不后悔，但我想说，即使小孟真的没有丝毫后悔，而且下次碰见也会毫不犹豫的去做，那别人呢？那些犹豫不决的人呢？包括我，我一定也会先思考，或许我也会视而不见，扪心自问。谁想碰到这种敲诈呢？谁有那么多时间被这种事浪费呢？也就当代学子罢了。</p><p>——8.28.2024</p><p>附：碰见这种事，要先留下证据等，防人之心不可无，虽然我很无奈，但奈何对于大部分人来说，的确如此！</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新闻学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>订书机——我不知道的那些事</title>
      <link href="/2024/08/27/20240827/"/>
      <url>/2024/08/27/20240827/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：有关订书机的一些小知识。<span id="more"></span></p><p><strong>preface:在装订废稿纸的时候，一时兴起搜查了很早之前就有的疑惑，于是便知道了一些大多人可能并不知道的事。</strong></p><p>为了方便，请看图片</p><p><img src="/2024/08/27/20240827/1.jpg"></p><p>这个订书机右边那一片金属片是干什么的呢？我一直以为是放长方体盒子（订书钉），或者来压平纸张的。但实际并不好用，结果一查，原来是用来撬起钉子的。</p><p><img src="/2024/08/27/20240827/2.jpg"></p><p>总所周知，这个铁片是可以向上掰起，并且旋转180°的，小时候我也这样做过，但直到此时此刻，我才知道，这也是一种订书方式，如下图</p><p><img src="/2024/08/27/20240827/3.jpg"></p><p>可以看到，左边为不常用的，右边是我们一直以来的订书方式。两种不同在于钉腿的咬合方向，左边是向外，右边是向内。所以，可以知道，左边适用于临时装订，后面要分开的那种。就说这么多了</p><p>——8.27</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语标题大小写原则</title>
      <link href="/2024/08/13/20240812/"/>
      <url>/2024/08/13/20240812/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 摘要：英文文章中标题大小写规则。<span id="more"></span></p><p>在阅读英文资料时，最常接触的英语标题大写方式有两种，一种是全部字母大写，另一种是部分单词首字母大写。如：</p><p>THE TRUE COST OF BEING LAST IN LINE ——《哈佛商业评论》<br>The Case of the Offensive Band Name （the本不应该大写，这里大写是因为首字母） ——《读者文摘》</p><p>其中，前一种较少用，而后一种最为常用。为何？小站认为原因在于前一种多用于强调，而不太利于阅读。</p><p>对于后一种方式，一般知道最多的就是，标题中的实词首字母需要大写，而虚词则一律小写。其实，这只是最基本的要求。下面就带大家看看还有哪些具体的规则。</p><ul><li><p>基本规则 ⭐<br>规则1：永远大写标题的第一个和最后一个单词的首字母，无论这两个单词是什么词性。<br>规则2：永远大写以下5类单词的首字母：名词、代词（We、I、He）、动词、形容词、副词。<br>规则3：永远大写5个及以上字母的单词，无论这个单词是什么词性。<br>介词举例：Among, Between, Within<br>连词举例：Although, Because, Until</p></li><li><p>2 哪些单词不能大写首字母？<br>字母少于5个的介词和连词。<br>介词举例：at, down, for, from<br>连词举例：and, as, but, for, if<br>冠词：a, an, the 。<br>to（即使是作为不定式出现）。</p></li><li><p>3 常用虚词分类汇总<br>如果有些小伙伴仍然感觉拿捏不清，别担心，下面小站把常用虚词做个汇总，分成两列，请收藏本文，随时需要随时翻开查阅即可。</p></li></ul><p><strong>大写</strong>：About, Above, Across, After, Against, Along, Although, Among, Around, Because, Before, Behind, Below, Beneath, Beside, Between, During, Except, Inside, Outside, Since, Through, Toward, Under, Underneath, Unless, Until, Whenever, Where, Whereas, Wherever, While, Within, Without<br><strong>小写</strong>：a, an, and, as, as if, as long as, at, but, by, even if, for, from, if, if only, in, into, like, near, now that, nor, of, off, on, on top of, once, onto, or, out of, over, past, so, so that, than, that, the, till, to, up, upon, with, when, yet<br>最后，一些细心的小伙伴可能会发现一些比较糟心的词组，比如“as Though”，就是一个要小写首字母、一个要大写首字母。</p><p>转载自：<a href="https://blog.csdn.net/weixin_42468475/article/details/134052240">https://blog.csdn.net/weixin_42468475/article/details/134052240</a></p><p>参考：<a href="https://zhuanlan.zhihu.com/p/447542998">https://zhuanlan.zhihu.com/p/447542998</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
